{
  "className":"ut.optimization.ADAM_Spec",
  "title":"",
  "narrative":"ADAM is a more powerful alternative to the classical stochastic gradient descent.\n    It combines the best properties of the AdaGrad and the RMSProp algorithms, which makes\n    it especially well suited for sparse gradients and noisy data.\n    Adam is the most popular among the adaptive optimizers\n    because its adaptive learning rate working so well with sparse datasets.",
  "subjects":["neureka.optimization.Optimizer"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.049 seconds"
  },
  "headers":["\n                The code below assumes that for we\n                have the following 2 variables setup\n                throughout every data table iteration:\n                ```\n                    Tensor<?> w = Tensor.of(0d)\n                    Optimizer<?> o = Optimizer.ADAM.create(w)                   \n                    w.set(o)                 \n                ```\n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"ADAM optimizes according to expected inputs",
      "result":"PASS",
      "duration":"0.021 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new scalar gradient tensor is being created.","code":["Tensor g = Tensor.of(expectedWeight)"]},

        {"kind":"and","text":"The following input is being applied to the tensor (and internal optimizer)...","code":["w.set( Tensor.of( (double)gradient ) )","w.applyGradient()"]},

        {"kind":"expect","text":"The following state emerges:","code":["w.toString().contains(g.toString())","w.shape.hashCode()==g.shape.hashCode()","w.strides().hashCode()==g.strides().hashCode()","w.indicesMap().hashCode()==g.indicesMap().hashCode()","w.spread().hashCode()==g.spread().hashCode()","w.offset().hashCode()==g.offset().hashCode()"]},

        {"kind":"where","text":"","code":{"gradient":["-3","-3","2","-3","2","2","-4","-3","-3","2"],"expectedWeight":["0.009999999666666677","0.01999","0.02426","0.03034","0.03332","0.03409","0.03738","0.04194","0.04744","0.05112"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equations used by ADAM return expected result.",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create tensors given an equation and array or list of input tensors...","code":["var t1 = Tensor.of( expression, inputs )","var t2 = Tensor.of( expression, inputs as Float[] )","var t3 = Tensor.of( expression, true, inputs.collect(it -> Tensor.of(it) ) )","var t4 = Tensor.of( expression, false, inputs.collect(it -> Tensor.of(it) ) )","var t5 = Tensor.of( expression, false, inputs.collect(it -> Tensor.of(it) ) as Tensor<Double>[] )"]},

        {"kind":"expect","text":"...this produces the expected result String.","code":["t1.toString().contains( expected )","t2.toString().contains( expected.replace(\".29999\", \".30000\") )","t3.toString().contains( expected )","t4.toString().contains( expected )","t5.toString().contains( expected )"]},

        {"kind":"where","text":"The following expressions, inputs and expected String results are being used :","code":{"expression":["\"( 1 - I[0]) * I[1]\"","\"I[0] * I[1] + (1 - I[2]) * I[3]\"","\"I[0] / ( 1 - I[1] )\"","\"I[0] ** 0.5 + I[1]\"","\"I[0] - I[1] * I[2] /( I[3] ** 0.5 + I[4] )\""],"inputs":["[0.9d, -3d]","[0.9d, 0d, 0.9d, -3d]","[-0.3d, 0.9d]","[9d, 1e-7d]","[0d, 0.01d, -3d, 9d, 1e-7d ]"],"expected":["\"(1):[-0.29999]\"","\"(1):[-0.29999]\"","\"(1):[-3.0]\"","\"(1):[3.0]\"","\"(1):[0.00999]\""]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equations \"I[0]*I[1]+(1-I[2])*I[3]\" and \"(1-I[0])*I[1]\" used within ADAM return expected results.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["given : Function f = Function.of(expression)"]},

        {"kind":"expect","text":"","code":["expect : output == f(input)"]},

        {"kind":"where","text":"The following expressions, inputs and expected String results are being used :","code":{"expression":["\"I[0]*I[1]+(1-I[2])*I[3]\"","\"I[0]*I[1]+(1-I[2])*I[3]\"","\"(1-I[0])*I[1]\"","\"(1-I[0])*I[1]\""],"input":["new double[]{0.9, 0.0, 0.9, -3.0}","new double[]{-0.9, 2.0, 0.2, 1.0}","new double[]{0.9, -3.0}","new double[]{-0.9, 2.0}"],"output":["-0.29999999999999993","-1.0","-0.29999999999999993","3.8"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
