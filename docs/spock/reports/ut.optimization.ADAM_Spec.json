{
  "className":"ut.optimization.ADAM_Spec",
  "title":"",
  "narrative":"",
  "subjects":["neureka.optimization.Optimizer"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.110 seconds"
  },
  "headers":["\n                <h2> ADAM Optimizer Behavior </h2>\n                <br> \n                <p>\n                    This specification check the behavior of the ADAM class.        \n                </p>\n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"ADAM optimizes according to expected inputs",
      "result":"PASS",
      "duration":"0.053 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new scalar gradient tensor is being created.","code":["Tsr g = Tsr.of(expectedWeight)"]},

        {"kind":"and","text":"The following input is being applied to the tensor (and internal optimizer)...","code":["w.set( Tsr.of( gradient ) )","w.applyGradient()"]},

        {"kind":"expect","text":"The following state emerges:","code":["w.toString().contains(g.toString())","w.shape.hashCode()==g.shape.hashCode()","w.translation().hashCode()==g.translation().hashCode()","w.indicesMap().hashCode()==g.indicesMap().hashCode()","w.spread().hashCode()==g.spread().hashCode()","w.offset().hashCode()==g.offset().hashCode()"]},

        {"kind":"where","text":"","code":{"gradient":["-3","-3","2","-3","2","2","-4","-3","-3","2"],"expectedWeight":["0.009999999666666677","0.01999","0.02426","0.03034","0.03332","0.03409","0.03738","0.04194","0.04744","0.05112"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equations used by ADAM return expected result.",
      "result":"PASS",
      "duration":"0.020 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create tensors given an equation and array or list of input tensors...","code":["var t1 = Tsr.of( expression, inputs )","var t2 = Tsr.of( expression, inputs as Float[] )","var t3 = Tsr.of( expression, true, inputs.collect( it -> Tsr.of(it) ) )","var t4 = Tsr.of( expression, false, inputs.collect( it -> Tsr.of(it) ) )","var t5 = Tsr.of( expression, false, inputs.collect( it -> Tsr.of(it) ) as Tsr<Double>[] )"]},

        {"kind":"expect","text":"...this produces the expected result String.","code":["t1.toString().contains( expected )","t2.toString().contains( expected.replace(\".29999\", \".30000\") )","t3.toString().contains( expected )","t4.toString().contains( expected )","t5.toString().contains( expected )"]},

        {"kind":"where","text":"The following expressions, inputs and expected String results are being used :","code":{"expression":["( 1 - I[0]) * I[1]","I[0] * I[1] + (1 - I[2]) * I[3]","I[0] / ( 1 - I[1] )","I[0] ** 0.5 + I[1]","I[0] - I[1] * I[2] /( I[3] ** 0.5 + I[4] )"],"inputs":["[0.9, -3.0]","[0.9, 0.0, 0.9, -3.0]","[-0.3, 0.9]","[9.0, 1.0E-7]","[0.0, 0.01, -3.0, 9.0, 1.0E-7]"],"expected":["(1):[-0.29999]","(1):[-0.29999]","(1):[-3.0]","(1):[3.0]","(1):[0.00999]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equations \"I[0]*I[1]+(1-I[2])*I[3]\" and \"(1-I[0])*I[1]\" used within ADAM return expected results.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Function f = Function.of(expression)"]},

        {"kind":"expect","text":"","code":["output == f(input)"]},

        {"kind":"where","text":"The following expressions, inputs and expected String results are being used :","code":{"expression":["I[0]*I[1]+(1-I[2])*I[3]","I[0]*I[1]+(1-I[2])*I[3]","(1-I[0])*I[1]","(1-I[0])*I[1]"],"input":["[0.9, 0.0, 0.9, -3.0]","[-0.9, 2.0, 0.2, 1.0]","[0.9, -3.0]","[-0.9, 2.0]"],"output":["-0.29999999999999993","-1.0","-0.29999999999999993","3.8"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}