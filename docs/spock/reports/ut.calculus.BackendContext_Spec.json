{
  "className":"ut.calculus.BackendContext_Spec",
  "title":"The BackendContext is a cloneable context which can run Tasks.",
  "narrative":"This specification defines the expected behaviour of the backend context\n    which should expose a convenient API to work with.\n    This API should allow for tasks to be running on a given context\n    which is important for testing and modularity not only\n    during library startup but also throughout the runtime.",
  "subjects":["neureka.backend.api.Operation","neureka.backend.api.BackendContext"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.017 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"BackendContext instances can be created by cloning from Singleton instance.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The singleton BackendContext instance and a OperationType mock.","code":["def mockOperation = Mock(Operation)","def context = Neureka.get().backend()"]},

        {"kind":"when","text":"A clone is being created by calling \"clone()\" on the given context...","code":["def clone = context.clone()"]},

        {"kind":"then","text":"The two instances are not the same objects.","code":["clone != context"]},

        {"kind":"and","text":"They contain the same entries.","code":["clone.size()      == context.size()","clone.getOperationLookupMap()    == context.getOperationLookupMap()","clone.getOperations() == context.getOperations()"]},

        {"kind":"when","text":"","code":["1 * mockOperation.getOperator() >> \"\"","1 * mockOperation.getIdentifier() >> \"\""]},

        {"kind":"and","text":"The clone is changes its state.","code":["clone.addOperation( mockOperation )"]},

        {"kind":"then","text":"Their properties will no longer be the same.","code":["clone.size() != context.size()","clone.getOperationLookupMap() != context.getOperationLookupMap()","clone.getOperations() != context.getOperations()"]},

        {"kind":"and","text":"The change will be as expected.","code":["clone.size() == context.size() + 1","clone.getOperationLookupMap().size() == context.getOperationLookupMap().size() + 1","clone.getOperationLookupMap().containsKey(\"\")","clone.getOperations().size() == context.getOperations().size() + 1"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"BackendContext instances return Runner instances for easy visiting.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current thread local BackendContext instance.","code":["def current = Neureka.get().backend()"]},

        {"kind":"and","text":"A clone is being created by calling \"clone()\" on the given context...","code":["def clone = current.clone()"]},

        {"kind":"and","text":"We ger a Runner instance via the following method:","code":["def run = clone.runner()"]},

        {"kind":"and","text":"Also, we create a mocked lambda function as a \"spy\"!","code":["def spy = Mock(Function)"]},

        {"kind":"when","text":"We pass a lambda to the \"useFor\" method to the runner, containing a closure with the spy...","code":["run.run({spy.apply(Neureka.get().backend())})"]},

        {"kind":"then","text":"The spy will tell us that the passed lambda has been executed by the runner in the clone context!","code":["1 * spy.apply(clone)"]},

        {"kind":"and","text":"The context accessible through the static \"get\" method will indeed be the current context!","code":["current == Neureka.get().backend()"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"BackendContext instances return Runner instances for easy visiting with return values.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current thread local BackendContext instance.","code":["def current = Neureka.get().backend()"]},

        {"kind":"and","text":"A clone is being created by calling \"clone()\" on the given context...","code":["def clone = current.clone()"]},

        {"kind":"and","text":"We wrap a Runner instance around a wrapper which will test its methods!","code":["def run = runWrapper( clone.runner() )"]},

        {"kind":"when","text":"Querying the thread local context inside the Runner...","code":["def innerContext = run { Neureka.get().backend() }"]},

        {"kind":"and","text":"...also outside the Runner lambda...","code":["def outerContext = Neureka.get().backend()"]},

        {"kind":"then","text":"These two context instances will be different objects!","code":["innerContext != outerContext"]},

        {"kind":"and","text":"The inner context will in fact be the clone which provided the Runner!","code":["innerContext == clone"]},

        {"kind":"and","text":"The outer context is as expected simply the current context.","code":["outerContext == current"]},

        {"kind":"where","text":"The following conceptually identical Runner methods can be used:","code":{"runWrapper":["ut.calculus.BackendContext_Spec$__spock_feature_0_2prov0_closure3@2cdf91e5","ut.calculus.BackendContext_Spec$__spock_feature_0_2prov0_closure4@44bf561a","ut.calculus.BackendContext_Spec$__spock_feature_0_2prov0_closure5@dae6dd0"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}