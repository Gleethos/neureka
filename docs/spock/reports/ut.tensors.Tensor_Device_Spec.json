{
  "className":"ut.tensors.Tensor_Device_Spec",
  "title":"Tensors on Devices",
  "narrative":"This unit test specification covers \n    the expected behavior of tensors when interacting\n    with instances of implementations of the Device interface.",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.009 seconds"
  },
  "headers":["\n            Here you will find out how to store tensors on devices,\n            how to move tensors between devices and how to use\n            the device specific methods of the tensor class.\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Adding OpenCL device to tensor makes tensor be \"outsourced\" and contain the Device instance as component.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get a device instance representing the GPU.","code":["Device gpu = Device.get(\"gpu\")"]},

        {"kind":"and","text":"We create a simple tensor.","code":["Tsr t = Tsr.of([3, 4, 1], 3f)"]},

        {"kind":"expect","text":"The following is to be expected with respect to the given :","code":["!t.has(Device.class)","!t.isOutsourced()","!gpu.has(t)"]},

        {"kind":"when","text":"The tensor is being added to the OpenCL device...","code":["t.to(gpu)"]},

        {"kind":"then","text":"The now \"outsourced\" tensor has a reference to the device and vice versa!","code":["t.has(Device.class)","t.isOutsourced()","gpu.has(t)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors try to migrate themselves to a device that is being added to them as component.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A mock device and a simple tensor instance.","code":["def device = Mock(Device)","var t = Tsr.of(2d)","device.has(t) >>> [false, true, true]"]},

        {"kind":"when","text":"The mock device is being added to the tensor...","code":["t.to(device)"]},

        {"kind":"then","text":"...the tensor should not try to add itself to the given device via the \"store\" method.","code":["0 * device.store(t)"]},

        {"kind":"and","text":"Instead it should use the \"update\" method, which is a formal callback from the internal component system...","code":["1 * device.update({ it.type().name() == \"ADDED\" }) >> true"]},

        {"kind":"and","text":"It stores the device as a component.","code":["t.has(Device.class)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The device of a tensor can be accessed via the \"device()\" method.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple tensor having a device as component","code":["def device = Mock(Device)","device.has(_) >>> [false, true, true]","var t = Tsr.of(1d)"]},

        {"kind":"when","text":"","code":["t.to(device)"]},

        {"kind":"then","text":"","code":["1 * device.update({","    Component.OwnerChangeRequest request -> request.executeChange()","})"]},

        {"kind":"when","text":"The device is being accessed via the \"device()\" method...","code":["Device found = t.get(Device.class)"]},

        {"kind":"then","text":"This found device should be the one that was set originally.","code":["found == device"]},

        {"kind":"and","text":"","code":["found == t.getDevice()"]},

        {"kind":"and","text":"","code":["t.isOutsourced()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"When creating slices of tensors then this should trigger a \"parent - child\" relation noticeable to the device!",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor having a device as component","code":["def device = Mock(Device)","var t = Tsr.of([3, 3],[1, 2, 3, 4, 5, 6, 7, 8, 9])","device.has(t) >>> [false, true]"]},

        {"kind":"when","text":"A slice is being created from the given tensor...","code":["var s = t[1..2, 0..2]"]},

        {"kind":"and","text":"The \"parent tensor\" is being migrated to the device...","code":["t.to(device)"]},

        {"kind":"then","text":"...this tensor should not try to add itself to the given device via the \"store\" method.","code":["0 * device.store(t)"]},

        {"kind":"and","text":"Instead the \"update\" method should be called...","code":["1 * device.update(_)"]},

        {"kind":"and","text":"Internally the Tsr may \"asks\" if it belongs to the Device. (before and after migration attempt)","code":["(0.._) * device.has(t)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}