{
  "className":"ut.tensors.Tensor_Instantiation_Spec",
  "title":"Instantiating Tensors",
  "narrative":"Tensors are complicated data structures with a wide range of different possible states.\n    They can host elements of different types residing on many kinds of different devices.\n    Here we want to show how a tensor can be instantiated in different ways.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.029 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Vector tensors can be instantiated via factory methods.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a vector tensor using the \"of\" factory method.","code":["Tsr<?> t = Tsr.of(data)"]},

        {"kind":"expect","text":"The resulting tensor has the expected item type class.","code":["t.itemType == type"]},

        {"kind":"and","text":"Also the expected shape.","code":["t.shape() == shape"]},

        {"kind":"and","text":"The tensor has the expected data array.","code":["t.unsafe.data.ref == data","t.data == data"]},

        {"kind":"and","text":"The tensor is not virtual nor is it a slice... so the item array and data array contain the same values.","code":["t.items == data"]},

        {"kind":"where","text":"","code":{"data":["[1.1, 2.2, 3.3]","[-0.21, 543.3]","[true, false]","[1, 2, 99, -123]","[3, 8, 4, 2, 3, 0]","[66, 1, 4, 42, -40]"],"type":["class java.lang.Double","class java.lang.Float","class java.lang.Boolean","class java.lang.Short","class java.lang.Long","class java.lang.Integer"],"shape":["[3]","[2]","[2]","[4]","[6]","[5]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Scalar tensors can be created via static factory methods",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We make sure that the data is of the right type (based on the data table):","code":["data = data.asType(type)"]},

        {"kind":"and","text":"We create a scalar tensor using the \"of\" factory method.","code":["Tsr<?> t = Tsr.of(data)"]},

        {"kind":"expect","text":"The resulting tensor has the expected item type class.","code":["t.itemType == type"]},

        {"kind":"and","text":"Also the expected shape.","code":["t.shape() == [ 1 ]"]},

        {"kind":"and","text":"The tensor has the expected data array.","code":["t.unsafe.data.ref == [data]","t.data == [data]"]},

        {"kind":"and","text":"The tensor is not virtual nor is it a slice... so the item array and data array contain the same values.","code":["t.items == [data]"]},

        {"kind":"where","text":"","code":{"data":["1.1","-0.21","0.1","-42.9","true","false","99","-123","3","8","1","2","-12","3"],"type":["class java.lang.Double","class java.lang.Double","class java.lang.Float","class java.lang.Float","class java.lang.Boolean","class java.lang.Boolean","class java.lang.Integer","class java.lang.Integer","class java.lang.Long","class java.lang.Long","class java.lang.Short","class java.lang.Short","class java.lang.Byte","class java.lang.Byte"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors can be instantiated based on lists for both shapes and values.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Integer> t = Tsr.of([2, 2], [2, 4, 4])"]},

        {"kind":"expect","text":"","code":["t.toString() == \"(2x2):[2.0, 4.0, 4.0, 2.0]\""]},

        {"kind":"when","text":"","code":["t = Tsr.of([2], [3, 5, 7])"]},

        {"kind":"then","text":"","code":["t.toString() == \"(2):[3.0, 5.0]\"","t.getItemsAs( double[].class ).length == 2"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors can be instantiated based on arrays for both shapes and values.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Double> t = Tsr.of(new int[]{2, 2}, new double[]{2, 4, 4})"]},

        {"kind":"expect","text":"","code":["t.toString() == \"(2x2):[2.0, 4.0, 4.0, 2.0]\""]},

        {"kind":"when","text":"","code":["t = Tsr.of(new int[]{2}, new double[]{3, 5, 7})"]},

        {"kind":"then","text":"","code":["t.toString() == \"(2):[3.0, 5.0]\"","t.getItemsAs( double[].class ).length == 2"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors can be instantiated with String seed.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Three seeded 2D tensors are being instantiated.","code":["Tsr<Double> t1 = Tsr.of([2, 3], \"I am a seed! :)\")","Tsr<Double> t2 = Tsr.of([2, 3], \"I am a seed! :)\")","Tsr<Double> t3 = Tsr.of([2, 3], \"I am also a seed! But different. :)\")"]},

        {"kind":"expect","text":"Equal seeds produce equal values.","code":["t1.toString() == t2.toString()","t1.toString() != t3.toString()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Passing String seed to tensor produces expected values.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["Tsr r = Tsr.of([2, 2], \"jnrejn\")"]},

        {"kind":"then","text":"","code":["r.toString().contains(\"0.02847, -0.69068, 0.15386, 1.81382\")"]},

        {"kind":"when","text":"","code":["r = Tsr.of([2, 2], \"jnrejn2\")"]},

        {"kind":"then","text":"","code":["!r.toString().contains(\"0.02600, -2.06129, -0.48373, 0.94884\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}