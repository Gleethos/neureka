{
  "className":"ut.autograd.internal.GraphNode_Instantiation_Unit_Tests",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"1",
    "successRate":"0.0%",
    "failures":"1",
    "errors":"0",
    "skipped":"0",
    "duration":"1.523 seconds"
  },
  "headers":["\n            <h2> GraphNode Instantiation </h2>\n            <p>\n                Specified below are strict tests covering the behavior\n                of the GraphNode class during instantiation.\n            </p>\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"GraphNode instantiation works as expected when the context argument is an ExecutionCall.",
      "result":"FAIL",
      "duration":"1.515 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mocked arguments used to call the GraphNode constructor.","code":["Tsr payload = Mock( Tsr )","Tsr[] inputs = new Tsr[]{ Mock(Tsr), Mock(Tsr), Mock(Tsr) }","Supplier<Tsr> supplier = () -> Result.of(payload)","AbstractOperation type = Mock( AbstractOperation )","Function function = Mock( Function )","Object call = Mock( ExecutionCall )","Device device = Mock( Device )","def inputsNodeMock = Mock( GraphNode )","GraphNode result"]},

        {"kind":"when","text":"We try to instantiate a GraphNode...","code":["result = new GraphNode( function, call, supplier )"]},

        {"kind":"then","text":"The resulting GraphNode has expected properties.","code":["result.getNodeID() != 0","result.type() == \"BRANCH\"","result.getLock() != null","result.function != null","result.hasDerivatives() == false","result.usesAD()","result.size() == 0","result.usesReverseAD()"]},

        {"kind":"and","text":"The mock objects have been called as expected.","code":["(3.._) * call.inputs() >> inputs","(1.._) * function.isDoingAD() >> true","(1.._) * payload.getDevice() >> device","(1.._) * payload.set( _ )","(1.._) * payload.getNDConf() >> Mock(NDConfiguration)","(1.._) * device.access( _ ) >> Mock( Device.Access )","(4.._) * inputs[0].getGraphNode() >> inputsNodeMock","(3.._) * inputs[1].getGraphNode() >> inputsNodeMock","(3.._) * inputs[2].getGraphNode() >> inputsNodeMock","(1.._) * inputsNodeMock.getMode() >> -2","(1.._) * inputs[0].rqsGradient() >> true","(1.._) * inputs[1].rqsGradient() >> false","(1.._) * inputs[2].rqsGradient() >> true","(1.._) * call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD","(3.._) * function.getOperation() >> type","(0.._) * type.isDifferentiable() >> true","(3.._) * type.isInline() >> false","(0.._) * type.getOperator() >> \"*\"","(0.._) * inputsNodeMock.getPayload() >> payload","(0.._) * payload.hashCode() >> 3"]}
      ],
      "problems":{"dataValues":["[]"], "errors":["[Too few invocations for:\n\n(4.._) * inputs[0].getGraphNode() >> inputsNodeMock   (3 invocations)\n\nUnmatched invocations (ordered by similarity):\n\n1 * payload.isUndefined()\ninstance == target\n|        |  |\n|        |  Mock for type 'Tsr'\n|        false\n|        16 differences (54% similarity)\n|        Mock for type 'Tsr'( named 'payload')\n|        Mock for type 'Tsr'(----------------)\nMock for type 'Tsr' named 'payload'\n\nmethodName == \"getGraphNode\"\n|          |\n|          false\n|          11 differences (8% similarity)\n|          (isUndefine)d(-)\n|          (getGraphNo)d(e)\nisUndefined\n\n1 * payload.getVersion()\ninstance == target\n|        |  |\n|        |  Mock for type 'Tsr'\n|        false\n|        16 differences (54% similarity)\n|        Mock for type 'Tsr'( named 'payload')\n|        Mock for type 'Tsr'(----------------)\nMock for type 'Tsr' named 'payload'\n\nmethodName == \"getGraphNode\"\n|          |\ngetVersion false\n           8 differences (33% similarity)\n           get(Ve)r(si--)o(n-)\n           get(G-)r(aphN)o(de)\n\n1 * function.hashCode()\ninstance == target\n|        |  |\n|        |  Mock for type 'Tsr'\n|        false\n|        25 differences (39% similarity)\n|        Mock for type '(Function)'( named 'function')\n|        Mock for type '(Tsr-----)'(-----------------)\nMock for type 'Function' named 'function'\n\nmethodName == \"getGraphNode\"\n|          |\nhashCode   false\n           7 differences (41% similarity)\n           (h----)a(s)h(C)ode\n           (getGr)a(p)h(N)ode\n\n1 * payload.getDataType()\ninstance == target\n|        |  |\n|        |  Mock for type 'Tsr'\n|        false\n|        16 differences (54% similarity)\n|        Mock for type 'Tsr'( named 'payload')\n|        Mock for type 'Tsr'(----------------)\nMock for type 'Tsr' named 'payload'\n\nmethodName == \"getGraphNode\"\n|          |\n|          false\n|          7 differences (41% similarity)\n|          get(D-)a(taTyp)e\n|          get(Gr)a(phNod)e\ngetDataType\n\n1 * <NDConfiguration>.shape()\ninstance == target\n|        |  |\n|        |  Mock for type 'Tsr'\n|        false\n|        14 differences (54% similarity)\n|        Mock for type '(NDConfigu)r(ation)'\n|        Mock for type '(Ts-------)r(-----)'\nMock for type 'NDConfiguration'\n\nmethodName == \"getGraphNode\"\n|          |\nshape      false\n           9 differences (25% similarity)\n           (sh---)ap(----)e\n           (getGr)ap(hNod)e\n\n3 * inputsNodeMock.hashCode()\n1 * function.isFlat()\n1 * <Access>.cleanup(<neureka.autograd.NodePayload$$Lambda$881/0x000000080049a440@263657d0 arg$1=neureka.autograd.NodePayload@23785366 arg$2=neureka.autograd.GraphNode$$Lambda$880/0x000000080049a040@4543581>)\n\n]"]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}