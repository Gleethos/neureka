{
  "className":"ut.tensors.Copy_Spec",
  "title":"To Copy or Not to Copy",
  "narrative":"In this specification we cover the behaviour of tensors with respect to their copy methods.\n    There are to main ways to copy a tensor: <br>\n    1. .shallowCopy() <br>\n    2. .deepCopy() <br>\n    <br>\n    The first method creates a new tensor with the same underlying data array as the original tensor. <br>\n    The second method on the other hand creates a new tensor with a new data array. <br>\n    <br>\n    The first method is the most efficient, but it is not as safe as the second method. <br>\n    The second method is the most safe, but it is not as efficient. <br>\n    <br>\n    Besides these 2 main requirements, there are als some corner cases with respect to\n    the components of a tensor (like for example its computation graph) which\n    will be covered in this specification as well.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.079 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A deep copy of a tensor is also a deep copy of the underlying data array.",
      "result":"PASS",
      "duration":"0.008 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A tensor of ints with shape (2, 3).","code":["var t = Tsr.ofInts().withShape(2, 3).andFill(1, 2, -9, 8, 3, -2)"]},

        {"kind":"expect","text":"The underlying data array is as expected.","code":["t.unsafe.data == [1, 2 ,-9, 8, 3, -2]"]},

        {"kind":"when","text":"We create a deep copy of the tensor.","code":["var deep = t.deepCopy()"]},

        {"kind":"then","text":"The copy is not the same instance as the original tensor.","code":["deep !== t"]},

        {"kind":"and","text":"The shape and underlying data array are equal to the original tensor but the data is not identical.","code":["deep.shape == t.shape","deep.unsafe.data == t.unsafe.data","deep.unsafe.data !== t.unsafe.data"]},

        {"kind":"and","text":"","code":["(0..<t.size).every({ int i -> deep.at(i) == t.at(i) })"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A deep copy of a slice tensor is also a deep copy of the underlying data array.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A slice of ints with shape (2, 2) sliced in-place from a tensor of shape (3, 3).","code":["var s = Tsr.ofInts().withShape(3, 3).andFill(1, 2, -9, 8, 3, -2)[0..1, 1..2]"]},

        {"kind":"expect","text":"The underlying items and data array is as expected.","code":["s.items == [2, -9, 3, -2]","s.data == [1, 2, -9, 8, 3, -2, 1, 2, -9]","s.unsafe.data == [1, 2, -9, 8, 3, -2, 1, 2, -9]"]},

        {"kind":"when","text":"We create a deep copy of the tensor.","code":["var deep = s.deepCopy()"]},

        {"kind":"then","text":"The copy is not the same instance as the original tensor.","code":["deep !== s"]},

        {"kind":"and","text":"The underlying items and data array are as expected.","code":["deep.items == [2, -9, 3, -2]","deep.data == [2, -9, 3, -2]","deep.unsafe.data == [2, -9, 3, -2]"]},

        {"kind":"and","text":"The slice and the copy have the same shape.","code":["deep.shape == s.shape","deep.items == s.items","deep.items !== s.items","deep.unsafe.data !== s.unsafe.data","deep.unsafe.data !== s.unsafe.data"]},

        {"kind":"and","text":"We verify that they share the same ints through the \"every\" method.","code":["(0..<s.size).every({ int i -> deep.at(i) == s.at(i) })"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A shallow copy will share the same underlying data as its original tensor.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A tensor of ints with shape (2, 3).","code":["var t = Tsr.ofInts().withShape(2, 3).andFill(1, 2, -9, 8, 3, -2)"]},

        {"kind":"expect","text":"The underlying data array is as expected.","code":["t.unsafe.data == [1, 2 ,-9, 8, 3, -2]"]},

        {"kind":"when","text":"We create a shallow copy of the tensor.","code":["var shallow = cloner(t)"]},

        {"kind":"then","text":"The copy is not the same instance as the original tensor.","code":["shallow !== t","shallow.shape == t.shape","shallow.unsafe.data == t.unsafe.data","shallow.unsafe.data === t.unsafe.data"]},

        {"kind":"and","text":"We verify that they share the same ints through the \"every\" method.","code":["(0..<t.size).every({ int i -> shallow.at(i) == t.at(i) })"]},

        {"kind":"where","text":"","code":{"cloner":["ut.tensors.Copy_Spec$__spock_feature_0_2prov0_closure4@2fde8146","ut.tensors.Copy_Spec$__spock_feature_0_2prov0_closure5@53fe59f3"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can deep copy various types of tensors.",
      "result":"PASS",
      "duration":"0.032 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple vector tensor which we are going to copy.","code":["var t = Tsr.of(type).withShape(expected.length).andFill(expected)"]},

        {"kind":"and","text":"A slice of the tensor, which we should also be able to deep copy.","code":["var s = t[1..<(expected.length - 1)]"]},

        {"kind":"when","text":"","code":["var deep = t.deepCopy()","var deepSlice = s.deepCopy()"]},

        {"kind":"then","text":"The copy is not the same instance as the original tensor.","code":["deep !== t","deepSlice !== s"]},

        {"kind":"and","text":"The shape and underlying data array are equal to the original tensor but the data is not identical.","code":["deep.shape == t.shape","deep.unsafe.data == t.unsafe.data","deep.unsafe.data !== t.unsafe.data"]},

        {"kind":"and","text":"Both the copied tensor and its slice have the expected values.","code":["deep.items == expected","deepSlice.items == expected[1..<(expected.length - 1)]"]},

        {"kind":"where","text":"We can use the following types and values for the above code.","code":{"type":["class java.lang.Integer","class java.lang.Byte","class java.lang.Short","class java.lang.Long","class java.lang.Float","class java.lang.Double","class java.lang.Boolean","class java.lang.Character","class java.lang.String","class java.lang.Object"],"expected":["[6, 2, 0, -387, 22, 53, -92]","[-1, 4, 2, -49, 2, -72, -21, 0, 3]","[65, -20, -7, -8, -3, -4, -5, -6, -9]","[0, 5462, -976, -3, -42, -35, -3436, -7, -89]","[0.5076, -1.0, -2.4, -3.0, -4.0, -5.0, -6.0]","[4.26434, -4.0, 5.3, -6.6, -7.0, 9.67]","[true, false, true, false, true, false, true, false, true]","testdata!","[test, data, !]","[What, 4, m, 1]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}