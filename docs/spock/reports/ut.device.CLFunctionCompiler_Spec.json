{
  "className":"ut.device.CLFunctionCompiler_Spec",
  "title":"OpenCLDevice Function Optimization Integration Tests",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"1",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.063 seconds"
  },
  "headers":["\n            Specified below are strict tests for covering the ability of \n            OpenCL devices to be able produce optimized functions given\n            a normal function instance created from a String...\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The OpenCLDevice produces a working optimized Function (internally using the CLFunctionCompiler).",
      "result":"PASS",
      "duration":"0.059 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We get the first available OpenCLDevice we can find in the CLContext!","code":["def device = Neureka.get().backend().get(CLContext.class).platforms[0].devices[0]"]},

        {"kind":"and","text":"Three scalar test tensors which will be used as inputs to the optimized function.","code":["Tsr<Double> t1 = Tsr.of(-2).to(device)","Tsr<Double> t2 = Tsr.of(5).to(device)","Tsr<Double> t3 = Tsr.of(2).to(device)"]},

        {"kind":"and","text":"A test function which will be the optimization target for this test.","code":["def funToBeOptimized = Function.of(\"i2 + (i0 / i1)\")"]},

        {"kind":"when","text":"We instruct the device to produce an optimized Function based on the provided test function...","code":["Function optimized = device.optimizedFunctionOf(funToBeOptimized, \"my_test_fun\")"]},

        {"kind":"then","text":"Initially we expect that the device does not contain the \"ad hoc\" kernel with the following signature...","code":["!device.hasAdHocKernel(\"my_test_fun_F32\\$1_F32\\$1_F32\\$1_F32\\$1\")"]},

        {"kind":"when","text":"We test the optimized function by calling it with three arguments...","code":["Tsr result = optimized( t1, t2, t3 )"]},

        {"kind":"then","text":"...the result should look as follows:","code":["result.toString() == \"(1):[1.6]\""]},

        {"kind":"and","text":"We expect that the device has an underlying kernel with the following name:","code":["device.hasAdHocKernel(\"my_test_fun_F32\\$1_F32\\$1_F32\\$1_F32\\$1\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}