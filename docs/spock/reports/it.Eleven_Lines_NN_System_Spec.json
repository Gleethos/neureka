{
  "className":"it.Eleven_Lines_NN_System_Spec",
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"2.204 seconds"
  },

  "title":"NN Code Golfing!",
  "narrative":"This system test specification uses the following Numpy\u000a code as reference implementation for the equivalent in Neureka\u000a or similar implementations and variations.\u000a The code below is a simple neural network in only 11 lines of code.\u000a\u000a ´´´\u000a X = np.array([ [0,0,1],[0,1,1],[1,0,1],[1,1,1] ])\u000a y = np.array([[0,1,1,0]]).T\u000a W1 = 2*np.random.random((3,4)) - 1\u000a W2 = 2*np.random.random((4,1)) - 1\u000a for j in xrange(60000):\u000a l1 = 1/(1+np.exp(-(np.dot(X,W1))))\u000a l2 = 1/(1+np.exp(-(np.dot(l1,W2))))\u000a l2_delta = (y - l2)*(l2*(1-l2))\u000a l1_delta = l2_delta.dot(W2.T) * (l1 * (1-l1))\u000a W2 += l1.T.dot(l2_delta)\u000a W1 += X.T.dot(l1_delta)\u000a ´´´",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"One can write a simple neural network with custom back-prop in 11 lines of code!",
      "result":"PASS",
      "duration":"1.123 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var X = Tsr.of(Double, [[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])","var y = Tsr.of(Double, [[0, 1, 1, 0]]).T","var W1 = Tsr.ofRandom(Double, 3, 4)","var W2 = Tsr.ofRandom(Double, 4, 1)","60.times {","    var l1 = Tsr.of('sig(', X.matMul(W1), ')')","    var l2 = Tsr.of('sig(', l1.matMul(W2), ')')","    var l2_delta = (y - l2) * (l2 * (-l2 + 1))","    var l1_delta = l2_delta.matMul(W2.T) * (l1 * (-l1 + 1))","    W2 += l1.T.matMul(l2_delta)","    W1 += X.T.matMul(l1_delta)","}"]},

        {"kind":"expect","text":"","code":["W1.unsafe.data == RESULT_W1","W2.unsafe.data == RESULT_W2"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"One can write a simple neural network in less than 11 lines of code!",
      "result":"PASS",
      "duration":"0.426 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var X = Tsr.of(Double, [[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])","var y = Tsr.of(Double, [[0, 1, 1, 0]]).T","var W1 = Tsr.ofRandom(Double, 3, 4).setRqsGradient(true)","var W2 = Tsr.ofRandom(Double, 4, 1).setRqsGradient(true)","60.times {","    var l2 = Tsr.of('sig(',Tsr.of('sig(',X.matMul(W1),')').matMul(W2),')')","    l2.backward(y - l2)","    W1.applyGradient(); W2.applyGradient()","}"]},

        {"kind":"expect","text":"","code":["W1.unsafe.data == RESULT_W1","W2.unsafe.data == RESULT_W2"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"One can write a simple float based neural network in less than 11 lines of java like code!",
      "result":"PASS",
      "duration":"0.381 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var X = Tsr.ofFloats().withShape(4,3).andFill(0f, 0f, 1f,  0f, 1f, 1f,  1f, 0f, 1f,  1f, 1f, 1f)","var y = Tsr.ofFloats().withShape(1,4).andFill(0f, 1f, 1f, 0f).T()","var W1 = Tsr.ofRandom(Float.class, 3,4).setRqsGradient(true)","var W2 = Tsr.ofRandom(Float.class, 4,1).setRqsGradient(true)","for ( int i = 0; i < 60; i++ ) {","    Tsr<Float> l2 = Tsr.of('sig(',Tsr.of('sig(',X.matMul(W1),')').matMul(W2),')');","    l2.backward(y.minus(l2));","    W1.applyGradient(); W2.applyGradient();","}"]},

        {"kind":"expect","text":"","code":["W1.unsafe.data == RESULT_W1_F32 as float[]","W2.unsafe.data == RESULT_W2_F32 as float[]"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"One can write a simple double based neural network in less than 11 lines of java like code using the \"@\" operator!",
      "result":"PASS",
      "duration":"0.192 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var X  = Tsr.ofDoubles().withShape(4,3).andFill(0d, 0d, 1d, 0d, 1d, 1d, 1d, 0d, 1d, 1d, 1d, 1d)","var y  = Tsr.ofDoubles().withShape(1,4).andFill(0d, 1d, 1d, 0d).T()","var W1 = Tsr.ofRandom(Double.class, 3, 4).setRqsGradient(true)","var W2 = Tsr.ofRandom(Double.class, 4, 1).setRqsGradient(true)","for ( int i = 0; i < 60; i++ ) {","    var l2 = Tsr.of(\"sig(\",Tsr.of(\"sig(\",X,'@' as char,W1,\")\"),\"@\",W2,\")\");","    l2.backward(Tsr.of(y,\"-\",l2)); // Back-propagating the error!","    W1.applyGradient(); W2.applyGradient();","}"]},

        {"kind":"expect","text":"","code":["W1.unsafe.data == RESULT_W1","W2.unsafe.data == RESULT_W2"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The pseudo random number generator works as expected for the weights used in the 11 line NN examples!",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var W1 = Tsr.ofRandom(Double, 3, 4)","var W2 = Tsr.ofRandom(Double, 4, 1)"]},

        {"kind":"expect","text":"","code":["W1.unsafe.data == [-0.910969595136708, -1.9627469837128895, -0.048245881734580415, -0.3554745831321771, -0.6595188311162824, 1.839723209668042, -0.7864999508162774, -1.918339420402628, 1.4035229760225527, 2.245738695936844, -0.7473176166694635, 1.9016692137691462]","W2.unsafe.data == [-0.1611330910958405, -0.9350019667613545, -0.3780200880067806, 1.4951759768158595]"]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}