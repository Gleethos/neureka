{
  "className":"ut.device.FileDevice_Spec",
  "title":"FileDevice, Storing Tensors in Files",
  "narrative":"The FileDevice class, one of many implementations of the Device interface, \n    represents a file directory which should be able to store and load tensors as files (idx, jpg, png...).",
  "subjects":["neureka.devices.file.FileDevice","neureka.devices.Device"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.084 seconds"
  },
  "headers":["\n                    This specification covers the behavior of the \"FileDevice\"\n                    class, which enables the persistence of tensor data.      \n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A file device stores tensors in idx files by default.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor is being created for testing.","code":["Tsr a = Tsr.of([2, 4], [ 5, 4, -7, 3, -2, 6, -4, 3 ])"]},

        {"kind":"and","text":"A file device instance is being accessed for a given path.","code":["def device = FileDevice.at( path )"]},

        {"kind":"expect","text":"Initially the device does not store our newly created tensor.","code":["!device.contains(a)"]},

        {"kind":"when","text":"Tensor \"a\" is being stored in the device...","code":["device.store( a, filename )"]},

        {"kind":"then","text":"The expected file is being created at the given path.","code":["new File( path + '/' + filename + '.idx' ).exists()"]},

        {"kind":"and","text":"Tensor \"a\" does no longer have a value (stored in RAM).","code":["a.unsafe.data == null"]},

        {"kind":"when","text":"Freeing the tensor...","code":["device.free( a )"]},

        {"kind":"then","text":"The file will have been deleted!","code":["!new File( path + '/' + filename + '.idx' ).exists()"]},

        {"kind":"where","text":"The following parameters have been used:","code":{"path":["build/test-can"],"filename":["tensor_2x4_"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A file device stores tensors in various file formats.",
      "result":"PASS",
      "duration":"0.048 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor is being created for testing.","code":["Tsr a = Tsr.of( shape, -8d..8d )"]},

        {"kind":"and","text":"A String representation of the shape.","code":["def shapeStr = String.join('x',(shape as List<Integer>).collect {String.valueOf(it)})"]},

        {"kind":"and","text":"A file device instance is being accessed for a given path.","code":["def device = FileDevice.at( path )"]},

        {"kind":"expect","text":"Initially the device does not store our newly created tensor.","code":["!device.contains(a)"]},

        {"kind":"when","text":"Tensor \"a\" is being stored in the device...","code":["if ( filename != null ) device.store( a, filename ) else device.store( a )"]},

        {"kind":"then","text":"The expected file is being created at the given path.","code":["new File( path + '/' + filename ).exists()","        ||","new File( path ).listFiles().any {","    it.name.startsWith('tensor_' + shapeStr + '_f64_') && it.name.endsWith('.idx')","}"]},

        {"kind":"and","text":"Tensor \"a\" does no longer have a value (stored in RAM).","code":["a.unsafe.data == null"]},

        {"kind":"and","text":"The tensor is now of the expected data-type.","code":["a.dataType == DataType.of( dataTypeClass )"]},

        {"kind":"and","text":"The device contains a \"FileHandle\" instances of the expected type.","code":["device.fileHandleOf( a ).class == fileHandleClass"]},

        {"kind":"when","text":"Freeing the tensor...","code":["device.free( a )"]},

        {"kind":"then","text":"The file will be deleted!","code":["!new File( path + '/' + filename ).exists()","!new File( path ).listFiles().any {it.name.startsWith('tensor_' + shapeStr + '_f64_') }"]},

        {"kind":"where","text":"The following parameters are being used:","code":{"path":["build/test-can","build/test-can","build/test-can","build/test-can","build/test-can"],"filename":["tensor_2x4x3_.idx","tensor_2x4x3_.jpg","tensor_5x3x4_.png","null","tensor_4x3_.csv"],"shape":["[2, 4, 3]","[2, 4, 3]","[5, 3, 4]","[2, 4, 3]","[4, 3]"],"fileHandleClass":["class neureka.devices.file.handles.IDXHandle","class neureka.devices.file.handles.JPEGHandle","class neureka.devices.file.handles.PNGHandle","class neureka.devices.file.handles.IDXHandle","class neureka.devices.file.handles.CSVHandle"],"dataTypeClass":["class neureka.dtype.custom.F64","class neureka.dtype.custom.I16","class neureka.dtype.custom.I16","class neureka.dtype.custom.F64","class java.lang.String"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The file device can load known files in a directory.",
      "result":"PASS",
      "duration":"0.010 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def device = FileDevice.at( 'build/resources/test/csv' )"]},

        {"kind":"expect","text":"","code":["device.loadable.toSet() == ['biostats-without-head.csv', 'biostats.csv'].toSet()","device.loaded == []"]},

        {"kind":"when","text":"","code":["def t = device.load('biostats-without-head.csv')"]},

        {"kind":"then","text":"","code":["device.loadable == ['biostats.csv']","device.loaded == ['biostats-without-head.csv']","t.toString({ NDPrintSettings it ->","            it.setHasSlimNumbers(false)","              .setIsScientific(true)","              .setIsCellBound(false)","              .setIsMultiline(true)","              .setCellSize(15)","        }",") == '(18x5):[\\n' +","                          '   (        a       )(       b       )(       c       )(       d       )(       e        ):( biostats-without-head )\\n' +","                          '   [      \"Alex\"    ,           \"M\"  ,         41     ,           74   ,          170    ]:( 0 ),\\n' +","                          '   [      \"Bert\"    ,           \"M\"  ,         42     ,           68   ,          166    ]:( 1 ),\\n' +","                          '   [      \"Carl\"    ,           \"M\"  ,         32     ,           70   ,          155    ]:( 2 ),\\n' +","                          '   [      \"Dave\"    ,           \"M\"  ,         39     ,           72   ,          167    ]:( 3 ),\\n' +","                          '   [      \"Elly\"    ,           \"F\"  ,         30     ,           66   ,          124    ]:( 4 ),\\n' +","                          '   [      \"Fran\"    ,           \"F\"  ,         33     ,           66   ,          115    ]:( 5 ),\\n' +","                          '   [      \"Gwen\"    ,           \"F\"  ,         26     ,           64   ,          121    ]:( 6 ),\\n' +","                          '   [      \"Hank\"    ,           \"M\"  ,         30     ,           71   ,          158    ]:( 7 ),\\n' +","                          '   [      \"Ivan\"    ,           \"M\"  ,         53     ,           72   ,          175    ]:( 8 ),\\n' +","                          '   [      \"Jake\"    ,           \"M\"  ,         32     ,           69   ,          143    ]:( 9 ),\\n' +","                          '   [      \"Kate\"    ,           \"F\"  ,         47     ,           69   ,          139    ]:( 10 ),\\n' +","                          '   [      \"Luke\"    ,           \"M\"  ,         34     ,           72   ,          163    ]:( 11 ),\\n' +","                          '   [      \"Myra\"    ,           \"F\"  ,         23     ,           62   ,           98    ]:( 12 ),\\n' +","                          '   [      \"Neil\"    ,           \"M\"  ,         36     ,           75   ,          160    ]:( 13 ),\\n' +","                          '   [      \"Omar\"    ,           \"M\"  ,         38     ,           70   ,          145    ]:( 14 ),\\n' +","                          '   [      \"Page\"    ,           \"F\"  ,         31     ,           67   ,          135    ]:( 15 ),\\n' +","                          '   [      \"Quin\"    ,           \"M\"  ,         29     ,           71   ,          176    ]:( 16 ),\\n' +","                          '   [      \"Ruth\"    ,           \"F\"  ,         28     ,           65   ,          131    ]:( 17 )\\n' +","                          ']'"]},

        {"kind":"when","text":"","code":["t = device.load('biostats.csv', [firstRowIsLabels:true])"]},

        {"kind":"then","text":"","code":["device.loadable == []","device.loaded == ['biostats-without-head.csv', 'biostats.csv']","t.toString({ NDPrintSettings it ->","    it.setHasSlimNumbers(false)","            .setIsScientific(true)","            .setIsCellBound(false)","            .setIsMultiline(true)","            .setCellSize(15)","}) == '(18x5):[\\n' +","'   (      \"Name\"    )(        \"Sex\"  )(      \"Age\"    )(  \"Height (in)\")( \"Weight (lbs)\" ):( biostats )\\n' +","'   [      \"Alex\"    ,           \"M\"  ,         41     ,           74   ,          170    ]:( 0 ),\\n' +","'   [      \"Bert\"    ,           \"M\"  ,         42     ,           68   ,          166    ]:( 1 ),\\n' +","'   [      \"Carl\"    ,           \"M\"  ,         32     ,           70   ,          155    ]:( 2 ),\\n' +","'   [      \"Dave\"    ,           \"M\"  ,         39     ,           72   ,          167    ]:( 3 ),\\n' +","'   [      \"Elly\"    ,           \"F\"  ,         30     ,           66   ,          124    ]:( 4 ),\\n' +","'   [      \"Fran\"    ,           \"F\"  ,         33     ,           66   ,          115    ]:( 5 ),\\n' +","'   [      \"Gwen\"    ,           \"F\"  ,         26     ,           64   ,          121    ]:( 6 ),\\n' +","'   [      \"Hank\"    ,           \"M\"  ,         30     ,           71   ,          158    ]:( 7 ),\\n' +","'   [      \"Ivan\"    ,           \"M\"  ,         53     ,           72   ,          175    ]:( 8 ),\\n' +","'   [      \"Jake\"    ,           \"M\"  ,         32     ,           69   ,          143    ]:( 9 ),\\n' +","'   [      \"Kate\"    ,           \"F\"  ,         47     ,           69   ,          139    ]:( 10 ),\\n' +","'   [      \"Luke\"    ,           \"M\"  ,         34     ,           72   ,          163    ]:( 11 ),\\n' +","'   [      \"Myra\"    ,           \"F\"  ,         23     ,           62   ,           98    ]:( 12 ),\\n' +","'   [      \"Neil\"    ,           \"M\"  ,         36     ,           75   ,          160    ]:( 13 ),\\n' +","'   [      \"Omar\"    ,           \"M\"  ,         38     ,           70   ,          145    ]:( 14 ),\\n' +","'   [      \"Page\"    ,           \"F\"  ,         31     ,           67   ,          135    ]:( 15 ),\\n' +","'   [      \"Quin\"    ,           \"M\"  ,         29     ,           71   ,          176    ]:( 16 ),\\n' +","'   [      \"Ruth\"    ,           \"F\"  ,         28     ,           65   ,          131    ]:( 17 )\\n' +","']'"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}