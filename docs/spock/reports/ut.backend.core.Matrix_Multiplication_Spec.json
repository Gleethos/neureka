{
  "className":"ut.backend.core.Matrix_Multiplication_Spec",
  "title":"Internal CPU based Matrix Multiplication",
  "narrative":"This specification covers library internal matrix multiplication logic,\n    specifically the CPU implementation.\n    Do not depend on the API used in this specification as it is subject to change!",
  "subjects":[],
  "statistics":{
    "runs":"13",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"10.522 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The CPU matrix multiplication implementation works as expected. [0]",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [3]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [4]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [5]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [6]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [7]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [8]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [9]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [10]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The CPU matrix multiplication implementation works as expected. [11]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We crete an output array and convert it to the targeted array type.","code":["var C = new double[M*N].asType(type)"]},

        {"kind":"when","text":"We perform the matrix multiplication.","code":["CPUMatMul.execute(true, A.asType(type), B.asType(type), C, M, K, N)"]},

        {"kind":"then","text":"The result is as expected.","code":["C == expectedC"]},

        {"kind":"where","text":"The following data arrays and dimensions can be used for the test.","code":{"type":["float[]","float[]","float[]","double[]","double[]","double[]","int[]","int[]","int[]","long[]","long[]","long[]"],"A":["[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]","[4, 3, 2, 1]","[-2, 1]","[-2, 1]"],"B":["[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]","[-0.5, 1.5, 1, -2]","[-1, -1.5]","[-1, -1.5]"],"M":["2","1","2","2","1","2","2","1","2","2","1","2"],"K":["2","2","1","2","2","1","2","2","1","2","2","1"],"N":["2","1","2","2","1","2","2","1","2","2","1","2"],"expectedC":["[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 1, 0, 0, 1 ]","[ 0.5 ]","[ 2.0, 3.0, -1.0, -1.5 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]","[ 3, -2, 1, 0 ]","[ 1 ]","[ 2, 2, -1, -1 ]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The internal matrix multiplication test script runs!",
      "result":"PASS",
      "duration":"10.509 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The test script runs without errors.","code":["new InternalMatMulTest().start()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
