{
  "className":"ut.ndas.NDA_Instantiation_Spec",
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.145 seconds"
  },

  "title":"ND-Array Instantiation",
  "narrative":"In this specification we cover how ND-arrays can be instantiated.",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A vector can be created from an array of values through the \"of\" method.",
      "result":"PASS",
      "duration":"0.093 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We simply pass an array of ints to the \"of\" factory method to create an nd-array.","code":["var nda = Nda.of(1, 2, 3)"]},

        {"kind":"expect","text":"The nd-array will then have the expected shape, items and data type.","code":["nda.shape == [3]","nda.items == [1, 2, 3]","nda.itemType == Integer"]},

        {"kind":"when","text":"We use doubles instead of ints...","code":["nda = Nda.of(4.0, 5.0)"]},

        {"kind":"then","text":"...the nd-array will be an array of doubles!","code":["nda.shape == [2]","nda.items == [4.0, 5.0]","nda.itemType == Double"]},

        {"kind":"when","text":"We want to use booleans instead of numeric data types...","code":["nda = Nda.of(true, false)"]},

        {"kind":"then","text":"...the nd-array will be an array of booleans!","code":["nda.shape == [2]","nda.items == [true, false]","nda.itemType == Boolean"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"ND-arrays can be created fluently.",
      "result":"PASS",
      "duration":"0.028 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!"]
      },
      "blocks":[
        {"kind":"given","text":"We create a new homogeneously filled Nda instance using a fluent builder API.","code":["Nda<?> t = Nda.of( type )",".withShape( 3, 2 )",".all( value )"]},

        {"kind":"expect","text":"This new instance will have the expected data type!","code":["t.itemType() == type"]},

        {"kind":"and","text":"...all items of the array will have the same value, which is the one we passed to the fluent builder.","code":["t.every((Predicate<Object>){ it == value })"]},

        {"kind":"and","text":"The nd-array will have the shape we passed to the builder.","code":["t.shape == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries: 2 * 3 = 6.","code":["t.size == 6"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Boolean","class java.lang.Character"],"value":["42","4.0","4.0","42","false","°"],"data":["[42]","[4.0]","[4.0]","[42]","[false]","°"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}