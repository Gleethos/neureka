{
  "className":"ut.tensors.Tensor_Operation_Spec",
  "statistics":{
    "runs":"11",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"7.778 seconds"
  },

  "title":"Running Tensors through operations",
  "narrative":"This specification covers the interaction \n between tensors and operations, more specifically it\n runs tensors through operations and validates that the results are valid.",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The \"dot\" operation reshapes and produces valid \"x\" operation result.",
      "result":"PASS",
      "duration":"0.174 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Two multi-dimensional tensors.","code":["var a = Tsr.of([1, 4, 4, 1   ], 4f..12f).unsafe.toType(type)","var b = Tsr.of([1, 3, 5, 2, 1], -5d..3d).unsafe.toType(type)"]},
        {"kind":"when","text":"The \"dot\" method is being called on \"a\" receiving \"b\"...","code":["var c = a.convDot(b)"]},
        {"kind":"then","text":"The result tensor contains the expected shape.","code":["c.toString().contains(\"(4x2x5x2)\")"]},
        {"kind":"and","text":"","code":["c.itemClass == type"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"matMul\" operation produces the expected result.",
      "result":"PASS",
      "duration":"0.423 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Two 2-dimensional tensors.","code":["var a = Tsr.of(Double.class).withShape(M, K).andFill(A).unsafe.toType(type)","var b = Tsr.of(Double.class).withShape(K, N).andFill(B).unsafe.toType(type)"]},
        {"kind":"when","text":"The \"matMul\" method is being called on \"a\" receiving \"b\"...","code":["var c = a.matMul(b)"]},
        {"kind":"then","text":"The result tensor contains the expected shape and values.","code":["c.toString() == \"(${M}x${N}):$expectedC\""]},
        {"kind":"and","text":"","code":["c.itemClass == type"]},
        {"kind":"where","text":"We use the following data and matrix dimensions!","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"random\" function/operation populates tensors randomly.",
      "result":"PASS",
      "duration":"0.133 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var t = Tsr.of(type).withShape(2,4).all(-42)"]},
        {"kind":"and","text":"","code":["var f = Function.of('random(I[0])')"]},
        {"kind":"expect","text":"","code":["t.itemClass == type"]},
        {"kind":"when","text":"","code":["var r = f(t)"]},
        {"kind":"then","text":"","code":["r === t"]},
        {"kind":"and","text":"","code":["( r.unsafe.data as float[] ) == [1.0588075, 1.4017555, 1.2537496, -1.3897222, 1.0374786, 0.743316, 1.1692946, 1.3977289] as float[]"]},
        {"kind":"when","text":"","code":["r = f.with(Arg.Seed.of(42)).call(t)"]},
        {"kind":"then","text":"","code":["r === t"]},
        {"kind":"and","text":"","code":["( r.unsafe.data as float[] ) == [2.2639139286289724, -0.2763464310754003, 0.3719153742868813, -0.9768504740489802, 0.5154099159307729, 1.1608137295804097, 2.1905023977046336, -0.5449569795660217] as float[]"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The values of a randomly populated tensor seems to adhere to a gaussian distribution.",
      "result":"PASS",
      "duration":"0.134 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var t = Tsr.of(type).withShape(20, 40, 20).all(0)"]},
        {"kind":"and","text":"","code":["var f = Function.of('random(I[0])')"]},
        {"kind":"when","text":"","code":["f.with(Arg.Seed.of(-73L)).call(t)","var stats = new Statistics( t.unsafe.data as double[] )"]},
        {"kind":"then","text":"","code":["-0.05d < stats.mean && stats.mean < 0.05d"]},
        {"kind":"and","text":"","code":["0.875d < stats.variance && stats.variance < 1.125d"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"New method \"asFunction\" of String added at runtime is callable by groovy and also works.",
      "result":"PASS",
      "duration":"0.593 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create two tensors and convert them to a desired type.","code":["var a = Tsr.of([1,2], [3d, 2d]).unsafe.toType(type)","var b = Tsr.of([2,1], [-1f, 4f]).unsafe.toType(type)"]},
        {"kind":"and","text":"We prepare bindings for the Groovy shell.","code":["Binding binding = new Binding()","binding.setVariable('a', a)","binding.setVariable('b', b)"]},
        {"kind":"expect","text":"The tensors have the type...","code":["a.itemClass == type","b.itemClass == type"]},
        {"kind":"when","text":"The groovy code is being evaluated.","code":["var c = new GroovyShell(binding).evaluate((code)) as Tsr"]},
        {"kind":"then","text":"The resulting tensor (toString) will contain the expected String.","code":["c.toString().contains(expected)"]},
        {"kind":"and","text":"","code":["c.itemClass == type"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"New operator methods added to \"SDK-types\" at runtime are callable by groovy and also work.",
      "result":"PASS",
      "duration":"1.344 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().ndArrays({it.hasSlimNumbers=true})","Tsr a = Tsr.of(5d).unsafe.toType(type)","Tsr b = Tsr.of(3f).unsafe.toType(type)","Binding binding = new Binding()","binding.setVariable('a', a)","binding.setVariable('b', b)"]},
        {"kind":"when","text":"...calling methods on types like Double and Integer that receive Tsr instances...","code":["Tsr c = new GroovyShell(binding).evaluate((code)) as Tsr"]},
        {"kind":"then","text":"The resulting tensor (toString) will contain the expected String.","code":["c.toString().endsWith(\"[$expected]\")"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Overloaded operation methods on tensors produce expected results when called.",
      "result":"PASS",
      "duration":"0.091 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Tsr a = Tsr.of(2d).setRqsGradient(true)","Tsr b = Tsr.of(-4d)","Tsr c = Tsr.of(3d).setRqsGradient(true)"]},
        {"kind":"expect","text":"","code":["( a / a                      ).toString().contains(\"[1]:(1.0)\")","( c % a                      ).toString().contains(\"[1]:(1.0)\")","( ( ( b / b ) ** c % a ) * 3 ).toString().contains(\"[1]:(3.0)\")","( a *= b                     ).toString().contains(\"(-8.0)\")","( a += -c                    ).toString().contains(\"(-11.0)\")","( a -= c                     ).toString().contains(\"(-14.0)\")","( a /= Tsr.of(2d)      ).toString().contains(\"(-7.0)\")","( a %= c                     ).toString().contains(\"(-1.0)\")"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Simple slice addition produces expected result.",
      "result":"PASS",
      "duration":"0.138 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(false)","Tsr a = Tsr.of([11, 11], 3d..19d).to( device )","Tsr x = a[1..-2,0..-1]","Tsr y = a[0..-3,0..-1]"]},
        {"kind":"when","text":"","code":["Tsr t = x + y","String tAsStr = t.toString({it.setRowLimit(50)})"]},
        {"kind":"then","text":"","code":["tAsStr.contains(\"(9x11):[17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, \" +","\"26.0, 28.0, 30.0, 32.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, \" +","\"26.0, 28.0, 30.0, 32.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, ... + 49 more]\")"]},
        {"kind":"where","text":"The following data is being used for tensor instantiation :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Auto reshaping and broadcasting works and the result can be back propagated.",
      "result":"PASS",
      "duration":"2.577 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},
        {"kind":"and","text":"","code":["String wValue = whichGrad","? \"8\" + ( bShape.inject(1, {x,y->x*y}) > 1 ? \", 9\" : \"\" )",": \"1, 2, 3, 4\""]},
        {"kind":"and","text":"","code":["def aShape = [2, 2]"]},
        {"kind":"and","text":"","code":["Tsr<Double> a = Tsr.of(aShape, 1d..5d).setRqsGradient(!whichGrad).to(Device.get(device))","Tsr<Double> b = Tsr.of(bShape, 8d..9d).setRqsGradient(whichGrad).to(Device.get(device))"]},
        {"kind":"and","text":"","code":["a.unsafe.toType(type)","b.unsafe.toType(type)"]},
        {"kind":"and","text":"","code":["String wShape = ( whichGrad ? bShape : aShape ).join(\"x\")","Tsr    w      = ( whichGrad ? b      : a      )"]},
        {"kind":"expect","text":"","code":["a.itemClass == type","b.itemClass == type"]},
        {"kind":"when","text":"","code":["Tsr c = operation.apply(a, b)"]},
        {"kind":"then","text":"","code":["c.toString({it.hasSlimNumbers = true}).startsWith(\"[2x2]:($cValue)\")","w.toString({it.hasSlimNumbers = true}) == \"[$wShape]:($wValue):g:(null)\""]},
        {"kind":"when","text":"","code":["c.backward(Tsr.of([2, 2], [5, -2, 7, 3]).unsafe.toType(type))"]},
        {"kind":"then","text":"","code":["w.toString({it.hasSlimNumbers = true}) == \"[$wShape]:($wValue):g:($wGradient)\""]},
        {"kind":"when","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(false)"]},
        {"kind":"then","text":"","code":["c.toString({it.hasSlimNumbers = true}) == \"(2x2):[$cValue]\""]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Operators \"+,*,**\" produce expected results with gradients which can be accessed via a \"Ig[0]\" Function instance",
      "result":"PASS",
      "duration":"0.063 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Neurekas view is set to legacy and three tensors of which one requires gradients.","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Tsr x = Tsr.of(3).setRqsGradient(true)","Tsr b = Tsr.of(-4)","Tsr w = Tsr.of(2)"]},
        {"kind":"when","text":"","code":["Tsr y = ( (x+b)*w )**2"]},
        {"kind":"then","text":"","code":["y.toString().contains(\"[1]:(4.0); ->d[1]:(-8.0)\")"]},
        {"kind":"when","text":"","code":["y = ((x+b)*w)**2"]},
        {"kind":"then","text":"","code":["y.toString().contains(\"[1]:(4.0); ->d[1]:(-8.0)\")"]},
        {"kind":"and","text":"","code":["Neureka.get().settings().debug().setIsKeepingDerivativeTargetPayloads(true)"]},
        {"kind":"when","text":"","code":["y.backward(Tsr.of(1))"]},
        {"kind":"and","text":"","code":["Tsr t2 = Tsr.of( \"Ig[0]\", [x] )","Tsr t1 = Tsr.of( \"Ig[0]\", [y] )"]},
        {"kind":"then","text":"","code":["thrown(IllegalArgumentException)"]},
        {"kind":"and","text":"","code":["t2.toString() == \"[1]:(-8.0)\""]},
        {"kind":"and","text":"","code":["t2 == x.gradient"]},
        {"kind":"and","text":"","code":["Neureka.get().settings().debug().setIsKeepingDerivativeTargetPayloads(false)"]},
        {"kind":"when","text":"","code":["Tsr[] trs = new Tsr[]{x}"]},
        {"kind":"and","text":"","code":["def fun = new FunctionParser( Neureka.get().backend() ).parse(\"Ig[0]\", false)"]},
        {"kind":"then","text":"","code":["fun(trs).toString() == \"[1]:(-8.0)\""]},
        {"kind":"when","text":"","code":["trs[0] = y"]},
        {"kind":"and","text":"","code":["fun = new FunctionParser( Neureka.get().backend() ).parse(\"Ig[0]\", false)"]},
        {"kind":"and","text":"","code":["fun(trs)"]},
        {"kind":"then","text":"","code":["thrown(IllegalArgumentException)"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Activation functions work across types on slices and non sliced tensors.",
      "result":"PASS",
      "duration":"1.998 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a function based on the provided expression.","code":["var func = Function.of(funExpression)"]},
        {"kind":"and","text":"We create 2 tensors storing the same values, one sliced and the other a normal tensor.","code":["var t1 = Tsr.of(type).withShape(2, 3).andSeed(\"Tempeh\")","var t2 = Tsr.of(type).withShape(4, 5).all(0)[1..2, 1..3]","t2[0..1, 0..2] = t1"]},
        {"kind":"expect","text":"The types of both tensors should match what was provided during instantiation.","code":["t1.dataType == DataType.of(type)","t1.itemClass == type","t2.dataType == DataType.of(type)","t2.itemClass == type"]},
        {"kind":"when","text":"We apply the function to both tensors...","code":["var result1 = func(t1)","var result2 = func(t2)"]},
        {"kind":"then","text":"","code":["result1.itemClass == type","result2.itemClass == type"]},
        {"kind":"and","text":"The data of the first (non slice) tensor should be as expected.","code":["result1.unsafe.data == expected instanceof Map ? expected['r1'] : expected"]},
        {"kind":"and","text":"As well the value of the slice tensor (Its data would be a sparse array).","code":["result2.items == expected instanceof Map ? expected['r2'] : expected"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}