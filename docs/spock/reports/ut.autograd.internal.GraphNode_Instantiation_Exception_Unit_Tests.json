{
  "className":"ut.autograd.internal.GraphNode_Instantiation_Exception_Unit_Tests",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.321 seconds"
  },
  "headers":["\n            <h2> GraphNode Instantiation Tests </h2>\n            <p>\n                Specified below are strict tests covering the behavior\n                of the GraphNode class during instantiation where\n                inputs are setup to cause expected exceptions.\n            </p>\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"GraphNode instantiation throws exception because tensors of ExecutionCall do not return GraphNode instances.",
      "result":"PASS",
      "duration":"0.275 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mocked arguments used to call the GraphNode constructor.","code":["Tsr payload = Mock( Tsr )","Tsr[] inputs = new Tsr[]{ Mock(Tsr), Mock(Tsr), Mock(Tsr) }","Supplier<Tsr> supplier = () -> payload","Function function = Mock( Function )","Operation type = Mock(Operation)","Object context = Mock( ExecutionCall )","Device device = Mock( Device )","def inputsNodeMock = Mock( GraphNode )"]},

        {"kind":"when","text":"We try to instantiate a GraphNode...","code":["new GraphNode( function, context, supplier )"]},

        {"kind":"then","text":"The expected exception message is being thrown.","code":["def exception = thrown(IllegalStateException)","exception.message ==","        \"Input tensor at index '1' did not return a GraphNode instance.\" +","        \"Input tensors of a new GraphNode must be part of the computation graph!\""]},

        {"kind":"and","text":"The mock objects are being called as expected.","code":["1 * context.inputs() >> inputs","0 * function.isDoingAD() >> true","0 * payload.getDevice() >> device","0 * payload.to( _ )","0 * device.cleaning( payload, _ )","(1..2) * function.getOperation() >> type","(0.._) * type.isDifferentiable() >> true","(1.._) * type.isInline() >> true","1 * inputs[0].getGraphNode() >> Optional.of(inputsNodeMock)","1 * inputs[1].getGraphNode() >> Optional.empty()","0 * inputs[2].getGraphNode() >> Optional.empty()","0 * context.allowsForward() >> true"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"GraphNode throws an exception when trying to execute an inline operation on inputs with active autograd.",
      "result":"PASS",
      "duration":"0.042 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mocked arguments used to call the GraphNode constructor.","code":["Tsr payload = Mock( Tsr )","Tsr[] inputs = new Tsr[]{ Mock(Tsr), Mock(Tsr), Mock(Tsr) }","Supplier<Tsr> supplier = () -> payload","AbstractOperation type = Mock( AbstractOperation )","Function function = Mock( Function )","Object context = Mock( ExecutionCall )","Device device = Mock( Device )","def inputsNodeMock = Mock( GraphNode )"]},

        {"kind":"when","text":"We try to instantiate a GraphNode...","code":["new GraphNode( function, context, supplier )"]},

        {"kind":"then","text":"The expected exception message is being thrown.","code":["def exception = thrown(IllegalStateException)","exception.message ==","        \"Trying to apply inline operation 'SOME_TEST_FUNCTION_STRING'\\n\"+","        \"on active autograd computation graph in non detached function.\\n\"+","        \"Please use detached functions instead! ( 'Function.create(\\\"SOME_TEST_FUNCTION_STRING(...)\\\", false)' )\\n\""]},

        {"kind":"and","text":"The mock objects have been called as expected.","code":["1 * context.inputs() >> inputs","0 * function.isDoingAD() >> true","1 * type.isInline() >> true","0 * payload.getDevice() >> device","0 * payload.to( _ )","0 * device.cleaning( payload, _ )","1 * inputs[0].getGraphNode() >> Optional.of(inputsNodeMock)","0 * inputs[1].getGraphNode() >> Optional.of(inputsNodeMock)","0 * inputs[2].getGraphNode() >> Optional.of(inputsNodeMock)","0 * inputsNodeMock.getMode() >> -2","1 * inputsNodeMock.usesAD() >> true","0 * inputs[0].rqsGradient() >> true","0 * inputs[1].rqsGradient() >> false","0 * inputs[2].rqsGradient() >> true","0 * context.allowsForward() >> true","0 * context.allowsBackward() >> true","(2..3) * function.getOperation() >> type","(1..3) * type.getIdentifier() >> \"SOME_TEST_FUNCTION_STRING\"","0 * type.getOperator() >> \"*\"","0 * inputsNodeMock.getPayload() >> Optional.of(payload)","0 * payload.hashCode() >> 3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}