{
  "className":"ut.tensors.Tensor_Slicing_Spec",
  "title":"Tensors within Tensors",
  "narrative":"ND-Array data structures can be \"sliced\" in the sense\n    that one can create a subset view of the underlying data inside a tensor\n    through a new tensor instance...\n    This can be a tedious and complicated procedure.\n    Therefore a tensor should expose a various user friendly API for slicing which\n    are also fit for various languages.\n    This specification covers these APIs for tensor slicing.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"9",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.028 seconds"
  },
  "headers":["\n                This specification covers the behavior of tensors when being sliced\n                on multiple different device types using the SliceBuilder API.           \n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"When Slicing only one axis using the SliceBuilder API, the other axes will be sliced implicitly.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A device could be found.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"The found device is also supported (Which might not always be the case for the OpenCLDevice).","code":["if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A 3 dimensional tensor which will be sliced.","code":["Tsr<Double> t = Tsr.of([2, 4, 3], -3d..7d)"]},

        {"kind":"and","text":"Which will be placed on a given device:","code":["t.to(device)"]},

        {"kind":"when","text":"Slicing axis 1 of the tensor using the \"from\" & \"to\" methods...","code":["Tsr s = t.slice()",".axis(1).from(1).to(2)",".get()"]},

        {"kind":"then","text":"This will result in a slice which has 4 axis entries less than the original tensor.","code":["s.shape().sum() == t.shape().sum() - 2"]},

        {"kind":"and","text":"This new slice will be displayed as follows when printed (with adjusted indent):","code":["s.toString().replace('\\n', '\\n'+\" \"*20) ==","\"\"\"(2x2x3):[","       [","          [   0.0 ,   1.0 ,   2.0  ],","          [   3.0 ,   4.0 ,   5.0  ]","       ],","       [","          [   1.0 ,   2.0 ,   3.0  ],","          [   4.0 ,   5.0 ,   6.0  ]","       ]","    ]\"\"\""]},

        {"kind":"and","text":"As already shown by the printed view, the tensor as the expected shape:","code":["s.shape() == [2, 2, 3]"]},

        {"kind":"where","text":"This works both on the GPU as well as CPU of course.","code":{"device":["OpenCLDevice[deviceId=cl_device_id[0x26eb33efd10],platform=OpenCLPlatform@39b7fccc[pid=cl_platform_id[0x7ff927018000],context=cl_context[0x26eaa3ac520],kernels=[..46..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"at\" method and the \"from\" / \"to\" methods can be mixed when slicing a tensor.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A device could be found.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"The found device is also supported (Which might not always be the case for the OpenCLDevice).","code":["if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A 3 dimensional tensor which will be sliced.","code":["Tsr<Double> t = Tsr.of([3, 3, 4], -11d..3d)"]},

        {"kind":"and","text":"Which will be placed on a given device:","code":["t.to(device)"]},

        {"kind":"when","text":"Slicing the tensor using both \"at\", \"from\"/\"to\" and an implicit full ranged slice for axis 1...","code":["Tsr s = t.slice()",".axis(0).at(1)","// Note: Axis 1 will be sliced implicitly if not specified!",".axis(2).from(1).to(2)",".get()"]},

        {"kind":"then","text":"This will result in a slice which has 4 axis entries less than the original tensor.","code":["s.shape().sum() == t.shape().sum() - 4"]},

        {"kind":"and","text":"This new slice will be displayed as follows when printed (with adjusted indent):","code":["s.toString().replace('\\n', '\\n'+\" \"*20) ==","\"\"\"(1x3x2):[","       [","          [   2.0 ,   3.0  ],","          [  -9.0 ,  -8.0  ],","          [  -5.0 ,  -4.0  ]","       ]","    ]\"\"\""]},

        {"kind":"and","text":"The \"at\" method sliced a single axis point whereas the \"from\" & \"to\" sliced from 1 to 2.","code":["s.shape() == [1, 3, 2]"]},

        {"kind":"where","text":"This works both on the GPU as well as CPU of course.","code":{"device":["OpenCLDevice[deviceId=cl_device_id[0x26eb33efd10],platform=OpenCLPlatform@39b7fccc[pid=cl_platform_id[0x7ff927018000],context=cl_context[0x26eaa3ac520],kernels=[..46..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A tensor can be sliced by passing ranges in the form of primitive arrays.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A device could be found.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"The found device is also supported (Which might not always be the case for the OpenCLDevice).","code":["if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A 3 dimensional tensor which will be sliced.","code":["Tsr t = Tsr.of([3, 3, 4], -11..3)"]},

        {"kind":"and","text":"Which will be placed on a given device:","code":["t.to(device)"]},

        {"kind":"when","text":"Slicing the tensor using primitive int arrays...","code":["Tsr s = t.getAt(","    new int[]{1},    // Axis 0","    new int[]{0, 2}, // Axis 1","    new int[]{1, 2}  // Axis 2",")"]},

        {"kind":"then","text":"This will result in a slice which has 4 axis entries less than the original tensor.","code":["s.shape().sum() == t.shape().sum() - 4"]},

        {"kind":"and","text":"This new slice will be displayed as follows when printed (with adjusted indent):","code":["s.toString().replace('\\n', '\\n'+\" \"*20) ==","\"\"\"(1x3x2):[","       [","          [   2.0 ,   3.0  ],","          [  -9.0 ,  -8.0  ],","          [  -5.0 ,  -4.0  ]","       ]","    ]\"\"\""]},

        {"kind":"and","text":"The the slice will have the following shape","code":["s.shape() == [1, 3, 2]"]},

        {"kind":"where","text":"This works both on the GPU as well as CPU of course.","code":{"device":["OpenCLDevice[deviceId=cl_device_id[0x26eb33efd10],platform=OpenCLPlatform@39b7fccc[pid=cl_platform_id[0x7ff927018000],context=cl_context[0x26eaa3ac520],kernels=[..46..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A tensor can be sliced by passing ranges in the form of lists (Groovy ranges).",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A device could be found.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"The found device is also supported (Which might not always be the case for the OpenCLDevice).","code":["if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A 3 dimensional tensor which will be sliced.","code":["Tsr t = Tsr.of([3, 3, 4], -11..3)"]},

        {"kind":"and","text":"Which will be placed on a given device:","code":["t.to(device)"]},

        {"kind":"when","text":"Slicing the tensor using lists of integers generated by the Groovy range operator..","code":["Tsr s = t[1, 0..2, 1..2]"]},

        {"kind":"then","text":"This will result in a slice which has 4 axis entries less than the original tensor.","code":["s.shape().sum() == t.shape().sum() - 4"]},

        {"kind":"and","text":"This new slice will be displayed as follows when printed (with adjusted indent):","code":["s.toString().replace('\\n', '\\n'+\" \"*20) ==","\"\"\"(1x3x2):[","       [","          [   2.0 ,   3.0  ],","          [  -9.0 ,  -8.0  ],","          [  -5.0 ,  -4.0  ]","       ]","    ]\"\"\""]},

        {"kind":"and","text":"The the slice will have the following shape","code":["s.shape() == [1, 3, 2]"]},

        {"kind":"where","text":"This works both on the GPU as well as CPU of course.","code":{"device":["OpenCLDevice[deviceId=cl_device_id[0x26eb33efd10],platform=OpenCLPlatform@39b7fccc[pid=cl_platform_id[0x7ff927018000],context=cl_context[0x26eaa3ac520],kernels=[..46..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The slice builder also supports slicing with custom step sizes.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A device could be found.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"The found device is also supported (Which might not always be the case for the OpenCLDevice).","code":["if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A 3 dimensional tensor which will be sliced.","code":["Tsr<Double> t = Tsr.of([3, 3, 4], -11d..3d)"]},

        {"kind":"and","text":"Which will be placed on a given device:","code":["t.to(device)"]},

        {"kind":"when","text":"Slicing the tensor using lists of integers generated by the Groovy range operator..","code":["Tsr s = t.slice()",".axis(0).at(0)",".axis(1).at(0)",".axis(2).from(0).to(3).step(2)",".get()"]},

        {"kind":"then","text":"This will result in a slice which has 4 axis entries less than the original tensor.","code":["s.shape().sum() == t.shape().sum() - 6"]},

        {"kind":"and","text":"This new slice will be displayed as follows when printed (with adjusted indent):","code":["s.toString() == \"\"\"(1x1x2):[","   [","      [  -11.0,  -9.0  ]","   ]","]\"\"\""]},

        {"kind":"and","text":"The the slice will have the following shape","code":["s.shape() == [1, 1, 2]"]},

        {"kind":"where","text":"This works both on the GPU as well as CPU of course.","code":{"device":["OpenCLDevice[deviceId=cl_device_id[0x26eb33efd10],platform=OpenCLPlatform@39b7fccc[pid=cl_platform_id[0x7ff927018000],context=cl_context[0x26eaa3ac520],kernels=[..46..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Slicing is also a Function with autograd support!",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2 dimensional tensor requiring gradients.","code":["var t = Tsr.ofBytes().withShape(4, 4).andFill(-1, 7, 3).setRqsGradient(true)"]},

        {"kind":"and","text":"3 arrays we need to slice (the slice shape, offset and spread/strides).","code":["int[] newShape  = [2, 2]","int[] newOffset = [1, 1]","int[] newSpread = [1, 1]"]},

        {"kind":"when","text":"Slicing the tensor using the slice function.","code":["Tsr<Object> slice = Function.of(\"slice(I[0])\", true)",".with(Arg.Shape.of(newShape),Arg.Offset.of(newOffset),Arg.Stride.of(newSpread))",".call(t)"]},

        {"kind":"then","text":"The resulting tensor will have the correct shape and values.","code":["slice.toString() == \"(2x2):[\\n\" +","\"   [   3.0 ,  -1.0  ],\\n\" +","\"   [  -1.0 ,   7.0  ]\\n\" +","\"]\""]},

        {"kind":"when","text":"We perform a backward pass using an \"error\" of -8.","code":["slice.backward(-8)"]},

        {"kind":"then","text":"The gradient of the original tensor will be contain 4 times -8.","code":["t.toString() == \"(4x4):[\\n\" +","\"   [  -1.0 ,   7.0 ,   3.0 ,  -1.0  ],\\n\" +","\"   [   7.0 ,   3.0 ,  -1.0 ,   7.0  ],\\n\" +","\"   [   3.0 ,  -1.0 ,   7.0 ,   3.0  ],\\n\" +","\"   [  -1.0 ,   7.0 ,   3.0 ,  -1.0  ]\\n\" +","\"]:g:[\\n\" +","\"   [   0.0 ,   0.0 ,   0.0 ,   0.0  ],\\n\" +","\"   [   0.0 ,  -8.0 ,  -8.0 ,   0.0  ],\\n\" +","\"   [   0.0 ,  -8.0 ,  -8.0 ,   0.0  ],\\n\" +","\"   [   0.0 ,   0.0 ,   0.0 ,   0.0  ]\\n\" +","\"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Normal slicing will try to do autograd.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 1 dimensional tensor (vector) requiring gradients.","code":["var t = Tsr.ofBytes().withShape(5).andFill(-1, 7, 3).setRqsGradient(true)"]},

        {"kind":"when","text":"Slicing the tensor using the subscription operator (which calls the getAt(List) method).","code":["var s = t[2..3]"]},

        {"kind":"and","text":"We perform a backward pass using an \"error\" of 42.","code":["s.backward(42)"]},

        {"kind":"then","text":"The gradient of the original tensor will be contain 2 times 42.","code":["t.toString() == \"(5):[  -1.0 ,   7.0 ,   3.0 ,  -1.0 ,   7.0  ]:g:[   0.0 ,   0.0 ,  42.0 ,  42.0 ,   0.0  ]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can avoid autograd when slicing by using the \"detached\" instead of the \"get\" method.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 1 dimensional tensor (vector) requiring gradients.","code":["var t = Tsr.ofBytes().withShape(4).andFill(-1, 7, 3).setRqsGradient(true)"]},

        {"kind":"when","text":"We slice the tensor through the fluent slicer, then get it detached and finally backpropagation an error of 73.","code":["t.slice()",".axis(0).from(0).to(1)",".detached()",".backward(73)"]},

        {"kind":"then","text":"The gradient of the original tensor will still be null, because we performed detached slicing.","code":["t.toString() == \"(4):[  -1.0 ,   7.0 ,   3.0 ,  -1.0  ]:g:[null]\""]},

        {"kind":"when","text":"We slice the tensor through the fluent slicer but this time use the get method and then again backpropagation an error of 73.","code":["t.slice()",".axis(0).from(0).to(1)",".get()",".backward(73)"]},

        {"kind":"then","text":"This time there will be 2 times 73 in the gradient.","code":["t.toString() == \"(4):[  -1.0 ,   7.0 ,   3.0 ,  -1.0  ]:g:[  73.0 ,  73.0 ,   0.0 ,   0.0  ]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can slice a scalar tensor from a larger tensor of rank 4.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 4 dimensional tensor.","code":["var t = Tsr.ofBytes().withShape(4, 2, 3, 2).andFill(-1, 7, 9, 5, 4, 3)"]},

        {"kind":"when","text":"Slicing the tensor using lists of integers...","code":["var s = t[1, 1, 2, 0]"]},

        {"kind":"then","text":"The slice will contain only a single number, namely: 4.","code":["s.items == [4]"]},

        {"kind":"and","text":"We verify this through the \"getItemAt\" method.","code":["s.items == [t.item(1, 1, 2, 0)]"]},

        {"kind":"and","text":"A variation of the previous verification (here we test 0 padding of getItemAt).","code":["s.items == [t.item(1, 1, 2)]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}