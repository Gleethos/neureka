{
  "className":"ut.tensors.Tensor_Stats_Spec",
  "title":"Reducing Tensors",
  "narrative":"Various kinds of operations reduce tensors to scalars,\n    the most common ones being the min and max operations \n    which find the smallest as well as largest number among all \n    items of a tensor.\n    Neureka exposes various different ways to achieve this,\n    all of which are also differential (autograd support).",
  "subjects":["neureka.Tensor"],
  "statistics":{
    "runs":"22",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.225 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can use the max operation as a function [0]",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [1]",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [3]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [4]",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [5]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [6]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [7]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [8]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [9]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [10]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [11]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [12]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the max operation as a function [13]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a min/max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(dataType)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'","'MIN'","'MAX'"],"dataType":["Float","Float","Double","Double","Integer","Integer","Long","Long","Short","Short","Byte","Byte","Float","Float"],"device":["'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'CPU'","'GPU'","'GPU'"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can get pre-instantiated min and max functions from the library context.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We access the pre-instantiated max function:","code":["var min = Neureka.get().backend.autogradFunction.min"]},

        {"kind":"and","text":"We access the pre-instantiated min function:","code":["var max = Neureka.get().backend.autogradFunction.max"]},

        {"kind":"expect","text":"The 2 functions are indeed min and max","code":["min.toString() == \"min(I[0])\"","max.toString() == \"max(I[0])\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"There is no need to use a function, we can use the min() and max() methods on tensors instead. [0]",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor:","code":["var a = Tensor.of(Float)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((31**(i+42))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"and","text":"We access the min and max methods:","code":["var min = a.min()","var max = a.max()"]},

        {"kind":"expect","text":"The results are correct:","code":["min.item(0) == -150.0","max.item(0) == 147.0"]},

        {"kind":"where","text":"","code":{"device":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"There is no need to use a function, we can use the min() and max() methods on tensors instead. [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor:","code":["var a = Tensor.of(Float)","                    .withShape(19, 7)","                    .andWhere({ i, _ -> ((31**(i+42))%301)-151})"]},

        {"kind":"and","text":"Before applying the function, we copy the tensor to the device:","code":["a.to(device)"]},

        {"kind":"and","text":"We access the min and max methods:","code":["var min = a.min()","var max = a.max()"]},

        {"kind":"expect","text":"The results are correct:","code":["min.item(0) == -150.0","max.item(0) == 147.0"]},

        {"kind":"where","text":"","code":{"device":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Both the min and max operation support autograd (back-propagation).",
      "result":"PASS",
      "duration":"0.008 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple tensor of floats which requires gradients:","code":["var a = Tensor.of(-3f, 6.42f, 2.065f, -8f, 0.2, 7.666f, 3.39f).setRqsGradient(true)"]},

        {"kind":"and","text":"We first do a simple operation to get another tensor:","code":["var b = a * 3"]},

        {"kind":"and","text":"We then do min and max operations as well as 2 divisions:","code":["var x = b.min() / 2","var y = b.max() / 4"]},

        {"kind":"when","text":"We back-propagate both paths by adding them and calling backward:","code":["(x+y).backward()"]},

        {"kind":"then","text":"The gradient is correct:","code":["a.gradient.get().items == [0f, 0f, 0f, 1.5f, 0f, 0.75f, 0f]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the \"sum\" method to sum the items of a tensor.",
      "result":"PASS",
      "duration":"0.172 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor:","code":["var a = Tensor.of(Float)","                    .withShape(13, 73, 11)","                    .andWhere({ i, _ -> ((7**i) % 11)-5})"]},

        {"kind":"and","text":"We sum the items of the tensor:","code":["var sum = a.sum()"]},

        {"kind":"expect","text":"The result is correct:","code":["sum.item() == 5217.0"]},

        {"kind":"and","text":"The result can be verified using other methods:","code":["sum.item() == sum.items.stream().reduce(0,(x,y)->x+y)","sum.item() == a.mut.data.get().sum()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The sum operation support autograd (back-propagation).",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple tensor of floats which requires gradients:","code":["var a = Tensor.of(1f, 2f, 3f, 4f).setRqsGradient(true)"]},

        {"kind":"and","text":"We first do a simple operation to get another tensor:","code":["var b = a * 3"]},

        {"kind":"and","text":"We then do a sum operation:","code":["var x = b.sum()"]},

        {"kind":"when","text":"We back-propagate the path by calling backward:","code":["x.backward()"]},

        {"kind":"then","text":"The gradient is correct:","code":["a.gradient.get().items == [3f, 3f, 3f, 3f]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A tensor can be summed alongside a specific axis.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple 2 by 3 matrix.","code":["var m = Tensor.of(-3f..5f).reshape(2, 3)"]},

        {"kind":"when","text":"We create a sum for every axis...","code":["var s1 = m.sum(0)","var s2 = m.sum(1)"]},

        {"kind":"then","text":"The sums are vectors with the expected state.","code":["s1.items == [-3.0, -1.0, 1.0]","s2.items == [-6.0, 3.0]","s1.shape == [1, 3]","s2.shape == [2, 1]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Multiple dimensions of a tensor can selectively be summed up.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Given a tensor with a shape of (x, y, z) and the request to sum up axis 1 and 2,\n            then the result will be a tensor with a shape of (x, 1, 1) because the\n            sum of all values along the axis 1 and 2 is a single value for each of the two\n            first dimensions.\n            This operation supports autograd.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple 2 by 3 by 4 matrix.","code":["var m = Tensor.of(-3f..23f).reshape(2, 3, 4)"]},

        {"kind":"when","text":"We create a sum for every axis...","code":["var s = m.sum(1, 2)"]},

        {"kind":"then","text":"The sums are vectors with the expected state.","code":["s.items == [30.0, 174.0]","s.shape == [2, 1, 1]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
