{
  "className":"ut.tensors.Tensor_Stats_Spec",
  "title":"Tensor Number Statistics",
  "narrative":"",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.351 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can use the max operation as a function",
      "result":"PASS",
      "duration":"0.328 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a max function:","code":["var fun = Function.of(reduceType.toLowerCase() + \"(I[0])\")"]},

        {"kind":"and","text":"A seed, for some variability:","code":["var seed = dataType.getSimpleName().hashCode() + reduceType.hashCode()"]},

        {"kind":"and","text":"","code":["var a = Tsr.of(dataType)",".withShape(19, 7)",".andWhere({ i, _ -> ((seed+31**(i+13))%301)-151})"]},

        {"kind":"and","text":"","code":["a.to(device)"]},

        {"kind":"when","text":"We apply the function to the tensor:","code":["var result = fun(a)"]},

        {"kind":"then","text":"The result is correct:","code":["result.items[0] == expected"]},

        {"kind":"where","text":"","code":{"reduceType":["MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX"],"dataType":["class java.lang.Float","class java.lang.Float","class java.lang.Double","class java.lang.Double","class java.lang.Integer","class java.lang.Integer","class java.lang.Long","class java.lang.Long","class java.lang.Short","class java.lang.Short","class java.lang.Byte","class java.lang.Byte","class java.lang.Float","class java.lang.Float"],"device":["CPU","CPU","CPU","CPU","CPU","CPU","CPU","CPU","CPU","CPU","CPU","CPU","GPU","GPU"],"expected":["-148.0","141.0","-143.0","149.0","-121","148","-146","147","-148","146","-127","124","-148.0","141.0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can get pre-instantiated min and max functions from the library context.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We access the pre-instantiated max function:","code":["var min = Neureka.get().backend.autogradFunction.min"]},

        {"kind":"and","text":"We access the pre-instantiated min function:","code":["var max = Neureka.get().backend.autogradFunction.max"]},

        {"kind":"expect","text":"","code":["min.toString() == \"min(I[0])\"","max.toString() == \"max(I[0])\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"There is no need to use a function, we can use the min() and max() methods on tensors instead.",
      "result":"PASS",
      "duration":"0.011 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor:","code":["var a = Tsr.of(Float)",".withShape(19, 7)",".andWhere({ i, _ -> ((31**(i+42))%301)-151})"]},

        {"kind":"and","text":"","code":["a.to(device)"]},

        {"kind":"and","text":"We access the min and max methods:","code":["var min = a.min()","var max = a.max()"]},

        {"kind":"expect","text":"The results are correct:","code":["min.item(0) == -150.0","max.item(0) == 147.0"]},

        {"kind":"where","text":"","code":{"device":["CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}