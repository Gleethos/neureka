{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.128 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a bi-elementwise algorithm.","code":["alg instanceof BiElementWise"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = alg.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"alg":["BiElementWise@7571101b[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@1c3741fb[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@5f76005a[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@46c7d3dc[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@6db37ab5[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a activation algorithm.","code":["alg instanceof Activation"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"alg":["Activation@78fbae87[name=activation,support=[CPU,OpenCLDevice]]","Activation@5b2de525[name=activation,support=[CPU,OpenCLDevice]]","Activation@9d0f5fb[name=activation,support=[CPU,OpenCLDevice]]","Activation@22d25b79[name=activation,support=[CPU,OpenCLDevice]]","Activation@10c81d5c[name=activation,support=[CPU,OpenCLDevice]]","Activation@14071757[name=activation,support=[CPU,OpenCLDevice]]","Activation@5b70bbb8[name=activation,support=[CPU,OpenCLDevice]]","Activation@1dceb0b6[name=activation,support=[CPU,OpenCLDevice]]","Activation@4eae4c9b[name=activation,support=[CPU,OpenCLDevice]]","Activation@7c66e695[name=activation,support=[CPU,OpenCLDevice]]","Activation@1268c120[name=activation,support=[CPU,OpenCLDevice]]","Activation@481d652[name=activation,support=[CPU,OpenCLDevice]]","Activation@174544f1[name=activation,support=[CPU,OpenCLDevice]]","Activation@15b4f258[name=activation,support=[CPU,OpenCLDevice]]","Activation@53db0bb4[name=activation,support=[CPU,OpenCLDevice]]","Activation@22cfec72[name=activation,support=[CPU,OpenCLDevice]]","Activation@538d9f1b[name=activation,support=[CPU,OpenCLDevice]]","Activation@6079aa21[name=activation,support=[CPU,OpenCLDevice]]","Activation@33d51125[name=activation,support=[CPU,OpenCLDevice]]","Activation@6e0e186d[name=activation,support=[CPU,OpenCLDevice]]","Activation@b499c6[name=activation,support=[CPU,OpenCLDevice]]","Activation@1279a5e[name=activation,support=[CPU,OpenCLDevice]]","Activation@217388db[name=activation,support=[CPU,OpenCLDevice]]","Activation@22549dc3[name=activation,support=[CPU,OpenCLDevice]]","Activation@70c653e9[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a convolution algorithm.","code":["alg instanceof NDConvolution"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"alg":["NDConvolution@25721e78[name=convolution,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations have expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first reset the library settings.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a broadcast algorithm.","code":["alg instanceof Broadcast"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"alg":["Broadcast@4d65f124[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@3b99972a[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@66881aed[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@75b952f9[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@664f24a8[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@2e6da789[name=broadcast,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}