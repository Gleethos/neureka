{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"3.824 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"2.373 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@521f1d77[name=operator,support=[OpenCLDevice,CPU]]","Operator@e1cc4e5[name=operator,support=[OpenCLDevice,CPU]]","Operator@fc544d4[name=operator,support=[OpenCLDevice,CPU]]","Operator@1c87b428[name=operator,support=[OpenCLDevice,CPU]]","Operator@edab760[name=operator,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.187 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@9a625fb[name=activation,support=[OpenCLDevice,CPU]]","Activation@52355090[name=activation,support=[OpenCLDevice,CPU]]","Activation@5d605014[name=activation,support=[OpenCLDevice,CPU]]","Activation@5cbb5a5f[name=activation,support=[OpenCLDevice,CPU]]","Activation@395d0861[name=activation,support=[OpenCLDevice,CPU]]","Activation@3226aaef[name=activation,support=[OpenCLDevice,CPU]]","Activation@1ffceeae[name=activation,support=[OpenCLDevice,CPU]]","Activation@36f2d9f6[name=activation,support=[OpenCLDevice,CPU]]","Activation@30a86cc4[name=activation,support=[OpenCLDevice,CPU]]","Activation@7abbf8c7[name=activation,support=[OpenCLDevice,CPU]]","Activation@1d6bfc9d[name=activation,support=[OpenCLDevice,CPU]]","Activation@6a0c2fa5[name=activation,support=[OpenCLDevice,CPU]]","Activation@448c3244[name=activation,support=[OpenCLDevice,CPU]]","Activation@4d56ad69[name=activation,support=[OpenCLDevice,CPU]]","Activation@66ac9c8e[name=activation,support=[OpenCLDevice,CPU]]","Activation@42f4f517[name=activation,support=[OpenCLDevice,CPU]]","Activation@647e2e5d[name=activation,support=[OpenCLDevice,CPU]]","Activation@6e41351d[name=activation,support=[OpenCLDevice,CPU]]","Activation@787eb31b[name=activation,support=[OpenCLDevice,CPU]]","Activation@70178324[name=activation,support=[OpenCLDevice,CPU]]","Activation@2b6c562e[name=activation,support=[OpenCLDevice,CPU]]","Activation@3dc55c7e[name=activation,support=[OpenCLDevice,CPU]]","Activation@5b3349bb[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["Convolution@1e174f2b[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.441 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAgent is being instantiated by calling the given implementation with these arguments...","code":["ADAgent agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[ 0.0 , 0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@74432d4b[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@5346b657[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@7f471a4b[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@e5c49a7[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@3e01a7d7[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@38bd0e54[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}