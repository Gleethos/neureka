{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"2.436 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"1.512 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@9936354[name=operator,support=[OpenCLDevice,CPU]]","Operator@5d2ee1cc[name=operator,support=[OpenCLDevice,CPU]]","Operator@3fd87902[name=operator,support=[OpenCLDevice,CPU]]","Operator@ea1ccd[name=operator,support=[OpenCLDevice,CPU]]","Operator@6ab8b279[name=operator,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.139 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@46ecfbf7[name=activation,support=[OpenCLDevice,CPU]]","Activation@3f32c47a[name=activation,support=[OpenCLDevice,CPU]]","Activation@1b9ea9c5[name=activation,support=[OpenCLDevice,CPU]]","Activation@7c466ff4[name=activation,support=[OpenCLDevice,CPU]]","Activation@f1a776c[name=activation,support=[OpenCLDevice,CPU]]","Activation@5e399c93[name=activation,support=[OpenCLDevice,CPU]]","Activation@47340483[name=activation,support=[OpenCLDevice,CPU]]","Activation@76317dcd[name=activation,support=[OpenCLDevice,CPU]]","Activation@3ff85b4d[name=activation,support=[OpenCLDevice,CPU]]","Activation@54fadb00[name=activation,support=[OpenCLDevice,CPU]]","Activation@463887f6[name=activation,support=[OpenCLDevice,CPU]]","Activation@56cce520[name=activation,support=[OpenCLDevice,CPU]]","Activation@7da79fad[name=activation,support=[OpenCLDevice,CPU]]","Activation@7ea6d3[name=activation,support=[OpenCLDevice,CPU]]","Activation@245c0664[name=activation,support=[OpenCLDevice,CPU]]","Activation@2960c6a6[name=activation,support=[OpenCLDevice,CPU]]","Activation@220533b3[name=activation,support=[OpenCLDevice,CPU]]","Activation@20fcc1c7[name=activation,support=[OpenCLDevice,CPU]]","Activation@50a071c5[name=activation,support=[OpenCLDevice,CPU]]","Activation@6599066[name=activation,support=[OpenCLDevice,CPU]]","Activation@149b10e7[name=activation,support=[OpenCLDevice,CPU]]","Activation@72d0a354[name=activation,support=[OpenCLDevice,CPU]]","Activation@4ee43a11[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.011 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["Convolution@53ccd995[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.278 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAgent is being instantiated by calling the given implementation with these arguments...","code":["ADAgent agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@508fc07a[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@5903fc92[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@774ccf0f[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@2ee39a30[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@5c224dd3[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@283a7d7b[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}