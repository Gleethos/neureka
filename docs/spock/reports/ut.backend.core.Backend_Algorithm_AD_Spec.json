{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.121 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a bi-elementwise algorithm.","code":["alg instanceof BiElementwise"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = alg.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"alg":["BiElementwise@7c0144a6[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@49593f0c[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@7c7911c[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@3b6e0da7[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@143d286f[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a activation algorithm.","code":["alg instanceof ElementwiseAlgorithm"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"alg":["ElementwiseAlgorithm@152eef85[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@3fdef572[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@33b5efd4[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@5b895f4c[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@7ba6db09[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@5b32f5cb[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@1f18d609[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@4d4486b3[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@bc0182c[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@71a12ab6[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@104e9725[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@367234e3[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@6b236438[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@4ba15cf2[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@5fd888ad[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@5f64782f[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@610e4db4[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@4c1d3069[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@7dc147a7[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@534c4de1[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@44b7c61b[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@3eb0b2a6[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@153d73da[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@37b7bfcf[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@217b945c[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a convolution algorithm.","code":["alg instanceof NDConvolution"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"alg":["NDConvolution@5328fd09[name=convolution,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations have expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first reset the library settings.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a broadcast algorithm.","code":["alg instanceof Broadcast"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"alg":["Broadcast@df78078[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@6173bdc2[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@25a2b675[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@6859320a[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@743551a1[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@1b64f36[name=broadcast,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}