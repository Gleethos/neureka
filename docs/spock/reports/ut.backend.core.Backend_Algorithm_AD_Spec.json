{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.112 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a bi-elementwise algorithm.","code":["alg instanceof BiElementwise"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = alg.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"alg":["BiElementwise@3f536120[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@15a81cfb[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@7ce2c60c[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@7c6278d3[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementwise@2b13dee9[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a activation algorithm.","code":["alg instanceof ElementwiseAlgorithm"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"alg":["ElementwiseAlgorithm@4669eede[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@5778e666[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@6aaf0b44[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@60b4d0ff[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@2c3988bc[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@730bb6[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@2fef19c9[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@2ff45688[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@11ea90fc[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@122ae530[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@35b835f6[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@34ae0daf[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@421ee4ec[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@547debc6[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@14048851[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@43f36f98[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@500c4a95[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@37160729[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@56a902be[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@6e0e0fc2[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@9b413c0[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@4d32a722[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@41f94819[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@2c5748d5[name=activation,support=[CPU,OpenCLDevice]]","ElementwiseAlgorithm@1cc2aeb9[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a convolution algorithm.","code":["alg instanceof NDConvolution"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"alg":["NDConvolution@4cff4cd7[name=convolution,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations have expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first reset the library settings.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a broadcast algorithm.","code":["alg instanceof Broadcast"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"alg":["Broadcast@11441e37[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@8fef33e[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@57fe970e[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@3c32d1b2[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@2d5d56d2[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@119b827c[name=broadcast,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}