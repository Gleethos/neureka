{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.107 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a bi-elementwise algorithm.","code":["alg instanceof BiElementWise"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = alg.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"alg":["BiElementWise@5f494c29[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@cf458a4[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@624e6124[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@3c19cca8[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@55e141a3[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a activation algorithm.","code":["alg instanceof Activation"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"alg":["Activation@3818711c[name=activation,support=[CPU,OpenCLDevice]]","Activation@6fdc8eaf[name=activation,support=[CPU,OpenCLDevice]]","Activation@45306f75[name=activation,support=[CPU,OpenCLDevice]]","Activation@1cbff426[name=activation,support=[CPU,OpenCLDevice]]","Activation@53f5cc1[name=activation,support=[CPU,OpenCLDevice]]","Activation@2fa7502e[name=activation,support=[CPU,OpenCLDevice]]","Activation@9fff10e[name=activation,support=[CPU,OpenCLDevice]]","Activation@4205c701[name=activation,support=[CPU,OpenCLDevice]]","Activation@31a6af84[name=activation,support=[CPU,OpenCLDevice]]","Activation@2b2ad4e5[name=activation,support=[CPU,OpenCLDevice]]","Activation@20120e0f[name=activation,support=[CPU,OpenCLDevice]]","Activation@33323eb5[name=activation,support=[CPU,OpenCLDevice]]","Activation@4ed77e15[name=activation,support=[CPU,OpenCLDevice]]","Activation@17a2a43[name=activation,support=[CPU,OpenCLDevice]]","Activation@33925c0[name=activation,support=[CPU,OpenCLDevice]]","Activation@5a1cf0bf[name=activation,support=[CPU,OpenCLDevice]]","Activation@62e93e9[name=activation,support=[CPU,OpenCLDevice]]","Activation@2997d0ea[name=activation,support=[CPU,OpenCLDevice]]","Activation@301ce9e3[name=activation,support=[CPU,OpenCLDevice]]","Activation@66372aa0[name=activation,support=[CPU,OpenCLDevice]]","Activation@f0e47b4[name=activation,support=[CPU,OpenCLDevice]]","Activation@2450d21a[name=activation,support=[CPU,OpenCLDevice]]","Activation@566eae56[name=activation,support=[CPU,OpenCLDevice]]","Activation@635951a4[name=activation,support=[CPU,OpenCLDevice]]","Activation@6895fa64[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a convolution algorithm.","code":["alg instanceof NDConvolution"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"alg":["NDConvolution@3fe20562[name=convolution,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations have expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first reset the library settings.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a broadcast algorithm.","code":["alg instanceof Broadcast"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"alg":["Broadcast@c419523[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@63e19f54[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@353cd594[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@26bba8bf[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@65088976[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@2bd82c23[name=broadcast,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}