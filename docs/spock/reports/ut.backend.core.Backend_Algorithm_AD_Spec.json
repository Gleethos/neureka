{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.385 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@bc3faef[name=operator,support=[OpenCLDevice,CPU]]","Operator@3c4fae08[name=operator,support=[OpenCLDevice,CPU]]","Operator@13adb109[name=operator,support=[OpenCLDevice,CPU]]","Operator@23450258[name=operator,support=[OpenCLDevice,CPU]]","Operator@56d31126[name=operator,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.048 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@712904b4[name=activation,support=[OpenCLDevice,CPU]]","Activation@986a6db[name=activation,support=[OpenCLDevice,CPU]]","Activation@69751f33[name=activation,support=[OpenCLDevice,CPU]]","Activation@7ef186a9[name=activation,support=[OpenCLDevice,CPU]]","Activation@4c1638b[name=activation,support=[OpenCLDevice,CPU]]","Activation@5ea0db7d[name=activation,support=[OpenCLDevice,CPU]]","Activation@35d7dc91[name=activation,support=[OpenCLDevice,CPU]]","Activation@2dd0a309[name=activation,support=[OpenCLDevice,CPU]]","Activation@6f1ef312[name=activation,support=[OpenCLDevice,CPU]]","Activation@23c576af[name=activation,support=[OpenCLDevice,CPU]]","Activation@4ca07700[name=activation,support=[OpenCLDevice,CPU]]","Activation@4990d4f4[name=activation,support=[OpenCLDevice,CPU]]","Activation@3d6c4bc0[name=activation,support=[OpenCLDevice,CPU]]","Activation@40e49409[name=activation,support=[OpenCLDevice,CPU]]","Activation@792d0aa8[name=activation,support=[OpenCLDevice,CPU]]","Activation@40b2b1e6[name=activation,support=[OpenCLDevice,CPU]]","Activation@7e173b[name=activation,support=[OpenCLDevice,CPU]]","Activation@3105d6da[name=activation,support=[OpenCLDevice,CPU]]","Activation@25a43ddb[name=activation,support=[OpenCLDevice,CPU]]","Activation@420041b1[name=activation,support=[OpenCLDevice,CPU]]","Activation@aedcfc1[name=activation,support=[OpenCLDevice,CPU]]","Activation@70c86193[name=activation,support=[OpenCLDevice,CPU]]","Activation@10024a0[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["Convolution@4bc98460[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.079 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAgent is being instantiated by calling the given implementation with these arguments...","code":["ADAgent agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@6a44ef0d[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@390b62f2[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@127f91c0[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@36abb54d[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@7aa7bdee[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@80c35a9[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}