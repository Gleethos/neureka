{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.146 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["BiElementWise@1fdf1f05[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@163d12b6[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@53a1caf7[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@230cf0f8[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@52e0de64[name=elementwise,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(MutateTsr)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getMut() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@6979553[name=activation,support=[OpenCLDevice,CPU]]","Activation@7503af13[name=activation,support=[OpenCLDevice,CPU]]","Activation@1c4653fc[name=activation,support=[OpenCLDevice,CPU]]","Activation@2dbab776[name=activation,support=[OpenCLDevice,CPU]]","Activation@2840a880[name=activation,support=[OpenCLDevice,CPU]]","Activation@5a85521a[name=activation,support=[OpenCLDevice,CPU]]","Activation@7f6b4669[name=activation,support=[OpenCLDevice,CPU]]","Activation@432b05c2[name=activation,support=[OpenCLDevice,CPU]]","Activation@28feabe9[name=activation,support=[OpenCLDevice,CPU]]","Activation@67992bf9[name=activation,support=[OpenCLDevice,CPU]]","Activation@78c6644[name=activation,support=[OpenCLDevice,CPU]]","Activation@59c90a64[name=activation,support=[OpenCLDevice,CPU]]","Activation@7aca2aaa[name=activation,support=[OpenCLDevice,CPU]]","Activation@1f0af106[name=activation,support=[OpenCLDevice,CPU]]","Activation@4875601b[name=activation,support=[OpenCLDevice,CPU]]","Activation@2b6d0e01[name=activation,support=[OpenCLDevice,CPU]]","Activation@3538e160[name=activation,support=[OpenCLDevice,CPU]]","Activation@64fa168[name=activation,support=[OpenCLDevice,CPU]]","Activation@5412fd76[name=activation,support=[OpenCLDevice,CPU]]","Activation@1aed8aab[name=activation,support=[OpenCLDevice,CPU]]","Activation@66e26088[name=activation,support=[OpenCLDevice,CPU]]","Activation@6096bd9d[name=activation,support=[OpenCLDevice,CPU]]","Activation@763eaf5a[name=activation,support=[OpenCLDevice,CPU]]","Activation@73b0c614[name=activation,support=[OpenCLDevice,CPU]]","Activation@187ec0e6[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["NDConvolution@2e7315eb[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.029 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAction is being instantiated by calling the given implementation with these arguments...","code":["ADAction agent = imp.supplyADActionFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADActionFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@6969f597[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@4ca0637[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@49927c3b[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@68b7e7b9[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@748e61e0[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@2eb07cce[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}