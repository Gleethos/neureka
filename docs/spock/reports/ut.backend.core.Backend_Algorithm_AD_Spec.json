{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.410 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@31a9a8dc[name=operator,support=[OpenCLDevice,CPU]]","Operator@14f325ea[name=operator,support=[OpenCLDevice,CPU]]","Operator@47038632[name=operator,support=[OpenCLDevice,CPU]]","Operator@79aea9e3[name=operator,support=[OpenCLDevice,CPU]]","Operator@29b15d4c[name=operator,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.054 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@570325fb[name=activation,support=[OpenCLDevice,CPU]]","Activation@1c92372d[name=activation,support=[OpenCLDevice,CPU]]","Activation@353dabaa[name=activation,support=[OpenCLDevice,CPU]]","Activation@1ae291[name=activation,support=[OpenCLDevice,CPU]]","Activation@4b6bd159[name=activation,support=[OpenCLDevice,CPU]]","Activation@75dd997c[name=activation,support=[OpenCLDevice,CPU]]","Activation@75f0dc9f[name=activation,support=[OpenCLDevice,CPU]]","Activation@47882a3c[name=activation,support=[OpenCLDevice,CPU]]","Activation@25f19127[name=activation,support=[OpenCLDevice,CPU]]","Activation@16a979c8[name=activation,support=[OpenCLDevice,CPU]]","Activation@5b6b7fa[name=activation,support=[OpenCLDevice,CPU]]","Activation@6e3c688[name=activation,support=[OpenCLDevice,CPU]]","Activation@34c2e0ab[name=activation,support=[OpenCLDevice,CPU]]","Activation@df195ee[name=activation,support=[OpenCLDevice,CPU]]","Activation@3a036f94[name=activation,support=[OpenCLDevice,CPU]]","Activation@85e09cb[name=activation,support=[OpenCLDevice,CPU]]","Activation@44f43cdf[name=activation,support=[OpenCLDevice,CPU]]","Activation@7e9d9c6b[name=activation,support=[OpenCLDevice,CPU]]","Activation@3a6f3d0b[name=activation,support=[OpenCLDevice,CPU]]","Activation@2222e0e8[name=activation,support=[OpenCLDevice,CPU]]","Activation@7961769d[name=activation,support=[OpenCLDevice,CPU]]","Activation@e9f7bea[name=activation,support=[OpenCLDevice,CPU]]","Activation@6a9621b0[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["Convolution@1d923131[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.079 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAgent is being instantiated by calling the given implementation with these arguments...","code":["ADAgent agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@616d2252[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@5014cbe0[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@d5c6823[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@7ab9874[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@2084f686[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@59b17168[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}