{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.675 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.507 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@27d023c8[name=operator,support=[OpenCLDevice,CPU]]","Operator@7ab7f67b[name=operator,support=[OpenCLDevice,CPU]]","Operator@2e0db7ea[name=operator,support=[OpenCLDevice,CPU]]","Operator@4452bbbe[name=operator,support=[OpenCLDevice,CPU]]","Operator@3204de38[name=operator,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.018 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@854a24[name=activation,support=[OpenCLDevice,CPU]]","Activation@3dc1925f[name=activation,support=[OpenCLDevice,CPU]]","Activation@6727da68[name=activation,support=[OpenCLDevice,CPU]]","Activation@df29a8b[name=activation,support=[OpenCLDevice,CPU]]","Activation@1f6c1a3e[name=activation,support=[OpenCLDevice,CPU]]","Activation@45efe6be[name=activation,support=[OpenCLDevice,CPU]]","Activation@298e5af0[name=activation,support=[OpenCLDevice,CPU]]","Activation@44c34d5d[name=activation,support=[OpenCLDevice,CPU]]","Activation@7869310b[name=activation,support=[OpenCLDevice,CPU]]","Activation@7e102c49[name=activation,support=[OpenCLDevice,CPU]]","Activation@629793f3[name=activation,support=[OpenCLDevice,CPU]]","Activation@3f1fdfd0[name=activation,support=[OpenCLDevice,CPU]]","Activation@7af3fbca[name=activation,support=[OpenCLDevice,CPU]]","Activation@14b5d1f0[name=activation,support=[OpenCLDevice,CPU]]","Activation@14b3dec2[name=activation,support=[OpenCLDevice,CPU]]","Activation@3e49cce5[name=activation,support=[OpenCLDevice,CPU]]","Activation@5d01fdf7[name=activation,support=[OpenCLDevice,CPU]]","Activation@256bfd9d[name=activation,support=[OpenCLDevice,CPU]]","Activation@56e5a309[name=activation,support=[OpenCLDevice,CPU]]","Activation@69fa03d4[name=activation,support=[OpenCLDevice,CPU]]","Activation@5ea89c94[name=activation,support=[OpenCLDevice,CPU]]","Activation@48c4b34a[name=activation,support=[OpenCLDevice,CPU]]","Activation@39b8786[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).algorithm(imp).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["Convolution@5bdcd2de[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.037 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAgent is being instantiated by calling the given implementation with these arguments...","code":["ADAgent agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADAgentFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@33efa263[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@64474e19[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@59d898b8[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@71cf5aff[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@4a1f0b44[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@280270be[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}