{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.133 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock(ExecutionCall)","call.inputs() >> new Tsr<?>[0]"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = imp.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["BiElementWise@5a472b33[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@5fde61b8[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@3c27099e[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@1c480a03[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@7d93961b[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock(Function)","def derivative = Mock(Tsr)","def mutate = Mock(Tsr.Unsafe)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getUnsafe() >> mutate"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"imp":["Activation@c9de998[name=activation,support=[CPU,OpenCLDevice]]","Activation@2baeae0d[name=activation,support=[CPU,OpenCLDevice]]","Activation@5932074f[name=activation,support=[CPU,OpenCLDevice]]","Activation@3bbb4144[name=activation,support=[CPU,OpenCLDevice]]","Activation@52eb1afe[name=activation,support=[CPU,OpenCLDevice]]","Activation@c965a83[name=activation,support=[CPU,OpenCLDevice]]","Activation@296cee84[name=activation,support=[CPU,OpenCLDevice]]","Activation@4b213ee0[name=activation,support=[CPU,OpenCLDevice]]","Activation@d58fa87[name=activation,support=[CPU,OpenCLDevice]]","Activation@7541fa44[name=activation,support=[CPU,OpenCLDevice]]","Activation@162e24c3[name=activation,support=[CPU,OpenCLDevice]]","Activation@5a9c3cf[name=activation,support=[CPU,OpenCLDevice]]","Activation@60bde365[name=activation,support=[CPU,OpenCLDevice]]","Activation@19911ecc[name=activation,support=[CPU,OpenCLDevice]]","Activation@52e976e5[name=activation,support=[CPU,OpenCLDevice]]","Activation@60c85fe1[name=activation,support=[CPU,OpenCLDevice]]","Activation@30b88f7[name=activation,support=[CPU,OpenCLDevice]]","Activation@a3fc762[name=activation,support=[CPU,OpenCLDevice]]","Activation@30b15ed[name=activation,support=[CPU,OpenCLDevice]]","Activation@1d78a5e5[name=activation,support=[CPU,OpenCLDevice]]","Activation@5995c894[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"when","text":"","code":["var suitability = imp.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = imp.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"imp":["NDConvolution@3b27a992[name=convolution,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations behave as expected.",
      "result":"PASS",
      "duration":"0.031 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock Function.","code":["def function = Mock( Function )","def derivative = Mock( Tsr )","def ndConf = Mock(NDConfiguration)","function.derive(*_) >> derivative","function.executeDerive(*_) >> derivative","derivative.getNDConf() >> ndConf","ndConf.shape() >> [1, 2]","derivative.getItemType() >> Float","derivative.itemType() >> Float"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["def call = Mock( ExecutionCall )","def arg = Mock(Arg.Derivative)","call.get(Arg.Derivative.class) >> arg","call.autogradMode() >> AutoDiffMode.FORWARD_AND_BACKWARD"]},

        {"kind":"when","text":"A new ADAction is being instantiated by calling the given implementation with these arguments...","code":["ADAction agent = imp.supplyADActionFor(function, call)"]},

        {"kind":"then","text":"An exception is being thrown because implementations of type \"Broadcast\" can only perform reverse mode AD!","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Broadcast implementation does not support forward-AD!\""]},

        {"kind":"when","text":"The agent generator is called once more with the forward flag set to false...","code":["agent = imp.supplyADActionFor(function, call)"]},

        {"kind":"then","text":"","code":["(0.._) * call.inputs() >> new Tsr[]{derivative, derivative}","(0.._) * call.input(_) >> derivative","(1.._) * call.autogradMode() >> AutoDiffMode.BACKWARD_ONLY"]},

        {"kind":"and","text":"No exception is being thrown and the agent is configured to perform backward-AD.","code":["agent.partialDerivative().get() == derivative || agent.partialDerivative().get().toString({it.isMultiline=false}) == \"(1x2):[  0.0 ,   0.0 ]\""]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"imp":["Broadcast@6a6362c4[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@e663dd8[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@378b839d[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@8b1c96[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@3b226449[name=broadcast,support=[CPU,OpenCLDevice]]","Broadcast@13a0d925[name=broadcast,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}