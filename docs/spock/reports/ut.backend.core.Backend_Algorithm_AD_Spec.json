{
  "className":"ut.backend.core.Backend_Algorithm_AD_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.103 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a bi-elementwise algorithm.","code":["alg instanceof BiElementWise"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"A auto diff mode is being created by every algorithm...","code":["AutoDiffMode mode = alg.autoDiffModeFrom( call )"]},

        {"kind":"then","text":"The agent is configured to perform forward-AD and it contains the derivative generated by the function!","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"alg":["BiElementWise@5ab198ab[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@6a37bccd[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@c5a83f1[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@526bf7a7[name=elementwise,support=[OpenCLDevice,CPU]]","BiElementWise@3bdba5ca[name=elementwise,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations behave as expected.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a activation algorithm.","code":["alg instanceof Activation"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Activation\".","code":{"alg":["Activation@3eb4069e[name=activation,support=[OpenCLDevice,CPU]]","Activation@6c5efce5[name=activation,support=[OpenCLDevice,CPU]]","Activation@5338f5ad[name=activation,support=[OpenCLDevice,CPU]]","Activation@11390dac[name=activation,support=[OpenCLDevice,CPU]]","Activation@19c59bd1[name=activation,support=[OpenCLDevice,CPU]]","Activation@59cf6dc[name=activation,support=[OpenCLDevice,CPU]]","Activation@491560a4[name=activation,support=[OpenCLDevice,CPU]]","Activation@cf458a4[name=activation,support=[OpenCLDevice,CPU]]","Activation@4c5124b1[name=activation,support=[OpenCLDevice,CPU]]","Activation@68fe10fa[name=activation,support=[OpenCLDevice,CPU]]","Activation@69276bd8[name=activation,support=[OpenCLDevice,CPU]]","Activation@2352ff87[name=activation,support=[OpenCLDevice,CPU]]","Activation@1f740804[name=activation,support=[OpenCLDevice,CPU]]","Activation@5d42e1e0[name=activation,support=[OpenCLDevice,CPU]]","Activation@4fc9e465[name=activation,support=[OpenCLDevice,CPU]]","Activation@69598fb4[name=activation,support=[OpenCLDevice,CPU]]","Activation@612dac30[name=activation,support=[OpenCLDevice,CPU]]","Activation@42e8606c[name=activation,support=[OpenCLDevice,CPU]]","Activation@6fdc8eaf[name=activation,support=[OpenCLDevice,CPU]]","Activation@45306f75[name=activation,support=[OpenCLDevice,CPU]]","Activation@4a1c488f[name=activation,support=[OpenCLDevice,CPU]]","Activation@1cbff426[name=activation,support=[OpenCLDevice,CPU]]","Activation@53f5cc1[name=activation,support=[OpenCLDevice,CPU]]","Activation@2fa7502e[name=activation,support=[OpenCLDevice,CPU]]","Activation@4149ff7[name=activation,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The current Neureka instance is being reset.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a convolution algorithm.","code":["alg instanceof NDConvolution"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of Operation implementations of type \"Convolution\".","code":{"alg":["NDConvolution@48532b18[name=convolution,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Broadcast implementations have expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first reset the library settings.","code":["Neureka.get().reset()"]},

        {"kind":"and","text":"A mock ExecutionCall.","code":["var call = ExecutionCall.of().running(Mock(Operation)).on(Mock(Device))"]},

        {"kind":"expect","text":"The algorithm is not null.","code":["alg != null"]},

        {"kind":"and","text":"The algorithm is a broadcast algorithm.","code":["alg instanceof Broadcast"]},

        {"kind":"and","text":"It has a non empty name and string representation.","code":["!alg.name.isEmpty()","!alg.toString().isEmpty()"]},

        {"kind":"when","text":"","code":["var suitability = alg.isSuitableFor(call)"]},

        {"kind":"then","text":"","code":["0 <= suitability && suitability <= 1"]},

        {"kind":"when","text":"","code":["var mode = alg.autoDiffModeFrom(call)"]},

        {"kind":"then","text":"","code":["mode != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Convolution\".","code":{"alg":["Broadcast@20120e0f[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@5ecf347a[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@240d34d2[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@68cc7ffa[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@4889013a[name=broadcast,support=[OpenCLDevice,CPU]]","Broadcast@33323eb5[name=broadcast,support=[OpenCLDevice,CPU]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}