{
  "className":"ut.ndas.Nda_Assign_Spec",
  "title":"Nda Inline Assignment",
  "narrative":"In this specification we cover the behaviour of nda's with respect to the assignment operation\n    as well as the assignment of individual Nda items.",
  "subjects":["neureka.Nda"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can use the \"mut\" API to assign the contents of one nd-array into another one.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We have two nd-arrays:","code":["var a = Nda.of('x', 'y', 'z')","var b = Nda.of('1', '2', '3')"]},

        {"kind":"when","text":"We assign the contents of \"b\" into \"a\" using the \"mut\" API:","code":["a.mut.assign( b )"]},

        {"kind":"then","text":"The contents of \"a\" should be the same as the contents of \"b\":","code":["a.items == b.items"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Assignment can be easily achieved through subscription operators.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"An nda of ints with shape (2, 3).","code":["var n = Nda.of(Integer).withShape(2, 3).andFill(1..6)"]},

        {"kind":"and","text":"An nda of ints with shape (1, 2).","code":["var a = Nda.of(Integer).withShape(1, 2).andFill(42, 42)"]},

        {"kind":"when","text":"We assign the nda a to the nda n.","code":["n.mut[0, 0..1] = a"]},

        {"kind":"then","text":"The nda n has the expected values.","code":["n.items == [42, 42, 3, 4, 5, 6]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can assign one slice into another one.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Using the 'assign' operation on slices should be handled with care,\n            since the operation has side effects on the underlying data array\n            which is shared by both the slice and its parent.\n            Use the 'copy' operation on slices if you want to avoid this.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"Two nd-arrays of ints with shape (5).","code":["var n1 = Nda.of(Byte).vector(1..5)","var n2 = Nda.of(Byte).vector(6..10)"]},

        {"kind":"when","text":"We create to very simple slices which are simply the first 3 items of the above vectors.","code":["var s1 = n1[0..2]","var s2 = n2[0..2]"]},

        {"kind":"then","text":"The slices will have the expected state.","code":["s1.items == [1, 2, 3]","s2.items == [6, 7, 8]"]},

        {"kind":"when","text":"We now assign the first slice into the second one.","code":["s2.mut.assign(s1)"]},

        {"kind":"then","text":"Both slices will have the same numbers \"1, 2, 3\" in them.","code":["s1.items == [1, 2, 3]","s2.items == [1, 2, 3]"]},

        {"kind":"and","text":"The 2 original vectors will also both have the same numbers \"1, 2, 3\" in them.","code":["n1.items == [1, 2, 3, 4, 5]","n2.items == [1, 2, 3, 9, 10]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}