{
  "className":"ut.dtype.NumericType_Spec",
  "title":"The NumericType and its implementations model their respective numeric data types.",
  "narrative":"This specification covers the behavior of the NumericType interface\n    which is responsible for modelling numeric data types which may or may not be native to the JVM. \n    These implementations however do not model them in the traditional OO style\n    but merely expose useful utility method for converting and representing \n    these numeric data types using JVM types.",
  "subjects":["neureka.dtype.NumericType"],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.030 seconds"
  },
  "headers":["\n            This specification covers implementations\n            of the \"interface neureka.dtype.NumericType\" interface.\n            Such classes are responsible for\n            representing all numeric types including the ones\n            which are foreign to the JVM, namely : \n            unsigned integer types.\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"NumericType implementations return their expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The type instance describes the expected number of bytes.","code":["type.numberOfBytes() == bytes"]},

        {"kind":"and","text":"It describes the expected JVM target type.","code":["type.targetType() == target"]},

        {"kind":"and","text":"It also describes the expected array type of said JVM target type.","code":["type.targetArrayType() == array"]},

        {"kind":"and","text":"The instance knows if it is signed or not.","code":["type.signed() == signed"]},

        {"kind":"where","text":"The following data is being used: ","code":{"type":["new I8()","new UI8()","new I16()","new UI16()","new I32()","new UI32()","new I64()","new UI64()","new F32()","new F64()"],"bytes":["1","1","2","2","4","4","8","8","4","8"],"target":["Byte.class","Short.class","Short.class","Integer.class","Integer.class","Long.class","Long.class","BigInteger.class","Float.class","Double.class"],"array":["byte[].class","short[].class","short[].class","int[].class","int[].class","long[].class","long[].class","BigInteger[].class","float[].class","double[].class"],"signed":["true","false","true","false","true","false","true","false","true","true"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"NumericType implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def result = type.foreignHolderBytesToTarget( data as byte[] )"]},

        {"kind":"expect","text":"The array of bytes  is being converted to a fitting JVM type.","code":["result == converted"]},

        {"kind":"and","text":"The original byte array can be recreated by converting with the inverse...","code":["type.targetToForeignHolderBytes(result) == ( data as byte[] )"]},

        {"kind":"where","text":"The following NumericType instances and bytes are being used :","code":{"type":["new I8()","new UI8()","new I16()","new I16()","new I16()","new I16()","new UI16()","new UI16()","new UI16()","new UI16()","new I32()","new I32()","new UI32()","new UI32()","new I64()","new I64()","new UI64()","new UI64()"],"data":["[-23]","[-23]","[2, 3]","[-16, -53]","[16, -53]","[-1, -1]","[2, 3]","[-16, -53]","[16, -53]","[-1, -1]","[22,-2, 3,-4]","[-22,-2, -3,-4]","[22,-2, 3,-4]","[-22,-2, -3,-4]","[99, 2, 1, 35, 2, 5, 37, 22]","[-99, 2, 1, -35, 2,5,-37,22]","[99, 2, 1, 35, 2, 5, 37, 22]","[-99, 2, 1, -35, 2,5,-37,22]"],"converted":["-23","233","new BigInteger(new byte[]{2, 3}).shortValueExact()","((short)-3893)","4299","-1","new BigInteger(new byte[]{2, 3}).shortValueExact()","(int)(0x10000 + ((short)-3893))","4_299","65_535","385_745_916","-352_387_588","385_745_916","3_942_579_708","7_134_266_009_577_661_718","- 7_133_136_811_068_105_962","7_134_266_009_577_661_718","11_313_607_262_641_445_654"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Conversion goes both ways and produces expected numeric values.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We apply a filter in order to guarantee that the right data type is being used.","code":["original = [","        'UI8' : { o -> o as Byte },","        'UI16': { o -> o as Short },","        'UI32': { o -> o as Integer },","        'UI64': { o -> o as Long },","        'I8'  : { o -> o as Byte },","        'I16' : { o -> o as Short },","        'I32' : { o -> o as Integer },","        'I64' : { o -> o as Long },","        'F32' : { o -> o as Float },","        'F64' : { o -> o as Double }","][ num.class.simpleName ](original)"]},

        {"kind":"and","text":"The convert the raw type (might represent unsigned value) to a JVM compatible target type...","code":["def resultTarget = num.foreignHolderBytesToTarget( rawOriginal )"]},

        {"kind":"and","text":"Then convert this result to the true byte array of the value...","code":["def backToRaw = num.targetToForeignHolderBytes( resultTarget )"]},

        {"kind":"then","text":"This produces the expected values which express the following relationships:","code":["resultTarget == target","backToRaw == rawOriginal","num.toTarget( original ) == target","num.convertToHolder(target) == original"]},

        {"kind":"and","text":"The numeric type instance can perform array conversion.","code":["num.convertToTargetArray( rawOriginal as double[] ) == rawOriginal // Groovy automatically tests values","num.convertToTargetArray( rawOriginal as float[] ) == rawOriginal // ...despite difference types...","num.convertToTargetArray( rawOriginal as int[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as short[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as long[] ) == rawOriginal"]},

        {"kind":"where","text":"The following \"NumericType\" implementation instances and numeric data is being used: ","code":{"num":["new UI8()","new UI16()","new UI32()","new UI64()","new I8()","new I16()","new I32()","new I64()","new F32()","new F64()","new F32()","new F64()"],"original":["-3","-3","-3","-3","-3","-3","-3","-3","-0.3","-0.3","-5432.39928","-5432.39928"],"rawOriginal":["[-3]","[255, 253]","[255, 255, 255, 253]","[255, 255, 255, 255, 255, 255, 255, 253]","[-3]","[255, 253]","[255, 255, 255, 253]","[255, 255, 255, 255, 255, 255, 255, 253]","[-66, -103, -103, -102]","[-65, -45, 51, 51, 51, 51, 51, 51]","[-59, -87, -61, 50]","[-64, -75, 56, 102, 55, 54, -51, -14]"],"target":["255 - 2","65_535 - 2","4_294_967_295 - 2","18_446_744_073_709_551_615 - 2","- 3","- 3","- 3","- 3","- 0.3 as Float","- 0.3 as Double","-5432.39928 as Float","-5432.39928 as Double"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"NumericType conversion to holder types yields expected results.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def result = num.convertToHolder( from )"]},

        {"kind":"then","text":"","code":["result == expected"]},

        {"kind":"and","text":"","code":["result.class == expected.class"]},

        {"kind":"and","text":"","code":["result.class == holderType"]},

        {"kind":"and","text":"","code":["num.holderType() == holderType"]},

        {"kind":"and","text":"","code":["num.holderArrayType() == holderArrayType"]},

        {"kind":"where","text":"","code":{"num":["new I32()","new I32()","new I32()","new I32()","new I32()","new I32()","new I16()","new I16()","new I16()","new I16()","new I16()","new I16()","new I8()","new I8()","new I8()","new I8()","new I8()","new I8()"],"from":["3 as Byte","8 as Integer","863.834 as Double","2 as Short","9 as Long","23.422 as Float","3 as Byte","8 as Integer","863.834 as Double","2 as Short","9 as Long","23.422 as Float","3 as Byte","8 as Integer","863.834 as Double","2 as Short","9 as Long","23.422 as Float"],"expected":["3 as Integer","8 as Integer","863 as Integer","2 as Integer","9 as Integer","23 as Integer","3 as Short","8 as Short","863 as Short","2 as Short","9 as Short","23 as Short","3 as Byte","8 as Byte","863 as Byte","2 as Byte","9 as Byte","23 as Byte"],"holderType":["Integer.class","Integer.class","Integer.class","Integer.class","Integer.class","Integer.class","Short.class","Short.class","Short.class","Short.class","Short.class","Short.class","Byte.class","Byte.class","Byte.class","Byte.class","Byte.class","Byte.class"],"holderArrayType":["int[].class","int[].class","int[].class","int[].class","int[].class","int[].class","short[].class","short[].class","short[].class","short[].class","short[].class","short[].class","byte[].class","byte[].class","byte[].class","byte[].class","byte[].class","byte[].class"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}