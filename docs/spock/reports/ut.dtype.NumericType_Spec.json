{
  "className":"ut.dtype.NumericType_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.143 seconds"
  },

  "title":"The NumericType and its implementations model their respective numeric data types.",
  "narrative":"This specification covers the behavior of the NumericType interface\u000a which is responsible for modelling numeric data types which may or may not be native to the JVM. \u000a These implementations however do not model them in the traditional OO style\u000a but merely expose useful utility method for converting and representing \u000a these numeric data types using JVM types.",
  "headers":["\\u000a This specification covers implementations\\u000a of the \\\"interface neureka.dtype.NumericType\\\" interface.\\u000a Such classes are responsible for\\u000a representing all numeric types including the ones\\u000a which are foreign to the JVM, namely : \\u000a unsigned integer types.\\u000a"],"tags":{},"see":[],
  "features":[ 
    {
      "id":"NumericType implementations return their expected properties.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The type instance describes the expected number of bytes.","code":["type.numberOfBytes() == bytes"]},

        {"kind":"and","text":"It describes the expected JVM target type.","code":["type.targetType() == target"]},

        {"kind":"and","text":"It also describes the expected array type of said JVM target type.","code":["type.targetArrayType() == array"]},

        {"kind":"and","text":"The instance knows if it is signed or not.","code":["type.signed() == signed"]},

        {"kind":"where","text":"The following data is being used:","code":{"type":["neureka.dtype.custom.I8@c091add","neureka.dtype.custom.UI8@27f71379","neureka.dtype.custom.I16@272c9357","neureka.dtype.custom.UI16@46fb3b93","neureka.dtype.custom.I32@7f8738e3","neureka.dtype.custom.UI32@42b21667","neureka.dtype.custom.I64@64a9a688","neureka.dtype.custom.UI64@176009e1","neureka.dtype.custom.F32@3d275841","neureka.dtype.custom.F64@3688df81"],"bytes":["1","1","2","2","4","4","8","8","4","8"],"target":["class java.lang.Byte","class java.lang.Short","class java.lang.Short","class java.lang.Integer","class java.lang.Integer","class java.lang.Long","class java.lang.Long","class java.math.BigInteger","class java.lang.Float","class java.lang.Double"],"array":["class [B","class [S","class [S","class [I","class [I","class [J","class [J","class [Ljava.math.BigInteger;","class [F","class [D"],"signed":["true","false","true","false","true","false","true","false","true","true"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"NumericType implementations behave as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def result = type.foreignHolderBytesToTarget( data as byte[] )"]},

        {"kind":"expect","text":"The array of bytes is being converted to a fitting JVM type.","code":["result == converted"]},

        {"kind":"and","text":"The original byte array can be recreated by converting with the inverse...","code":["type.targetToForeignHolderBytes(result) == ( data as byte[] )"]},

        {"kind":"where","text":"The following NumericType instances and bytes are being used :","code":{"type":["neureka.dtype.custom.I8@3ae3af19","neureka.dtype.custom.UI8@79bd5e1b","neureka.dtype.custom.I16@65d37f6","neureka.dtype.custom.I16@74bc5421","neureka.dtype.custom.I16@348247ed","neureka.dtype.custom.I16@557b7400","neureka.dtype.custom.UI16@63f407b7","neureka.dtype.custom.UI16@6a3982df","neureka.dtype.custom.UI16@49d9ef30","neureka.dtype.custom.UI16@42d74143","neureka.dtype.custom.I32@527784b6","neureka.dtype.custom.I32@3e5b7f20","neureka.dtype.custom.UI32@ee301c8","neureka.dtype.custom.UI32@5a747013","neureka.dtype.custom.I64@5791a9cb","neureka.dtype.custom.I64@474de52a","neureka.dtype.custom.UI64@2e73ce05","neureka.dtype.custom.UI64@60f0af4a"],"data":["[-23]","[-23]","[2, 3]","[-16, -53]","[16, -53]","[-1, -1]","[2, 3]","[-16, -53]","[16, -53]","[-1, -1]","[22, -2, 3, -4]","[-22, -2, -3, -4]","[22, -2, 3, -4]","[-22, -2, -3, -4]","[99, 2, 1, 35, 2, 5, 37, 22]","[-99, 2, 1, -35, 2, 5, -37, 22]","[99, 2, 1, 35, 2, 5, 37, 22]","[-99, 2, 1, -35, 2, 5, -37, 22]"],"converted":["-23","233","515","-3893","4299","-1","515","61643","4299","65535","385745916","-352387588","385745916","3942579708","7134266009577661718","-7133136811068105962","7134266009577661718","11313607262641445654"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Conversion goes both ways and produces expected numeric values.",
      "result":"PASS",
      "duration":"0.019 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We apply a filter in order to guarantee that the right data type is being used.","code":["original = [","        'UI8' : { o -> o as Byte },","        'UI16': { o -> o as Short },","        'UI32': { o -> o as Integer },","        'UI64': { o -> o as Long },","        'I8'  : { o -> o as Byte },","        'I16' : { o -> o as Short },","        'I32' : { o -> o as Integer },","        'I64' : { o -> o as Long },","        'F32' : { o -> o as Float },","        'F64' : { o -> o as Double }","][ num.class.simpleName ](original)"]},

        {"kind":"and","text":"The convert the raw type (might represent unsigned value) to a JVM compatible target type...","code":["def resultTarget = num.foreignHolderBytesToTarget( rawOriginal )"]},

        {"kind":"and","text":"Then convert this result to the true byte array of the value...","code":["def backToRaw = num.targetToForeignHolderBytes( resultTarget )"]},

        {"kind":"then","text":"This produces the expected values which express the following relationships:","code":["resultTarget == target","backToRaw == rawOriginal","num.toTarget( original ) == target","num.convertToHolder(target) == original"]},

        {"kind":"and","text":"The numeric type instance can perform array conversion.","code":["num.convertToTargetArray( rawOriginal as double[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as float[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as int[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as short[] ) == rawOriginal","num.convertToTargetArray( rawOriginal as long[] ) == rawOriginal"]},

        {"kind":"where","text":"The following \"NumericType\" implementation instances and numeric data is being used:","code":{"num":["neureka.dtype.custom.UI8@668e80a2","neureka.dtype.custom.UI16@e361d62","neureka.dtype.custom.UI32@6928b96b","neureka.dtype.custom.UI64@112c682f","neureka.dtype.custom.I8@4c7168ae","neureka.dtype.custom.I16@5e745148","neureka.dtype.custom.I32@24ae5fce","neureka.dtype.custom.I64@3ddfd4d0","neureka.dtype.custom.F32@1bd107f3","neureka.dtype.custom.F64@1d37dd10","neureka.dtype.custom.F32@5f8ffbd0","neureka.dtype.custom.F64@1e60d345"],"original":["-3","-3","-3","-3","-3","-3","-3","-3","-0.3","-0.3","-5432.39928","-5432.39928"],"rawOriginal":["[-3]","[-1, -3]","[-1, -1, -1, -3]","[-1, -1, -1, -1, -1, -1, -1, -3]","[-3]","[-1, -3]","[-1, -1, -1, -3]","[-1, -1, -1, -1, -1, -1, -1, -3]","[-66, -103, -103, -102]","[-65, -45, 51, 51, 51, 51, 51, 51]","[-59, -87, -61, 50]","[-64, -75, 56, 102, 55, 54, -51, -14]"],"target":["253","65533","4294967293","18446744073709551613","-3","-3","-3","-3","-0.3","-0.3","-5432.3994","-5432.39928"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"NumericType conversion to holder types yields expected results.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["def result = num.convertToHolder( from )"]},

        {"kind":"then","text":"","code":["result == expected"]},

        {"kind":"and","text":"","code":["result.class == expected.class"]},

        {"kind":"and","text":"","code":["result.class == holderType"]},

        {"kind":"and","text":"","code":["num.holderType() == holderType"]},

        {"kind":"and","text":"","code":["num.holderArrayType() == holderArrayType"]},

        {"kind":"where","text":"","code":{"num":["neureka.dtype.custom.I32@43540bce","neureka.dtype.custom.I32@3ddb1c47","neureka.dtype.custom.I32@3da1c5b2","neureka.dtype.custom.I32@116c9f30","neureka.dtype.custom.I32@32ea1a99","neureka.dtype.custom.I32@372c7c43","neureka.dtype.custom.I16@7a1029d3","neureka.dtype.custom.I16@b126ca4","neureka.dtype.custom.I16@eb1ba59","neureka.dtype.custom.I16@fa43ca1","neureka.dtype.custom.I16@5bdb6ce3","neureka.dtype.custom.I16@3a1d7336","neureka.dtype.custom.I8@39af2801","neureka.dtype.custom.I8@6cadc0bf","neureka.dtype.custom.I8@a0af2ac","neureka.dtype.custom.I8@4f04d431","neureka.dtype.custom.I8@4e6a5d9a","neureka.dtype.custom.I8@284b233c"],"from":["3","8","863.834","2","9","23.422","3","8","863.834","2","9","23.422","3","8","863.834","2","9","23.422"],"expected":["3","8","863","2","9","23","3","8","863","2","9","23","3","8","95","2","9","23"],"holderType":["class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte"],"holderArrayType":["class [I","class [I","class [I","class [I","class [I","class [I","class [S","class [S","class [S","class [S","class [S","class [S","class [B","class [B","class [B","class [B","class [B","class [B"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}