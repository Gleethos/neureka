{
  "className":"ut.backend.core.Backend_Algorithm_Implementation_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.155 seconds"
  },
  "headers":["\n                   This specification defines the behavior of implementations of the \n                   Algorithm interface! <br> \n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations have expected Executor instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Host- and CL- executor instance are being fetched...","code":["def hostExecutor = imp.getImplementationFor( CPU.class )","def clExecutor = imp.getImplementationFor( OpenCLDevice.class )"]},

        {"kind":"then","text":"The variables containing the executor instances are not null.","code":["hostExecutor != null","clExecutor != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@ba7633a[name=operator,support=[CPU,OpenCLDevice]]","Operator@3ab3f1e5[name=operator,support=[CPU,OpenCLDevice]]","Operator@217e874[name=operator,support=[CPU,OpenCLDevice]]","Operator@75254469[name=operator,support=[CPU,OpenCLDevice]]","Operator@40881deb[name=operator,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations have expected Executor instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Host- and CL- executor instance are being fetched...","code":["def hostExecutor = imp.getImplementationFor( CPU.class )","def clExecutor = imp.getImplementationFor( OpenCLDevice.class )"]},

        {"kind":"then","text":"The variables containing the executor instances are not null.","code":["hostExecutor != null","clExecutor != null"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Activation@234446ff[name=activation,support=[CPU,OpenCLDevice]]","Activation@792a5e0a[name=activation,support=[CPU,OpenCLDevice]]","Activation@21a66ee9[name=activation,support=[CPU,OpenCLDevice]]","Activation@3683876c[name=activation,support=[CPU,OpenCLDevice]]","Activation@133a9ff1[name=activation,support=[CPU,OpenCLDevice]]","Activation@36d345b3[name=activation,support=[CPU,OpenCLDevice]]","Activation@36863ae[name=activation,support=[CPU,OpenCLDevice]]","Activation@5250c800[name=activation,support=[CPU,OpenCLDevice]]","Activation@6f0bdfda[name=activation,support=[CPU,OpenCLDevice]]","Activation@7b18b858[name=activation,support=[CPU,OpenCLDevice]]","Activation@33269ec3[name=activation,support=[CPU,OpenCLDevice]]","Activation@20a608ce[name=activation,support=[CPU,OpenCLDevice]]","Activation@270ced99[name=activation,support=[CPU,OpenCLDevice]]","Activation@21e5a722[name=activation,support=[CPU,OpenCLDevice]]","Activation@32fd66e4[name=activation,support=[CPU,OpenCLDevice]]","Activation@34f38b74[name=activation,support=[CPU,OpenCLDevice]]","Activation@7ddd645c[name=activation,support=[CPU,OpenCLDevice]]","Activation@516aa656[name=activation,support=[CPU,OpenCLDevice]]","Activation@bdb8634[name=activation,support=[CPU,OpenCLDevice]]","Activation@30df1508[name=activation,support=[CPU,OpenCLDevice]]","Activation@6d2826a7[name=activation,support=[CPU,OpenCLDevice]]","Activation@bd4f177[name=activation,support=[CPU,OpenCLDevice]]","Activation@328acf51[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"HostExecutors of Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.049 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mock instances to simulate an ExecutionCall instance.","code":["var call = Mock( ExecutionCall )","var device = Mock( CPU )","var tensor = Mock( Tsr )","var unsafe = Mock(Tsr.Unsafe)","var ndConf = Mock(NDConfiguration)","var hostExecutor = imp.getImplementationFor( CPU.class )","var nativeExecutor = Mock( CPU.JVMExecutor )"]},

        {"kind":"when","text":"Host-executor instance is being called...","code":["hostExecutor.run( call )"]},

        {"kind":"then","text":"The mock objects are being called as expected.","code":["(0.._) * tensor.getUnsafe() >> unsafe","(1.._) * call.getDevice() >> device","1 * device.getExecutor() >> nativeExecutor","1 * nativeExecutor.threaded( _, _ )","(0.._) * call.inputs() >> new Tsr[]{ tensor, tensor, tensor }","(0.._) * call.input({it >= 0 && it <= 2}) >> tensor","(0.._) * call.input( Number.class, 0 ) >> tensor","(0.._) * call.input(0) >> tensor","(0.._) * call.input( Number.class, 1 ) >> tensor","(1.._) * tensor.size() >> 0","(0.._) * tensor.itemType >> Double","(0.._) * tensor.getDataAs(double[]) >> new double[0]","(0.._) * unsafe.getData() >> new double[0]","(0.._) * unsafe.getDataAs(double[]) >> new double[0]","(0.._) * unsafe.getDataForWriting(double[]) >> new double[0]","(1.._) * tensor.getNDConf() >> ndConf","(1.._) * ndConf.isSimple() >> false"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@ba7633a[name=operator,support=[CPU,OpenCLDevice]]","Operator@3ab3f1e5[name=operator,support=[CPU,OpenCLDevice]]","Operator@217e874[name=operator,support=[CPU,OpenCLDevice]]","Operator@75254469[name=operator,support=[CPU,OpenCLDevice]]","Operator@40881deb[name=operator,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"CLExecutors of Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.077 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mock instances to simulate an ExecutionCall instance.","code":["var call = Mock( ExecutionCall )","var device = Mock( OpenCLDevice )","var tensor = Mock( Tsr )","var clExecutor = imp.getImplementationFor( OpenCLDevice.class )","var kernel = Mock( KernelCaller )"]},

        {"kind":"when","text":"CL-executor instance is being called...","code":["clExecutor.run( call )"]},

        {"kind":"then","text":"The mock objects are being called as expected.","code":["(0.._) * call.arity() >> 3","(1.._) * call.input( Number.class, 0) >> tensor","(1.._) * tensor.size() >> 0","(1.._) * call.getDevice() >> device","1 * device.getKernel(call) >> kernel","(1.._) * kernel.passAllOf(_) >> kernel","(1.._) * kernel.pass(_) >> kernel","(1.._) * kernel.call(_)"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Operator@ba7633a[name=operator,support=[CPU,OpenCLDevice]]","Operator@3ab3f1e5[name=operator,support=[CPU,OpenCLDevice]]","Operator@217e874[name=operator,support=[CPU,OpenCLDevice]]","Operator@75254469[name=operator,support=[CPU,OpenCLDevice]]","Operator@40881deb[name=operator,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}