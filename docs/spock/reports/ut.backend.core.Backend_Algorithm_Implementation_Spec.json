{
  "className":"ut.backend.core.Backend_Algorithm_Implementation_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.188 seconds"
  },
  "headers":["\n                   This specification defines the behavior of implementations of the \n                   Algorithm interface! <br> \n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Operator implementations have expected Executor instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Host- and CL- executor instance are being fetched...","code":["def hostExecutor = imp.getImplementationFor( CPU.class )","def clExecutor = imp.getImplementationFor( OpenCLDevice.class )"]},

        {"kind":"then","text":"The variables containing the executor instances are not null.","code":["hostExecutor != null","clExecutor != null || !Neureka.get().canAccessOpenCLDevice()"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["BiElementWise@46bacee7[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@2774f477[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@4f4b017a[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@33d15c98[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@6e2c0de5[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation implementations have expected Executor instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Host- and CL- executor instance are being fetched...","code":["def hostExecutor = imp.getImplementationFor( CPU.class )","def clExecutor = imp.getImplementationFor( OpenCLDevice.class )"]},

        {"kind":"then","text":"The variables containing the executor instances are not null.","code":["hostExecutor != null","clExecutor != null || !Neureka.get().canAccessOpenCLDevice()"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["Activation@7cd9391d[name=activation,support=[CPU,OpenCLDevice]]","Activation@1b095102[name=activation,support=[CPU,OpenCLDevice]]","Activation@6cb23f3b[name=activation,support=[CPU,OpenCLDevice]]","Activation@504d8177[name=activation,support=[CPU,OpenCLDevice]]","Activation@43a55c79[name=activation,support=[CPU,OpenCLDevice]]","Activation@14215236[name=activation,support=[CPU,OpenCLDevice]]","Activation@33c01778[name=activation,support=[CPU,OpenCLDevice]]","Activation@245a0028[name=activation,support=[CPU,OpenCLDevice]]","Activation@48a30138[name=activation,support=[CPU,OpenCLDevice]]","Activation@58dbbfad[name=activation,support=[CPU,OpenCLDevice]]","Activation@21f7c010[name=activation,support=[CPU,OpenCLDevice]]","Activation@30284e20[name=activation,support=[CPU,OpenCLDevice]]","Activation@15dc8b53[name=activation,support=[CPU,OpenCLDevice]]","Activation@4f7b8118[name=activation,support=[CPU,OpenCLDevice]]","Activation@35058f3b[name=activation,support=[CPU,OpenCLDevice]]","Activation@707f10ec[name=activation,support=[CPU,OpenCLDevice]]","Activation@61c04383[name=activation,support=[CPU,OpenCLDevice]]","Activation@6bc65de2[name=activation,support=[CPU,OpenCLDevice]]","Activation@6797c870[name=activation,support=[CPU,OpenCLDevice]]","Activation@22735fbe[name=activation,support=[CPU,OpenCLDevice]]","Activation@3d69bdce[name=activation,support=[CPU,OpenCLDevice]]","Activation@679d8cca[name=activation,support=[CPU,OpenCLDevice]]","Activation@5220bc77[name=activation,support=[CPU,OpenCLDevice]]","Activation@5bc8575a[name=activation,support=[CPU,OpenCLDevice]]","Activation@118747be[name=activation,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"HostExecutors of Operator implementations behave as expected.",
      "result":"PASS",
      "duration":"0.088 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Mock instances to simulate an ExecutionCall instance.","code":["var call = Mock( ExecutionCall )","var device = Mock( CPU )","var tensor = Mock( Tsr )","var mutate = Mock(MutateTsr)","var ndConf = Mock(NDConfiguration)","var hostExecutor = imp.getImplementationFor( CPU.class )","var nativeExecutor = Mock( CPU.JVMExecutor )","var dataObj = Mock(Data)"]},

        {"kind":"when","text":"Host-executor instance is being called...","code":["hostExecutor.run( call )"]},

        {"kind":"then","text":"The mock objects are being called as expected.","code":["(0.._) * tensor.getMut() >> mutate","(0.._) * tensor.mut() >> mutate","(1.._) * call.getDevice() >> device","1 * device.getExecutor() >> nativeExecutor","1 * nativeExecutor.threaded( _, _ )","(0.._) * call.inputs() >> new Tsr[]{ tensor, tensor, tensor }","(0.._) * call.input({it >= 0 && it <= 2}) >> tensor","(0.._) * call.input( Number.class, 0 ) >> tensor","(0.._) * call.input(0) >> tensor","(0.._) * call.input( Number.class, 1 ) >> tensor","(1.._) * tensor.size() >> 0","(0.._) * tensor.itemType >> Double","(0.._) * tensor.getDataAs(double[]) >> new double[0]","(0.._) * mutate.data >> dataObj","(0.._) * dataObj.ref >> new double[0]","(0.._) * mutate.getDataAs(double[]) >> new double[0]","(0.._) * mutate.getDataForWriting(double[]) >> new double[0]","(1.._) * tensor.getNDConf() >> ndConf","(1.._) * ndConf.isSimple() >> false"]},

        {"kind":"where","text":"The variable \"imp\" is from a List of OperationType implementations of type \"Operator\".","code":{"imp":["BiElementWise@46bacee7[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@2774f477[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@4f4b017a[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@33d15c98[name=elementwise,support=[CPU,OpenCLDevice]]","BiElementWise@6e2c0de5[name=elementwise,support=[CPU,OpenCLDevice]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}