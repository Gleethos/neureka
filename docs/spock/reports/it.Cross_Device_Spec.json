{
  "className":"it.Cross_Device_Spec",
  "title":"Cross Device Stress Test Specification",
  "narrative":"This specification is pretty much a system test which covers\n    the behavior of the library as a whole across multiple devices!\n    No matter which device is being used for a given stress test, the result should be the same...",
  "subjects":["neureka.devices.Device"],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"8.704 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Convolution can model matrix multiplications across devices.",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A given device of any type and the settings configured for testing.","code":["Device device = ( deviceType == \"CPU\" ) ? CPU.get() : Device.get('first')","Neureka.get().reset()","Neureka.get().settings().debug().isKeepingDerivativeTargetPayloads = true","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"Two tensors, one requiring gradients and the other one does not.","code":["var tensor1 = Tensor.of(Shape.of(2, 2, 1),","                                Data.of(","                                    1f,  2f, //  3, 1,","                                    2f, -3f, // -2, -1,","                                ))","                                .setRqsGradient( true )","var tensor2 = Tensor.of(Shape.of(1, 2, 2),","                                Data.of(","                                    -2f, 3f, //  0  7","                                    1f, 2f,  // -7  0","                                ))","device.store(tensor1).store(tensor2)"]},

        {"kind":"and","text":"","code":["Tensor product = Tensor.of(\"i0xi1\", tensor1, tensor2)","product.backward( Tensor.of(Shape.of(2, 1, 2), Data.of(1, 1, 1, 1)) )","String result = product.toString({","    it.rowLimit = 15 // \"rc\"","    it.isScientific = false","    it.isMultiline = false","    it.hasGradient = false","    it.cellSize = 1","    it.hasValue = true","    it.hasRecursiveGraph = true","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","})"]},

        {"kind":"expect","text":"","code":["result.contains(","    \"[2x1x2]:(0.0, 7.0, -7.0, 0.0); =>d|[ [1x2x2]:(-2.0, 3.0, 1.0, 2.0) ]|:t{ [2x2x1]:(1.0, 2.0, 2.0, -3.0) }\"",")"]},

        {"kind":"cleanup","text":"","code":["product.mut.delete()","tensor1.mut.delete()","tensor2.mut.delete()"]},

        {"kind":"where","text":"The following settings are being used: ","code":{"deviceType":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Cross device system test runs successfully.",
      "result":"PASS",
      "duration":"5.102 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A given device of any type and the settings configured for testing.","code":["Device device = ( deviceType == \"CPU\" ) ? CPU.get() : Device.get('first')","Neureka.get().settings().debug().isKeepingDerivativeTargetPayloads = true","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Neureka.get().backend.find(CLBackend).ifPresent { it.settings.autoConvertToFloat = true }"]},

        {"kind":"expect","text":"The integration test runs successful.","code":["CrossDeviceSystemTest.on(device)"]},

        {"kind":"cleanup","text":"","code":["Neureka.get().backend.find(CLBackend).ifPresent { it.settings.autoConvertToFloat = true }"]},

        {"kind":"where","text":"The following settings are being used: ","code":{"deviceType":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Test simple NN implementation with manual backprop",
      "result":"PASS",
      "duration":"3.512 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Neureka.get().backend.find(CLBackend).ifPresent { it.settings.autoConvertToFloat = true }"]},

        {"kind":"expect","text":"","code":["device != null"]},

        {"kind":"and","text":"","code":["new SimpleNNSystemTest(SimpleNNSystemTest.Mode.CONVOLUTION).on(device)"]},

        {"kind":"and","text":"","code":["if ( !(device instanceof OpenCLDevice) )","    new SimpleNNSystemTest(SimpleNNSystemTest.Mode.MAT_MUL).on(device)"]},

        {"kind":"cleanup","text":"","code":["Neureka.get().backend().find(CLBackend).ifPresent{ it.getSettings().autoConvertToFloat = false }"]},

        {"kind":"where","text":"","code":{"device":["CPU.get()","Device.get('first gpu')"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A gradient of ones can be set by calling the backward method on a tensor sitting on any device.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use the legacy representation of tensors for this little test!","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"We create a small matrix of 4 fours which requires a gradient and is stored on the provided device!","code":["Tensor t = Tensor.of([2, 2], 4d).setRqsGradient(true).to(device)"]},

        {"kind":"when","text":"We now call the backward method on the tensor directly without having done any operations...","code":["t.backward(1)"]},

        {"kind":"and","text":"Then we take the gradient to see what happened.","code":["Tensor g = t.gradient.get()"]},

        {"kind":"then","text":"We expect this gradient to be all ones with the shape of our matrix!","code":["g.toString().contains(\"[2x2]:(1.0, 1.0, 1.0, 1.0)\")","t.toString().contains(\"[2x2]:(4.0, 4.0, 4.0, 4.0):g:(1.0, 1.0, 1.0, 1.0)\")"]},

        {"kind":"and","text":"","code":["t.isOutsourced() == !(device instanceof CPU)","g.isOutsourced() == !(device instanceof CPU)"]},

        {"kind":"and","text":"","code":["t.device == device","g.device == device"]},

        {"kind":"where","text":"","code":{"device":["new DummyDevice()","Device.get('first gpu')","CPU.get()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Mapping tensors works for every device (even if they are not used).",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We first make a note of the type we started with.","code":["var originalType = tensor.itemType()"]},

        {"kind":"when","text":"","code":["when :  \"\"\"","            We start off by storing the provided tensor on the provided device.","            This might be any kind of device like for example an $OpenCLDevice.","            Which means the tensor might not be sitting in RAM!","        \"\"\"","tensor.to(device)"]},

        {"kind":"then","text":"After the tensor is stored on the device, we expect it to be still of the original type.","code":["tensor.itemType == originalType"]},

        {"kind":"when","text":"\n                    We call the mapping method which is supposed to create a new tensor of the provided type.\n                    This procedure is only supported when the tensor is stored in RAM, so when\n                    the tensor is outsourced (stored on a device), then we expect that the mapping method\n                    temporarily migrates the tensor back and forth internally...\n               ","code":["Tensor<?> result = tensor.mapTo(target, lambda)"]},

        {"kind":"then","text":"We expect the String representation of the tensor to be as expected!","code":["result.toString() == expected"]},

        {"kind":"and","text":"We expect the result to have the expected target class!","code":["result.itemType == target"]},

        {"kind":"and","text":"Lastly, the original tensor used as mapping source should be stored on the original device!","code":["tensor.isOutsourced() == !(device instanceof CPU)","tensor.device == device"]},

        {"kind":"where","text":"We use the following data to test this mapping for a wide range of types and values!","code":{"tensor":["Tensor.of(3.5)","Tensor.of(3.5)","Tensor.ofFloats().scalar(3.5f)","Tensor.ofFloats().scalar(3.5f)","Tensor.ofShorts().scalar(3.5f)","Tensor.ofShorts().scalar(3.5f)","Tensor.ofBytes().scalar(2.7)","Tensor.ofBytes().scalar(2.7)","Tensor.ofInts().scalar(6.1f)","Tensor.ofInts().scalar(6.1f)","Tensor.of( 3.0 )","Tensor.of(-1.0 )","Tensor.of(0.5)","Tensor.of(0.7)","Tensor.of(0.9)","Tensor.of(3.8)","Tensor.of(3.0 )","Tensor.of(-1.0)","Tensor.of(0.5)","Tensor.of(0.7)","Tensor.of(0.9)","Tensor.of(3.8)","Tensor.ofFloats().scalar( 3f )","Tensor.ofFloats().scalar(-1f )","Tensor.ofFloats().scalar(0.5f)","Tensor.ofFloats().scalar(0.7f)","Tensor.ofFloats().scalar(0.9f)","Tensor.ofFloats().scalar(3.8f)","Tensor.ofFloats().scalar( 3f )","Tensor.ofFloats().scalar(-1f )","Tensor.ofFloats().scalar(0.5f)","Tensor.ofFloats().scalar(0.7f)","Tensor.ofFloats().scalar(0.9f)","Tensor.ofFloats().scalar(3.8f)","Tensor.ofInts().scalar( 3 )","Tensor.ofInts().scalar(-1 )","Tensor.ofInts().scalar( 5 )","Tensor.ofInts().scalar( 70)","Tensor.ofInts().scalar( 90)","Tensor.ofInts().scalar( 37)","Tensor.ofInts().scalar( 3 )","Tensor.ofInts().scalar(-1 )","Tensor.ofInts().scalar( 5 )","Tensor.ofInts().scalar( 70)","Tensor.ofInts().scalar( 90)","Tensor.ofInts().scalar( 37)","Tensor.ofShorts().scalar( 3 )","Tensor.ofShorts().scalar(-1 )","Tensor.ofShorts().scalar( 5 )","Tensor.ofShorts().scalar( 70)","Tensor.ofShorts().scalar( 90)","Tensor.ofShorts().scalar( 37)","Tensor.ofShorts().scalar( 3 )","Tensor.ofShorts().scalar(-1 )","Tensor.ofShorts().scalar( 5 )","Tensor.ofShorts().scalar( 70)","Tensor.ofShorts().scalar( 90)","Tensor.ofShorts().scalar( 37)","Tensor.ofBytes().scalar( 3 )","Tensor.ofBytes().scalar(-1 )","Tensor.ofBytes().scalar( 5 )","Tensor.ofBytes().scalar( 70)","Tensor.ofBytes().scalar( 90)","Tensor.ofBytes().scalar( 37)","Tensor.ofBytes().scalar( 3 )","Tensor.ofBytes().scalar(-1 )","Tensor.ofBytes().scalar( 5 )","Tensor.ofBytes().scalar( 70)","Tensor.ofBytes().scalar( 90)","Tensor.ofBytes().scalar( 37)"],"device":["CPU.get()","Device.get('first')","CPU.get()","Device.get('first')","CPU.get()","Device.get('first')","CPU.get()","Device.get('first')","CPU.get()","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","Device.get('first')","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()","CPU.get()"],"target":["String.class","String.class","String.class","String.class","String.class","String.class","String.class","String.class","String.class","String.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class","Double.class","Float.class","Integer.class","Long.class","Byte.class","Short.class"],"lambda":["{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{\"~$it\"}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}","{it*it}","{it/2}","{it*10}","{it*5}","{it*2}","{it/2}"],"expected":["'(1):[~3.5]'","'(1):[~3.5]'","'(1):[~3.5]'","'(1):[~3.5]'","'(1):[~3]'","'(1):[~3]'","'(1):[~2]'","'(1):[~2]'","'(1):[~6]'","'(1):[~6]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[5]'","'(1):[3]'","'(1):[1]'","'(1):[1]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[5]'","'(1):[3]'","'(1):[1]'","'(1):[1]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[5]'","'(1):[3]'","'(1):[1]'","'(1):[1]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[5]'","'(1):[3]'","'(1):[1]'","'(1):[1]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'","'(1):[9.0]'","'(1):[-0.5]'","'(1):[50]'","'(1):[350]'","'(1):[-76]'","'(1):[18]'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
