{
  "className":"it.Cross_Device_Spec",
  "title":"Cross Device Stress Test Specification",
  "narrative":"This specification is pretty much a system test which covers\n    the behavior of the library as a whole across multiple devices!\n    No matter which device is being used for a given stress test, the result should be the same...",
  "subjects":["neureka.devices.Device"],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"16.175 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Convolution can model matrix multiplications across devices.",
      "result":"PASS",
      "duration":"0.017 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A given device of any type and the settings configured for testing.","code":["Device device = ( deviceType == \"CPU\" ) ? CPU.get() : Device.get('first')","Neureka.get().reset()","Neureka.get().settings().debug().isKeepingDerivativeTargetPayloads = true","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"Two tensors, one requiring gradients and the other one does not.","code":["var tensor1 = Tsr.of(new int[]{2, 2, 1}, new double[]{","        1,  2, //  3, 1,","        2, -3, // -2, -1,","}).setRqsGradient( true )","var tensor2 = Tsr.of(new int[]{1, 2, 2}, new double[]{","        -2, 3, //  0  7","        1, 2,  // -7  0","})","device.store(tensor1).store(tensor2)"]},

        {"kind":"and","text":"","code":["Tsr product = Tsr.of(\"i0xi1\", tensor1, tensor2)","product.backward( Tsr.of(new int[]{2, 1, 2}, new double[]{1, 1, 1, 1}) )","String result = product.toString({","    it.rowLimit = 15 // \"rc\"","    it.isScientific = false","    it.isMultiline = false","    it.hasGradient = false","    it.cellSize = 1","    it.hasValue = true","    it.hasRecursiveGraph = true","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","})"]},

        {"kind":"expect","text":"","code":["result.contains(","    \"[2x1x2]:(0.0, 7.0, -7.0, 0.0); =>d|[ [1x2x2]:(-2.0, 3.0, 1.0, 2.0) ]|:t{ [2x2x1]:(1.0, 2.0, 2.0, -3.0) }\"",")"]},

        {"kind":"cleanup","text":"","code":["product.getUnsafe().delete()","tensor1.getUnsafe().delete()"]},

        {"kind":"where","text":"The following settings are being used: ","code":{"deviceType":["CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Cross device system test runs successfully.",
      "result":"PASS",
      "duration":"4.604 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A given device of any type and the settings configured for testing.","code":["Device device = ( deviceType == \"CPU\" ) ? CPU.get() : Device.get('first')","Neureka.get().settings().debug().isKeepingDerivativeTargetPayloads = true","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"expect","text":"The integration test runs successful.","code":["CrossDeviceSystemTest.on(device)"]},

        {"kind":"where","text":"The following settings are being used: ","code":{"deviceType":["CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Test simple NN implementation with manual backprop",
      "result":"PASS",
      "duration":"11.416 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"expect","text":"","code":["device != null"]},

        {"kind":"and","text":"","code":["new SimpleNNSystemTest(SimpleNNSystemTest.Mode.CONVOLUTION).on(device)"]},

        {"kind":"and","text":"","code":["if ( !(device instanceof OpenCLDevice) )","new SimpleNNSystemTest(SimpleNNSystemTest.Mode.MAT_MUL).on(device)"]},

        {"kind":"where","text":"","code":{"device":["CPU[coreCount=32]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A gradient of ones can be set by calling the backward method on a tensor sitting on any device.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We use the legacy representation of tensors for this little test!","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"We create a small matrix of 4 fours which requires a gradient and is stored on the provided device!","code":["Tsr t = Tsr.of([2, 2], 4d).setRqsGradient(true).to(device)"]},

        {"kind":"when","text":"We now call the backward method on the tensor directly without having done any operations...","code":["t.backward(1)"]},

        {"kind":"and","text":"Then we take the gradient to see what happened.","code":["Tsr g = t.getGradient()"]},

        {"kind":"then","text":"We expect this gradient to be all ones with the shape of our matrix!","code":["g.toString().contains(\"[2x2]:(1.0, 1.0, 1.0, 1.0)\")","t.toString().contains(\"[2x2]:(4.0, 4.0, 4.0, 4.0):g:(1.0, 1.0, 1.0, 1.0)\")"]},

        {"kind":"and","text":"","code":["t.isOutsourced() == !(device instanceof CPU)","g.isOutsourced() == !(device instanceof CPU)"]},

        {"kind":"and","text":"","code":["t.device == device","g.device == device"]},

        {"kind":"where","text":"","code":{"device":["testutility.mock.DummyDevice@357b77df","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Mapping tensors works for every device (even if they are not used).",
      "result":"PASS",
      "duration":"0.054 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["\"\"\"","    We start off by storing the provided tensor on the provided device.","    This might be any kind of device like for example an $OpenCLDevice.","    Which means the tensor might not be sitting in RAM!","\"\"\"","tensor.to(device)"]},

        {"kind":"when","text":"\n                    We call the mapping method which is supposed to create a new tensor of the provided type.\n                    This procedure is only supported when the tensor is stored in RAM, so when\n                    the tensor is outsourced (stored on a device), then we expect that the mapping method\n                    temporarily migrates the tensor back and forth internally...\n               ","code":["Tsr<?> result = tensor.mapTo(target, lambda)"]},

        {"kind":"then","text":"We expect the String representation of the tensor to be as expected!","code":["result.toString() == expected"]},

        {"kind":"and","text":"We expect the result to have the expected target class!","code":["result.itemType == target"]},

        {"kind":"and","text":"Lastly, the original tensor used as mapping source should be stored on the original device!","code":["tensor.isOutsourced() == !(device instanceof CPU)","tensor.device == device"]},

        {"kind":"where","text":"We use the following data to test this mapping for a wide range of types and values!","code":{"tensor":["(1):[3.5]","(1):[3.5]","(1):[3.5]","(1):[3.5]","(1):[3.0]","(1):[2.0]","(1):[6.0]","(1):[3.0]","(1):[-1.0]","(1):[0.5]","(1):[0.69999]","(1):[0.89999]","(1):[3.8]","(1):[3.0]","(1):[-1.0]","(1):[0.5]","(1):[0.7]","(1):[0.9]","(1):[3.8]","(1):[3.0]","(1):[-1.0]","(1):[0.5]","(1):[0.69999]","(1):[0.89999]","(1):[3.8]","(1):[3.0]","(1):[-1.0]","(1):[0.5]","(1):[0.69999]","(1):[0.89999]","(1):[3.8]","(1):[3.0]","(1):[-1.0]","(1):[5.0]","(1):[70.0]","(1):[90.0]","(1):[37.0]","(1):[3.0]","(1):[-1.0]","(1):[5.0]","(1):[70.0]","(1):[90.0]","(1):[37.0]","(1):[3.0]","(1):[-1.0]","(1):[5.0]","(1):[70.0]","(1):[90.0]","(1):[37.0]"],"device":["CPU[coreCount=32]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","CPU[coreCount=32]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","OpenCLDevice[deviceId=cl_device_id[0x208fb48e290],platform=OpenCLPlatform@3105e19b[pid=cl_platform_id[0x7ff938e58000],context=cl_context[0x208f776b3a0],kernels=[..48..]]]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]","CPU[coreCount=32]"],"target":["class java.lang.String","class java.lang.String","class java.lang.String","class java.lang.String","class java.lang.String","class java.lang.String","class java.lang.String","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Long","class java.lang.Byte","class java.lang.Short"],"lambda":["it.Cross_Device_Spec$__spock_feature_0_4prov3_closure8@506e0281","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure9@5cd0af41","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure10@3ef900b8","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure11@2edb2430","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure12@524e28b6","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure13@68d8a6c5","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure14@718b75bc","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure15@38d1026e","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure16@3a2a619a","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure17@7d0f06","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure18@40c8567b","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure19@3c5c73d6","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure20@29da77f3","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure21@1d860d3f","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure22@3fa86d1b","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure23@1adcd850","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure24@43d770bb","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure25@17977c70","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure26@7a249c09","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure27@3d7fc3c5","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure28@39ef10cd","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure29@7493179f","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure30@2a431a61","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure31@7ecd5f17","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure32@387d9224","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure33@3fd3312d","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure34@25c78878","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure35@3d0734a6","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure36@1403b7b4","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure37@52398ba4","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure38@253fb0a4","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure39@144bc400","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure40@22c88610","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure41@48b344ad","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure42@4775c5dd","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure43@3415abb0","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure44@25cb49b4","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure45@524acc4b","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure46@e0d7fa2","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure47@6f980e6f","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure48@46a8fc91","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure49@47819759","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure50@e000da1","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure51@54f592f","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure52@5a0dd8b5","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure53@49b68b76","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure54@4d8166b","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure55@7f9da7b2","it.Cross_Device_Spec$__spock_feature_0_4prov3_closure56@2e4619eb"],"expected":["(1):[~3.5]","(1):[~3.5]","(1):[~3.5]","(1):[~3.5]","(1):[~3]","(1):[~2]","(1):[~6]","(1):[9.0]","(1):[-0.5]","(1):[5.0]","(1):[3.0]","(1):[1.0]","(1):[1.0]","(1):[9.0]","(1):[-0.5]","(1):[5.0]","(1):[3.0]","(1):[1.0]","(1):[1.0]","(1):[9.0]","(1):[-0.5]","(1):[5.0]","(1):[3.0]","(1):[1.0]","(1):[1.0]","(1):[9.0]","(1):[-0.5]","(1):[5.0]","(1):[3.0]","(1):[1.0]","(1):[1.0]","(1):[9.0]","(1):[-0.5]","(1):[50.0]","(1):[350.0]","(1):[-76.0]","(1):[18.0]","(1):[9.0]","(1):[-0.5]","(1):[50.0]","(1):[350.0]","(1):[-76.0]","(1):[18.0]","(1):[9.0]","(1):[-0.5]","(1):[50.0]","(1):[350.0]","(1):[-76.0]","(1):[18.0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}