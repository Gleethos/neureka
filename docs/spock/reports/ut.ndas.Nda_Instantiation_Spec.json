{
  "className":"ut.ndas.Nda_Instantiation_Spec",
  "title":"ND-Array Instantiation",
  "narrative":"In this specification we cover how ND-arrays can be instantiated.",
  "subjects":["neureka.Nda"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.005 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A vector can be created from an array of values through the \"of\" method.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We simply pass an array of ints to the \"of\" factory method to create an nd-array.","code":["var nda = Nda.of(1, 2, 3)"]},

        {"kind":"expect","text":"The nd-array will then have the expected shape, items and data type.","code":["nda.shape == [3]","nda.items == [1, 2, 3]","nda.itemType == Integer"]},

        {"kind":"when","text":"We use doubles instead of ints...","code":["nda = Nda.of(4.0d, 5.0d)"]},

        {"kind":"then","text":"...the nd-array will be an array of doubles!","code":["nda.shape == [2]","nda.items == [4.0, 5.0]","nda.itemType == Double"]},

        {"kind":"when","text":"We want to use booleans instead of numeric data types...","code":["nda = Nda.of(true, false)"]},

        {"kind":"then","text":"...the nd-array will be an array of booleans!","code":["nda.shape == [2]","nda.items == [true, false]","nda.itemType == Boolean"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"ND-arrays can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!"]
      },
      "blocks":[
        {"kind":"given","text":"We create a new homogeneously filled Nda instance using a fluent builder API.","code":["Nda<?> t = Nda.of( type )","                     .withShape( 3, 2 )","                     .all( value )"]},

        {"kind":"expect","text":"This new instance will have the expected data type!","code":["t.itemType() == type"]},

        {"kind":"and","text":"...all items of the array will have the same value, which is the one we passed to the fluent builder.","code":["t.every((Predicate<Object>){ it == value })"]},

        {"kind":"and","text":"The nd-array will have the shape we passed to the builder.","code":["t.shape == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries: 2 * 3 = 6.","code":["t.size == 6"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["Integer","Double","Float","Long","Boolean","Character"],"value":["42  as int","4.0 as double","4f  as float","42L as Long","false","'Â°' as char"],"data":["new int[]   { 42  }","new double[]{ 4.0 }","new float[] { 4f  }","new long[]  { 42L }","new boolean[] { false }","new char[] { 'Â°' as char }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Common types of nd-arrays are best instantiated using type specific convenience methods.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The operands of the following expressions are invariant to another:","code":["Nda.ofStrings().scalar(\"Hi\").item  == Nda.of(String).scalar(\"Hi\").item","Nda.ofInts().scalar(3).item        == Nda.of(Integer).scalar(3).item","Nda.ofDoubles().scalar(3.0).item   == Nda.of(Double).scalar(3.0).item","Nda.ofFloats().scalar(3f).item     == Nda.of(Float).scalar(3f).item","Nda.ofLongs().scalar(3L).item      == Nda.of(Long).scalar(3L).item","Nda.ofBooleans().scalar(true).item == Nda.of(Boolean).scalar(true).item","Nda.ofChars().scalar((char)'Â°').item    == Nda.of(Character).scalar((char)'Â°').item","Nda.ofBytes().scalar((byte)3).item      == Nda.of(Byte).scalar((byte)3).item","Nda.ofShorts().scalar((short)3).item    == Nda.of(Short).scalar((short)3).item","Nda.ofObjects().scalar([]).item         == Nda.of(Object).scalar([]).item","Nda.ofNumbers().scalar(3).item     == Nda.of(Number).scalar(3).item","Nda.ofBigDecimals().scalar(3).item == Nda.of(BigDecimal).scalar(3).item"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}