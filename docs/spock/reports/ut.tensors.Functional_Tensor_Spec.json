{
  "className":"ut.tensors.Functional_Tensor_Spec",
  "title":"Functional Tensors",
  "narrative":"Tensors expose a powerful API for performing operations on them\n    in a functional style.",
  "subjects":[],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.301 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can initialize a tensor using a filler lambda mapping indices to items.",
      "result":"PASS",
      "duration":"0.029 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We instantiate a tensor using an initializer lambda...","code":["Tensor<Integer> t = Tensor.of(","                        DataType.of( Integer.class ),","                        [ 2, 3 ],","                        ( int i, int[] indices ) -> { i - 2 }","                    )"]},

        {"kind":"then","text":"It is initialized with the expected values:","code":["t.toString() == \"(2x3):[-2, -1, 0, 1, 2, 3]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can analyse the values of a tensor using various predicate receiving methods",
      "result":"PASS",
      "duration":"0.059 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create 2 tensors, where one is a slice of the other.","code":["var a = Tensor.ofInts().withShape(3, 2).andFill(2, 0, 1, 1, 8, 3)","var b = a[1, 0..1]"]},

        {"kind":"expect","text":"","code":["!a.every((Predicate<Integer>){it == 1})","a.any((Predicate<Integer>){it == 1})","a.any((Predicate<Integer>){it == 8})","!a.any((Predicate<Integer>){it == 42})"]},

        {"kind":"and","text":"","code":["b.every((Predicate<Integer>){it == 1})","!b.any((Predicate<Integer>){it == 2})","b.none((Predicate<Integer>){it == 2})"]},

        {"kind":"and","text":"","code":["a.count((Predicate<Integer>){it == 0}) == 1","a.count((Predicate<Integer>){it == 1}) == 2","b.count((Predicate<Integer>){it == 1}) == 2","b.count((Predicate<Integer>){it == 3}) == 0"]},

        {"kind":"and","text":"We can also easily turn a tensor into a stream!","code":["a.stream()","        .filter({it < 3})","        .map({(it-4)*2})","        .collect(Collectors.toList()) == [-4, -8, -6, -6]"]},

        {"kind":"where","text":"","code":{"device":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the \"filter\" method as a shortcut for \"stream().filter(..)\".",
      "result":"PASS",
      "duration":"0.027 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We create a tensor...","code":["Tensor<Integer> t = Tensor.ofInts().withShape(3, 2).andFill(9, 1, 0, 1, -4, 8)"]},

        {"kind":"then","text":"The filter method returns a filtered stream which we can collect!","code":["t.filter({it < 3})","        .collect(Collectors.toList()) == [1, 0, 1, -4]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use the \"flatMap\" method as a shortcut for \"stream().flatMap(..)\".",
      "result":"PASS",
      "duration":"0.030 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We create a tensor...","code":["Tensor<Integer> t = Tensor.ofInts().withShape(3, 2).andFill(9, 1, 0, 1, -4, 8)"]},

        {"kind":"then","text":"We can use the \"flatMap\" method as a shortcut for \"stream().flatMap(..)\"","code":["t.flatMap({it < 3 ? [it, it] : []})","        .collect(Collectors.toList()) == [1, 1, 0, 0, 1, 1, -4, -4]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensor mapping lambdas produce expected tensors.",
      "result":"PASS",
      "duration":"0.059 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Instantiating a tensor using an initializer lambda...","code":["Tensor t = Tensor.of(","        DataType.of( Double.class ),","            [ 2, 3 ],","            ( int i, int[] indices ) -> { (i - 2) as Double }","        )","        .to(device)"]},

        {"kind":"then","text":"The tensor has been initialized with the expected values:","code":["t.toString() == \"(2x3):[-2.0, -1.0, 0.0, 1.0, 2.0, 3.0]\""]},

        {"kind":"when","text":"We want to perform an element wise mapping to a new tensor...","code":["def b = t.mapTo(String, (it) -> {\"<$it>\".replace(\".0\", \"\")})"]},

        {"kind":"then","text":"We expect the returned tensor to be a String container whose Strings are formatted according to our mapping lambda.","code":["b.toString() == \"(2x3):[<-2>, <-1>, <0>, <1>, <2>, <3>]\"","b.itemType == String.class"]},

        {"kind":"and","text":"The original tensor should not have changed because no inline operation occurred.","code":["t.toString() == \"(2x3):[-2.0, -1.0, 0.0, 1.0, 2.0, 3.0]\""]},

        {"kind":"where","text":"","code":{"device":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"map\" method is a shorter convenience method for mapping to the same type.",
      "result":"PASS",
      "duration":"0.057 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor with a single element.","code":["var t = Tensor.of(","                        DataType.of( Integer.class ),","                        [ 1 ],","                        ( int i, int[] indices ) -> { 1 }","                    )","                    .to(device)"]},

        {"kind":"when","text":"We map the tensor to a new tensor of the same type.","code":["var b = t.map( it -> it + 1 )"]},

        {"kind":"then","text":"The new tensor should have the same value as the original tensor.","code":["b.toString() == \"(1):[2]\"","b.itemType == Integer.class"]},

        {"kind":"and","text":"The original tensor should not have changed because no inline operation occurred.","code":["t.toString() == \"(1):[1]\""]},

        {"kind":"where","text":"","code":{"device":["'CPU'","'GPU'"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can find both min and max items in a tensor by providing a comparator.",
      "result":"PASS",
      "duration":"0.030 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor of chars for which we want to find a min and max values:","code":["var t = Tensor.of(Character)","                    .withShape(2, 13)","                    .andWhere(( int i, int[] indices ) -> { (i+65) as char } )"]},

        {"kind":"when","text":"We find the min value by passing a comparator (which takes 2 values and returns an int):","code":["var min = t.minItem( ( Character a, Character b ) -> a.compareTo( b ) )"]},

        {"kind":"then","text":"The resulting min value is the last item in the tensor, the letter A:","code":["min == 'A'"]},

        {"kind":"when","text":"We now try to find the max value:","code":["var max = t.maxItem( ( Character a, Character b ) -> a.compareTo( b ) )"]},

        {"kind":"then","text":"The max value is the last item in the tensor, the letter Z:","code":["max == 'Z'"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
