{
  "className":"ut.math.Function_Spec",
  "title":"Testing Default Methods on Functions",
  "narrative":"This specification tests the default methods on functions\n    through a simple dummy implementation of the Function interface.",
  "subjects":["java.util.function.Function"],
  "statistics":{
    "runs":"40",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.046 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Function implementations ensure that internally created tensors are flagged as \"intermediate\" initially! [0]",
      "result":"PASS",
      "duration":"0.007 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0]","                            })"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0].mut.setIsIntermediate(true)","                            })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3d)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations ensure that internally created tensors are flagged as \"intermediate\" initially! [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0]","                            })"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0].mut.setIsIntermediate(true)","                            })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3d)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations ensure that internally created tensors are flagged as \"intermediate\" initially! [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0]","                            })"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                                var outputs = [Tensor.of(1d)]","                                tensors.length.times { outputs.add(tensors[it]) }","                                return outputs[0].mut.setIsIntermediate(true)","                            })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3d)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations ensure that outputs which are input members are not flagged as \"intermediate\"! [0]",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> tensors[0] )"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                        return tensors[0].mut.setIsIntermediate( true ) // This should fail!","                    })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3.0)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations ensure that outputs which are input members are not flagged as \"intermediate\"! [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> tensors[0] )"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                        return tensors[0].mut.setIsIntermediate( true ) // This should fail!","                    })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3.0)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations ensure that outputs which are input members are not flagged as \"intermediate\"! [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tensor<?>[] tensors) -> tensors[0] )"]},

        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                        return tensors[0].mut.setIsIntermediate( true ) // This should fail!","                    })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3.0)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},

        {"kind":"then","text":"","code":["noExceptionThrown()"]},

        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},

        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},

        {"kind":"where","text":"","code":{"caller":["{t1, t2, fun -> fun.call(t1, t2)}","{t1, t2, fun -> fun.invoke(t1, t2)}","{t1, t2, fun -> fun.execute(t1, t2)}"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Function implementations will ensure the \"call\" and \"invoke\" does not return tensors flagged as \"intermediate\".",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun = new DummyFunction((Args args, Tensor<?>[] tensors) -> {","                            return Tensor.of(42f).mut.setIsIntermediate(true)","                        })"]},

        {"kind":"and","text":"","code":["var a = Tensor.of(3d)","var b = Tensor.of(-2.5)"]},

        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},

        {"kind":"when","text":"","code":["var t1 = fun.call(a, b)","var t2 = fun.invoke(a, b)","var t3 = fun.execute(a, b)"]},

        {"kind":"then","text":"","code":["!t1.isIntermediate()","!t2.isIntermediate()","t3.isIntermediate()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [0]",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [3]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [4]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [5]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [6]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [7]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [8]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [9]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [10]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [11]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [12]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [13]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [14]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [15]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [16]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [17]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [18]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [19]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [20]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [21]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [22]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [23]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [24]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [25]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [26]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [27]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [28]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [29]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [30]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [31]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The library context exposes a set of useful functions. [32]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},

        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},

        {"kind":"where","text":"","code":{"expected":["'ln(I[0])'","'ln(I[0])'","'gaus(I[0])'","'gaus(I[0])'","'fast_gaus(I[0])'","'fast_gaus(I[0])'","'sig(I[0])'","'sig(I[0])'","'tanh(I[0])'","'tanh(I[0])'","'fast_tanh(I[0])'","'fast_tanh(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'softsign(I[0])'","'quad(I[0])'","'quad(I[0])'","'relu(I[0])'","'relu(I[0])'","'abs(I[0])'","'abs(I[0])'","'sin(I[0])'","'sin(I[0])'","'cos(I[0])'","'cos(I[0])'","'softplus(I[0])'","'softplus(I[0])'","'silu(I[0])'","'silu(I[0])'","'gelu(I[0])'","'gelu(I[0])'","'selu(I[0])'","'selu(I[0])'"],"fun":["{Functions it -> it.ln            }","{Functions it -> it.ln()          }","{Functions it -> it.gaus          }","{Functions it -> it.gaus()        }","{Functions it -> it.fastGaus      }","{Functions it -> it.fastGaus()    }","{Functions it -> it.sigmoid       }","{Functions it -> it.sigmoid()     }","{Functions it -> it.tanh          }","{Functions it -> it.tanh()        }","{Functions it -> it.fastTanh      }","{Functions it -> it.fastTanh()    }","{Functions it -> it.softsign      }","{Functions it -> it.softsign()    }","{Functions it -> it.softsign      }","{Functions it -> it.quad()        }","{Functions it -> it.quad          }","{Functions it -> it.relu()        }","{Functions it -> it.relu          }","{Functions it -> it.abs()         }","{Functions it -> it.abs           }","{Functions it -> it.sin()         }","{Functions it -> it.sin           }","{Functions it -> it.cos()         }","{Functions it -> it.cos           }","{Functions it -> it.softplus()    }","{Functions it -> it.softplus      }","{Functions it -> it.silu()        }","{Functions it -> it.silu          }","{Functions it -> it.gelu()        }","{Functions it -> it.gelu          }","{Functions it -> it.selu()        }","{Functions it -> it.selu          }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
