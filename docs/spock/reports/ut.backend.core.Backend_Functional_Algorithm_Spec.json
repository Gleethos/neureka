{
  "className":"ut.backend.core.Backend_Functional_Algorithm_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.019 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A functional algorithm cannot be used if it was not built properly! [0]",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"when","text":"We call a method on the algorithm...","code":["caller(algorithm)"]},

        {"kind":"then","text":"This should throw an illegal state exception, simply because we have not built the algorithm properly!","code":["def exception = thrown(IllegalStateException)"]},

        {"kind":"and","text":"The exception tells us this:","code":["exception.message == \"Trying use an instance of 'TestAlgorithm' with name 'test_name' which was not fully built!\""]},

        {"kind":"where","text":"We call the following methods:","code":{"caller":["{ Algorithm it -> it.autoDiffModeFrom(null) }","{ Algorithm it -> it.execute(null, null) }","{ Algorithm it -> it.prepare(null) }",""]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm cannot be used if it was not built properly! [1]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"when","text":"We call a method on the algorithm...","code":["caller(algorithm)"]},

        {"kind":"then","text":"This should throw an illegal state exception, simply because we have not built the algorithm properly!","code":["def exception = thrown(IllegalStateException)"]},

        {"kind":"and","text":"The exception tells us this:","code":["exception.message == \"Trying use an instance of 'TestAlgorithm' with name 'test_name' which was not fully built!\""]},

        {"kind":"where","text":"We call the following methods:","code":{"caller":["{ Algorithm it -> it.autoDiffModeFrom(null) }","{ Algorithm it -> it.execute(null, null) }","{ Algorithm it -> it.prepare(null) }",""]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm cannot be used if it was not built properly! [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"when","text":"We call a method on the algorithm...","code":["caller(algorithm)"]},

        {"kind":"then","text":"This should throw an illegal state exception, simply because we have not built the algorithm properly!","code":["def exception = thrown(IllegalStateException)"]},

        {"kind":"and","text":"The exception tells us this:","code":["exception.message == \"Trying use an instance of 'TestAlgorithm' with name 'test_name' which was not fully built!\""]},

        {"kind":"where","text":"We call the following methods:","code":{"caller":["{ Algorithm it -> it.autoDiffModeFrom(null) }","{ Algorithm it -> it.execute(null, null) }","{ Algorithm it -> it.prepare(null) }",""]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm does not accept null as an answer!",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"when","text":"We build it thoroughly...","code":["algorithm","        .setIsSuitableFor(call -> SuitabilityPredicate.EXCELLENT)","        .setAutogradModeFor( call ->  AutoDiffMode.BACKWARD_ONLY )","        .setExecution((caller, call ) -> null)","        .setCallPreparation(call -> null)","        .buildFunAlgorithm()"]},

        {"kind":"then","text":"The algorithm should be usable just fine!","code":["algorithm.isSuitableFor(null) == SuitabilityPredicate.EXCELLENT","algorithm.autoDiffModeFrom(null) == AutoDiffMode.BACKWARD_ONLY","algorithm.execute(null, null) == null","algorithm.prepare(null) == null"]},

        {"kind":"when","text":"We create a new instance!","code":["algorithm = new TestAlgorithm()"]},

        {"kind":"and","text":"Which we do not build fully this time...","code":["algorithm","        .setIsSuitableFor(call -> SuitabilityPredicate.EXCELLENT)","        .setAutogradModeFor( call ->  AutoDiffMode.BACKWARD_ONLY )","        .setExecution((caller, call ) -> null)","        .setCallPreparation(null) // This is not acceptable!","        .buildFunAlgorithm()"]},

        {"kind":"then","text":"This should throw an illegal state exception, because we have not built the algorithm properly!","code":["def exception = thrown(IllegalStateException)"]},

        {"kind":"and","text":"The exception tells us this:","code":["exception.message == \"Instance 'TestAlgorithm' incomplete!\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm warns us when modified after it has been built! [0]",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"and","text":"","code":["def oldStream = System.err","System.err = Mock(PrintStream)"]},

        {"kind":"when","text":"We build it thoroughly...","code":["algorithm","        .setIsSuitableFor(call -> SuitabilityPredicate.EXCELLENT)","        .setAutogradModeFor( call ->  AutoDiffMode.BACKWARD_ONLY )","        .setExecution((caller, call ) -> null)","        .setCallPreparation(call -> null)","        .buildFunAlgorithm()"]},

        {"kind":"then","text":"The algorithm should be usable just fine!","code":["algorithm.isSuitableFor(null) == SuitabilityPredicate.EXCELLENT","algorithm.autoDiffModeFrom(null) == AutoDiffMode.BACKWARD_ONLY","algorithm.execute(null, null) == null","algorithm.prepare(null) == null"]},

        {"kind":"when","text":"We try to modify the algorithm even if it is already built...","code":["setter(algorithm)"]},

        {"kind":"then","text":"We will get a warning which wells us that mutating the state of the algorithm is discouraged!","code":["1 * System.err.println(","        \"[Test worker] WARN neureka.backend.api.template.algorithms.AbstractFunDeviceAlgorithm - \" +","        \"Implementation '$type.simpleName' in algorithm '$algorithm' was modified! \" +","        \"Please consider only modifying the standard backend state of Neureka for experimental reasons.\"","    )"]},

        {"kind":"cleanup","text":"","code":["System.err = oldStream"]},

        {"kind":"where","text":"","code":{"type":["ExecutionPreparation.class","SuitabilityPredicate.class","Execution.class"],"setter":["{ TestAlgorithm it -> it.setCallPreparation( call -> null ) }","{ TestAlgorithm it -> it.setIsSuitableFor( call -> SuitabilityPredicate.NOT_GOOD ) }","{ TestAlgorithm it -> it.setExecution( (caller, call) -> Result.of(AbstractDeviceAlgorithm.executeFor(caller, call, c->null)).withAutoDiff( FallbackAlgorithm::ADAction )) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm warns us when modified after it has been built! [1]",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"and","text":"","code":["def oldStream = System.err","System.err = Mock(PrintStream)"]},

        {"kind":"when","text":"We build it thoroughly...","code":["algorithm","        .setIsSuitableFor(call -> SuitabilityPredicate.EXCELLENT)","        .setAutogradModeFor( call ->  AutoDiffMode.BACKWARD_ONLY )","        .setExecution((caller, call ) -> null)","        .setCallPreparation(call -> null)","        .buildFunAlgorithm()"]},

        {"kind":"then","text":"The algorithm should be usable just fine!","code":["algorithm.isSuitableFor(null) == SuitabilityPredicate.EXCELLENT","algorithm.autoDiffModeFrom(null) == AutoDiffMode.BACKWARD_ONLY","algorithm.execute(null, null) == null","algorithm.prepare(null) == null"]},

        {"kind":"when","text":"We try to modify the algorithm even if it is already built...","code":["setter(algorithm)"]},

        {"kind":"then","text":"We will get a warning which wells us that mutating the state of the algorithm is discouraged!","code":["1 * System.err.println(","        \"[Test worker] WARN neureka.backend.api.template.algorithms.AbstractFunDeviceAlgorithm - \" +","        \"Implementation '$type.simpleName' in algorithm '$algorithm' was modified! \" +","        \"Please consider only modifying the standard backend state of Neureka for experimental reasons.\"","    )"]},

        {"kind":"cleanup","text":"","code":["System.err = oldStream"]},

        {"kind":"where","text":"","code":{"type":["ExecutionPreparation.class","SuitabilityPredicate.class","Execution.class"],"setter":["{ TestAlgorithm it -> it.setCallPreparation( call -> null ) }","{ TestAlgorithm it -> it.setIsSuitableFor( call -> SuitabilityPredicate.NOT_GOOD ) }","{ TestAlgorithm it -> it.setExecution( (caller, call) -> Result.of(AbstractDeviceAlgorithm.executeFor(caller, call, c->null)).withAutoDiff( FallbackAlgorithm::ADAction )) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A functional algorithm warns us when modified after it has been built! [2]",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a dumb test algorithm.","code":["def algorithm = new TestAlgorithm()"]},

        {"kind":"and","text":"","code":["def oldStream = System.err","System.err = Mock(PrintStream)"]},

        {"kind":"when","text":"We build it thoroughly...","code":["algorithm","        .setIsSuitableFor(call -> SuitabilityPredicate.EXCELLENT)","        .setAutogradModeFor( call ->  AutoDiffMode.BACKWARD_ONLY )","        .setExecution((caller, call ) -> null)","        .setCallPreparation(call -> null)","        .buildFunAlgorithm()"]},

        {"kind":"then","text":"The algorithm should be usable just fine!","code":["algorithm.isSuitableFor(null) == SuitabilityPredicate.EXCELLENT","algorithm.autoDiffModeFrom(null) == AutoDiffMode.BACKWARD_ONLY","algorithm.execute(null, null) == null","algorithm.prepare(null) == null"]},

        {"kind":"when","text":"We try to modify the algorithm even if it is already built...","code":["setter(algorithm)"]},

        {"kind":"then","text":"We will get a warning which wells us that mutating the state of the algorithm is discouraged!","code":["1 * System.err.println(","        \"[Test worker] WARN neureka.backend.api.template.algorithms.AbstractFunDeviceAlgorithm - \" +","        \"Implementation '$type.simpleName' in algorithm '$algorithm' was modified! \" +","        \"Please consider only modifying the standard backend state of Neureka for experimental reasons.\"","    )"]},

        {"kind":"cleanup","text":"","code":["System.err = oldStream"]},

        {"kind":"where","text":"","code":{"type":["ExecutionPreparation.class","SuitabilityPredicate.class","Execution.class"],"setter":["{ TestAlgorithm it -> it.setCallPreparation( call -> null ) }","{ TestAlgorithm it -> it.setIsSuitableFor( call -> SuitabilityPredicate.NOT_GOOD ) }","{ TestAlgorithm it -> it.setExecution( (caller, call) -> Result.of(AbstractDeviceAlgorithm.executeFor(caller, call, c->null)).withAutoDiff( FallbackAlgorithm::ADAction )) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
