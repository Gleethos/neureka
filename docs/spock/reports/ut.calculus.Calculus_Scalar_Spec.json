{
  "className":"ut.calculus.Calculus_Scalar_Spec",
  "title":"Functions for Scalars",
  "narrative":"The Function API and it's implementations \n    receive and process arrays of scalars as arguments.\n    Functions don't have to be used alongside tensors / nd-arrays,\n    they can also compute derivatives based on scalar values.",
  "subjects":[],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.133 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Function \"1/I[0]\" instance returns expected scalar results.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"1/I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"1/I[0]\", false)"]},

        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},

        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":{"inputs":["[2.0]","[2.0]"],"index":["0","null"],"expected":["-0.25","0.5"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"I[0]+1/I[0]\" instance returns expected scalar results.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"I[0]+1/I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"I[0]+1/I[0]\", false)"]},

        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},

        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":{"inputs":["[2.0]","[-1.0]","[-3.0]","[0.2]"],"index":["null","0","0","0"],"expected":["2.5","0.0","0.8888888888888888","-23.999999999999996"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"(I[0]+1/I[0])**-I[0]\" instance returns expected scalar result.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"(I[0]+1/I[0])**-I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"(I[0]+1/I[0])**-I[0]\", false)"]},

        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},

        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":{"inputs":["[1.0]","[0.2]"],"index":["null","0"],"expected":["0.5","-0.5217778675999797"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"(cos(I[0]*5)/5+I[0])*(1+sin(I[0])/2)\" instance returns expected scalars.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"(cos(I[0]*5)/5+I[0])*(1+sin(I[0])/2)\", false)"]},

        {"kind":"expect","text":"","code":["if ( index != null ) assert f.derive( inputs, index )==expected","else assert f.call( inputs )==expected"]},

        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":{"inputs":["[3.0]","[2.5]","[0.0]","[0.0]","[0.5]","[1.6]","[-4.0]"],"index":["null","null","null","0","0","0","0"],"expected":["3.049021713079475","3.507365283517986","0.2","1.1","0.646867884000033","-0.00697440343353687","3.9174193383745917"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Test scalar results of Function \"sumjs((cos(I[j]*5)/5+I[j])*(1+sin(I[j])/2))\" instance.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"sumjs((cos(I[j]*5)/5+I[j])*(1+sin(I[j])/2))\", false)"]},

        {"kind":"expect","text":"","code":["if (index!=null) assert f.derive( inputs, index )==expected","else assert f.call( inputs )==expected"]},

        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":{"inputs":["[0.0, 0.5, 1.6, -4.0]","[0.0, 0.5, 1.6, -4.0]","[0.0, 0.5, 1.6, -4.0]","[0.0, 0.5, 1.6, -4.0]"],"index":["0","1","2","3"],"expected":["1.1","0.646867884000033","-0.00697440343353687","3.9174193383745917"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Test scalar results of various Function instances.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new Function instance which is detached! (no autograd support)","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(equation, false)"]},

        {"kind":"expect","text":"Calling the function will yield the expected result.","code":["if ( index!=null ) assert f.derive( inputs, index ) == expected","else assert f.call( inputs )==expected"]},

        {"kind":"where","text":"The following parameters are used :","code":{"equation":["6/2*(1+2)","sumJs(Ij)","prod(Ij)","prod(prod(Ij))","I3/i[1]-I0+2+i2","i3*i1/(i4-i0-2)-sig(0)+tanh(0)","(i0*i1)*i2","softplus(i0*i1)*i2","prod(ij)","relu(prod(ij))","relu(prod(ij))","quad(prod(ij)+6)","quad(prod(ij)+6)","quad(abs(prod(ij))-6)","quad(abs(prod(ij))-6)","sumJs(ij)","sumJs(ij)","sumJs(ij**1)","sumJs(ij**1)","I[1]**2","I[1]**2","sumJs(ij**2)","sumJs(ij**2)","2**I[1]","2**I[0]","2**I[2]","2**I[1]","sumJs(2**I[j])","sumJs(2**I[j])","I[1]%2","I[1]%2","I[2]%2","I[2]%2","I[2]%2","7%I[1]","7%I[1]","sum(7%i0)","sum(7%ij)","sum(7%i0)","sum(7%ij)","sum(i0%3)","sum(ij%3)","sum(ij-3)","sum(ij-3)","sum(3-ij)","sum(3-ij)","sum(3-ij-ij)"],"inputs":["[]","[2.0, 3.2, 6.0]","[0.5, 0.5, 100.0]","[0.5, 0.5, 10.0]","[5.0, 4.0, 3.0, 12.0]","[-4.0, -2.0, 6.0, -3.0, -8.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -2.0]","[2.0, 3.0, -5.0]","[2.0, 3.0, -5.0]","[2.0, 3.0, -5.0]","[2.0, 4.0, -5.0]","[2.0, 4.0, -5.0]","[2.0, 3.0, 4.0]","[2.0, 3.0, 4.0]","[2.0, 3.0, 4.0]","[2.0, 3.0, 4.0]","[2.0, 3.0, 4.0]","[2.0, 3.0, 4.0]","[1.0, 2.0, 4.0]","[1.0, 2.0, 4.0]","[1.0, 2.0, 4.0]","[1.0, 2.0, 4.0]","[1.0, 2.0, 4.0]"],"index":["null","null","null","null","null","null","0","0","1","null","1","null","1","null","1","null","1","null","1","null","1","null","1","null","null","null","1","null","1","null","1","null","2","1","null","1","null","null","2","2","0","2","null","1","null","1","1"],"expected":["9.0","11.2","25.0","15.625","3.0","-1.5","-6.0","-5.985164261060192","-4.0","-0.12","-0.04","36.0","48.0","36.0","48.0","3.0","1.0","3.0","1.0","9.0","6.0","17.0","6.0","8.0","4.0","0.25","5.545177444479562","12.25","5.545177444479562","1.0","1.0","-1.0","1.0","0.0","3.0","0.0","3.0","5.0","0.0","0.0","1.0","1.0","-2.0","1.0","2.0","-1.0","-2.0"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}