{
  "className":"ut.calculus.Calculus_Scalar_Spec",
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.028 seconds"
  },

  "title":"A Function as such!",
  "narrative":"This specification defines the expected behaviour of the Function API\n with respect to receiving simple scalar values as arguments.\n Functions don't have to be used alongside tensors / nd-arrays,\n they can also be fed standalone scalar values.",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Function \"1/I[0]\" instance returns expected scalar results.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"1/I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"1/I[0]\", false)"]},
        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},
        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"I[0]+1/I[0]\" instance returns expected scalar results.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"I[0]+1/I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"I[0]+1/I[0]\", false)"]},
        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},
        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"(I[0]+1/I[0])**-I[0]\" instance returns expected scalar result.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Function instance from expression \"(I[0]+1/I[0])**-I[0]\".","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"(I[0]+1/I[0])**-I[0]\", false)"]},
        {"kind":"expect","text":"The function yields expected scalar results when called.","code":["if (index!=null) assert f.derive( inputs, index ) == expected","else assert f.call( inputs ) == expected"]},
        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function \"(cos(I[0]*5)/5+I[0])*(1+sin(I[0])/2)\" instance returns expected scalars.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"(cos(I[0]*5)/5+I[0])*(1+sin(I[0])/2)\", false)"]},
        {"kind":"expect","text":"","code":["if ( index != null ) assert f.derive( inputs, index )==expected","else assert f.call( inputs )==expected"]},
        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Test scalar results of Function \"sumjs((cos(I[j]*5)/5+I[j])*(1+sin(I[j])/2))\" instance.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(\"sumjs((cos(I[j]*5)/5+I[j])*(1+sin(I[j])/2))\", false)"]},
        {"kind":"expect","text":"","code":["if (index!=null) assert f.derive( inputs, index )==expected","else assert f.call( inputs )==expected"]},
        {"kind":"where","text":"The following input array, target derivative index and result scalar is used :","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Test scalar results of various Function instances.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new Function instance which is detached! (no autograd support)","code":["Function f = new FunctionParser( Neureka.get().backend() ).parse(equation, false)"]},
        {"kind":"expect","text":"Calling the function will yield the expected result.","code":["if ( index!=null ) assert f.derive( inputs, index ) == expected","else assert f.call( inputs )==expected"]},
        {"kind":"where","text":"The following parameters are used :","code":[]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}