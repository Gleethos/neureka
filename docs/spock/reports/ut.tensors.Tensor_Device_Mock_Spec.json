{
  "className":"ut.tensors.Tensor_Device_Mock_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.102 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":["\\u000a <h2>Tensor Device Mock Tests</h2>\\u000a <p>\\u000a This unit test specification covers \\u000a the expected behavior of tensors when interacting\\u000a with instances of implementations of the Device interface.\\u000a </p>\\u000a"],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Tensors try to migrate themselves to a device that is being added to them as component.",
      "result":"PASS",
      "duration":"0.048 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A mock device and a simple tensor instance.","code":["def device = Mock(Device)","Tsr t = Tsr.of(2)","device.has(t) >>> [false, true, true]"]},

        {"kind":"when","text":"The mock device is being added to the tensor...","code":["t.to(device)"]},

        {"kind":"then","text":"...the tensor should not try to add itself to the given device via the \"store\" method.","code":["0 * device.store(t)"]},

        {"kind":"and","text":"Instead it should use the \"update\" method, which is a formal callback from the internal component system...","code":["1 * device.update({ it.type().name() == \"ADDED\" }) >> true"]},

        {"kind":"and","text":"It stores the device as a component.","code":["t.has(Device.class)"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Tensors try to remove themselves from their device when \"setIsOutsourced(false)\" is being called.",
      "result":"PASS",
      "duration":"0.012 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple tensor instance with a mock device as component.","code":["def device = Mock(Device)","device.has(_) >>> [false, true, true, false]","device.update(_) >> true","Tsr t = Tsr.of(2).to(device)"]},

        {"kind":"when","text":"The \"isOutsourced\" property is being set to false...","code":["t.isOutsourced = false"]},

        {"kind":"then","text":"...the tensor should try to remove itself from the given device.","code":["(1.._) * device.restore( t )"]},

        {"kind":"and","text":"The device should not be a tensor component anymore.","code":["!t.has(Device.class)"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The device of a tensor can be accessed via the \"device()\" method.",
      "result":"PASS",
      "duration":"0.006 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple tensor having a device as component","code":["def device = Mock(Device)","device.has(_) >>> [false, true, true]","Tsr t = Tsr.of(1)"]},

        {"kind":"when","text":"","code":["t.to(device)","t.setIsOutsourced(true)"]},

        {"kind":"then","text":"","code":["1 * device.update({","    Component.OwnerChangeRequest request -> request.executeChange()","})"]},

        {"kind":"when","text":"The device is being accessed via the \"device()\" method...","code":["Device found = t.get(Device.class)"]},

        {"kind":"then","text":"This found device should be the one that was set originally.","code":["found == device"]},

        {"kind":"and","text":"","code":["found == t.getDevice()"]},

        {"kind":"and","text":"","code":["t.isOutsourced()"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"When creating slices of tensors then this should trigger a \"parent - child\" relation noticeable to the device!",
      "result":"PASS",
      "duration":"0.018 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor having a device as component","code":["def device = Mock(Device)","Tsr t = Tsr.of([3, 3],[1, 2, 3, 4, 5, 6, 7, 8, 9])","device.has(t) >>> [false, true]"]},

        {"kind":"when","text":"A slice is being created from the given tensor...","code":["Tsr s = t[1..2, 0..2]"]},

        {"kind":"and","text":"The \"parent tensor\" is being migrated to the device...","code":["t.to(device)"]},

        {"kind":"then","text":"...this tensor should not try to add itself to the given device via the \"store\" method.","code":["0 * device.store(t)"]},

        {"kind":"and","text":"Instead the \"update\" method should be called...","code":["1 * device.update(_)"]},

        {"kind":"and","text":"Internally the Tsr may \"asks\" if it belongs to the Device. (before and after migration attempt)","code":["(0.._) * device.has(t)"]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}