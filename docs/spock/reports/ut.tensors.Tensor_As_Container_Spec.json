{
  "className":"ut.tensors.Tensor_As_Container_Spec",
  "title":"Why not have a tensor of words?",
  "narrative":"Technically, tensors are merely fancy ND-arrays with some useful mathematical operations\n    applicable to them...\n    Therefore, there is no reason why a tensor would not also be able to store\n    other kinds of objects besides numbers like strings for example.\n    This specification ensures that tensors can hold and index many other things...",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.009 seconds"
  },
  "headers":["\n           Although you can create a tensor of almost anything, you will\n           not be able to execute operations on every kind of tensor...        \n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Plus operator on String tensors works element-wise.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Two tensors filled with String objects containing various letters.","code":["Tensor a = Tensor.of([2, 3], 'a'..'e')","Tensor b = Tensor.of([2, 3], 'f'..'k')"]},

        {"kind":"expect","text":"These two tensors then look as expected.","code":["a.toString() == '(2x3):[a, b, c, d, e, a]'","b.toString() == '(2x3):[f, g, h, i, j, k]'"]},

        {"kind":"and","text":"They have a data type wrapping the String class.","code":["a.dataType == DataType.of( String.class )","b.dataType == DataType.of( String.class )"]},

        {"kind":"when","text":"We now apply the \"+\" operator to the tensors...","code":["Tensor c = a + b"]},

        {"kind":"then","text":"This translates to the individual elements :","code":["c.toString() == '(2x3):[af, bg, ch, di, ej, ak]'"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensor operations translate to custom data type \"ComplexNumber\".",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create 2 simple complex numbers","code":["def c1 = new ComplexNumber(2.3, -1.54)","def c2 = new ComplexNumber(1.0, 0.5)"]},

        {"kind":"and","text":"Then we use them to populate 2 matrices.","code":["Tensor a = Tensor.of([3, 2], c1)","Tensor b = Tensor.of([3, 2], c2)"]},

        {"kind":"expect","text":"","code":["a.toString() == \"(3x2):[2.3-1.54i, 2.3-1.54i, 2.3-1.54i, 2.3-1.54i, 2.3-1.54i, 2.3-1.54i]\"","b.toString() == \"(3x2):[1.0+0.5i, 1.0+0.5i, 1.0+0.5i, 1.0+0.5i, 1.0+0.5i, 1.0+0.5i]\"","a.isVirtual()","b.isVirtual()","(a+b).toString() == \"(3x2):[3.3-1.04i, 3.3-1.04i, 3.3-1.04i, 3.3-1.04i, 3.3-1.04i, 3.3-1.04i]\"","(a-b).toString() == \"(3x2):[1.2999999999999998-2.04i, 1.2999999999999998-2.04i, 1.2999999999999998-2.04i, 1.2999999999999998-2.04i, 1.2999999999999998-2.04i, 1.2999999999999998-2.04i]\"","(a*b).toString() == \"(3x2):[3.07-0.3900000000000001i, 3.07-0.3900000000000001i, 3.07-0.3900000000000001i, 3.07-0.3900000000000001i, 3.07-0.3900000000000001i, 3.07-0.3900000000000001i]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"More tensor operations translate to custom data type \"ComplexNumber\".",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create 2 simple matrices of complex numbers using filler lambdas ","code":["Tensor a = Tensor.of(","            DataType.of(ComplexNumber.class),","            [3, 2],","            ( int i, int[] indices ) -> new ComplexNumber(indices[0], indices[1])","        )","Tensor b = Tensor.of(","            DataType.of(ComplexNumber.class),","            [3, 2],","            ( int i, int[] indices ) -> new ComplexNumber(indices[1], indices[0])","        )"]},

        {"kind":"expect","text":"","code":["a.toString() == \"(3x2):[0.0+0.0i, 0.0+1.0i, 1.0+0.0i, 1.0+1.0i, 2.0+0.0i, 2.0+1.0i]\"","b.toString() == \"(3x2):[0.0+0.0i, 1.0+0.0i, 0.0+1.0i, 1.0+1.0i, 0.0+2.0i, 1.0+2.0i]\"","!a.isVirtual()","!b.isVirtual()","(a+b).toString() == \"(3x2):[0.0+0.0i, 1.0+1.0i, 1.0+1.0i, 2.0+2.0i, 2.0+2.0i, 3.0+3.0i]\"","(a-b).toString() == \"(3x2):[0.0+0.0i, -1.0+1.0i, 1.0-1.0i, 0.0+0.0i, 2.0-2.0i, 1.0-1.0i]\"","(a*b).toString() == \"(3x2):[0.0+0.0i, 0.0+1.0i, 0.0+1.0i, 0.0+2.0i, 0.0+4.0i, 0.0+5.0i]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can apply predicates on the values of a tensor.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create 3 different kinds of tensors.","code":["var a = Tensor.of(Character).withShape(2, 3).andFill('x' as char, 'y' as char, 'z' as char)","var b = Tensor.of(String).withShape(3, 2).andFill(\"Hey\", \"how\", \"are\", \"you\", \"?\")","var c = Tensor.ofDoubles().vector(42, 0.53, -2.5, 9, -12.92, 73)"]},

        {"kind":"expect","text":"We can check if every value of a tensor satisfies a condition.","code":["a.every( item -> item instanceof Character )","b.every( item -> item instanceof String )","c.every( item -> item instanceof Double )"]},

        {"kind":"and","text":"We can see that this is only true of it applies to every value.","code":["!a.every( item -> item == 'x' as char )","!b.every( item -> item == \"Hey\" )","!c.every( item -> item == 42 )"]},

        {"kind":"and","text":"When we want to check if at least one item meets the condition we can use the following:","code":["a.any( item -> item == 'x' as char )","c.any( item -> item == 42 )","b.any( item -> item == \"how\" )"]},

        {"kind":"and","text":"As expected the negation will ensure that there is no item matching the provided condition.","code":["!a.any( item -> item == '?' as char )","!b.any( item -> item == \"is\" )","!c.any( item -> item == 666 )"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
