{
  "className":"ut.tensors.Tensor_State_Spec",
  "title":"The Tensor Initialization and State Specification",
  "narrative":"This specification defines the expected states of freshly instantiated\n    and initialized tensors.\n    After a tensor was created successfully we expect it \n    to have certain properties like a shape, rank, type and data array\n    among other things.",
  "subjects":[],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.028 seconds"
  },
  "headers":["    \n            Note: This specification is a little older, meaning initially it was not written with \n            the intend to be read as living documentation, but rather as a unit test...\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A tensor can be instantiated from a item type class and nested lists.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We instantiate a tensor using a type and a list of things (or list of list of things, or..).","code":["var t = Tsr.of(type, list)"]},

        {"kind":"expect","text":"The tensor has the item type, shape and data array!","code":["t.itemType == type","t.shape() == shape","t.mut.data.ref == expected"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Double","class java.lang.Float","class java.lang.Byte","class java.lang.Byte","class java.lang.String"],"list":["[1, 2, 1]","[5, -4]","[3, 4]","[[3], [4]]","[[3, 4]]"],"shape":["[3]","[2]","[2]","[2, 1]","[1, 2]"],"expected":["[1.0, 2.0, 1.0]","[5.0, -4.0]","[3, 4]","[3, 4]","[3, 4]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors as String can be formatted on an entry based level.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor of rank 2 storing Strings:","code":["Tsr t = Tsr.of(DataType.of(String.class), [2, 3], (i, indices) -> {","    return [\"sweet\", \"salty\", \"blue\", \"spinning\", \"confused\", \"shining\"].get( (i + 17**i)%6 ) + ' ' +","           [\"Saitan\", \"Apple\", \"Tofu\",  \"Strawberry\", \"Almond\", \"Salad\"].get( (i + 7**i)%6  )","})"]},

        {"kind":"expect","text":"The tensor converted to a String with custom cell bounds, size, etc... should be as expected:","code":["t.toString({ NDPrintSettings it ->","      it.setHasSlimNumbers(false)","      .setIsScientific(true)","      .setIsCellBound(true)","      .setIsMultiline(true)","      .setCellSize(5)","})  == \"(2x3):[\\n\" +","         \"   [ sal.., swe.., spi.. ],\\n\" +","         \"   [ blu.., shi.., con.. ]\\n\" +","         \"]\""]},

        {"kind":"and","text":"When increase the cell size, most String entries will be printed fully.","code":["t.toString({ NDPrintSettings it ->","            it.setHasSlimNumbers(false)","            .setIsScientific(true)","            .setIsCellBound(true)","            .setIsMultiline(true)","            .setCellSize(15)","}) == \"(2x3):[\\n\" +","                   \"   [   salty Apple  ,    sweet Tofu  , spinning Stra.. ],\\n\" +","                   \"   [   blue Almond  ,  shining Salad , confused Saitan ]\\n\" +","                   \"]\""]},

        {"kind":"and","text":"Now we try a cell size of 10:","code":["t.toString(","        { NDPrintSettings it -> it.setIsCellBound(true).setCellSize(10)}",") == \"(2x3):[salty Ap.., sweet Tofu, spinning.., blue Alm.., shining .., confused..]\""]},

        {"kind":"and","text":"We can also configure a postfix and prefix as well as limit the number of entries in a row:","code":["t.toString({ NDPrintSettings it ->","                            it.setPrefix('START<|').setPostfix('|>END').setCellSize(0).setIsCellBound(false).setRowLimit(2) }",") == \"START<|(2x3):[salty Apple, sweet Tofu, ... + 4 more]|>END\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Numeric tensors as String can be formatted on an entry based level.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor of rank 2 storing floats:","code":["var t = Tsr.of(DataType.of(Float.class), [2, 3], (i, indices) -> (i%4)/3 as float )"]},

        {"kind":"expect","text":"When we convert the tensor to a String with scientific formatting.","code":["t.toString(","        { NDPrintSettings it -> it.setHasSlimNumbers(false).setIsScientific(true).setIsCellBound(false).setIsMultiline(false).setCellSize(3) }",") == \"(2x3):[0.0, 0.33333, 0.66666, 1.0, 0.0, 0.33333]\""]},

        {"kind":"and","text":"If the numbers are still to verbose, we can make them \"slim\":","code":["t.toString(","{ NDPrintSettings it -> it.setHasSlimNumbers(true).setIsScientific(true).setCellSize(0) }",") == \"(2x3):[0, .33333, .66666, 1, 0, .33333]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors as String can be formatted depending on shape.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We configure a NDPrintSettings object.","code":["def settings =","Neureka.get()","        .settings()","        .view()","        .getNDPrintSettings()","        .clone()","        .setRowLimit(  mode.contains( \"s\" ) ? 3 : 32 )","        .setIsScientific( mode.contains( \"c\" )  )","        .setIsMultiline( mode.contains( \"f\" ) )","        .setHasGradient( mode.contains( \"g\" ) )","        .setCellSize(  mode.contains( \"p\" ) ? 6 : mode.contains( \"f\" ) ? 2 : 1  )","        .setHasValue( !(mode.contains( \"shp\" ) || mode.contains(\"shape\")) )","        .setHasRecursiveGraph( mode.contains( \"r\" ) )","        .setHasDerivatives(  mode.contains( \"d\" ) )","        .setHasShape(  !mode.contains( \"v\" ) )","        .setIsCellBound(  mode .contains( \"b\" ) )","        .setPostfix(  \"\" )","        .setPrefix(  \"\" )","        .setHasSlimNumbers(  false )"]},

        {"kind":"and","text":"Four tensors of various data types:","code":["Tsr<Float>   t1 = Tsr.of( Float.class,   shape, -4f..5f ).set( Tsr.of( shape, -7f..3f ) )","Tsr<Double>  t2 = Tsr.of( Double.class,  shape, -4d..5d ).set( Tsr.of( shape, -7d..3d ) )","Tsr<Integer> t3 = Tsr.of( Integer.class, shape, -4..5   ).set( Tsr.of( shape, -7..3   ) )","Tsr<Short>   t4 = Tsr.of( Short.class,   shape, (-4 as short)..(5 as short) ).set( Tsr.of( shape, (-7 as short)..(3 as short) ) )","Tsr<Byte>    t5 = Tsr.of( Byte.class,    shape, (-4 as byte )..(5 as byte ) ).set( Tsr.of( shape, (-7 as byte)..(3 as byte) ) )"]},

        {"kind":"expect","text":"The first tensor has the expected internals and produces the correct String representation.","code":["t1.toString(settings) == expected","t1.dataType == DataType.of( Float.class )","t1.mut.data.ref instanceof float[]"]},

        {"kind":"and","text":"The second tensor has the expected internals and produces the correct String representation.","code":["t2.toString(settings) == expected","t2.dataType == DataType.of( Double.class )","t2.mut.data.ref instanceof double[]"]},

        {"kind":"and","text":"The third tensor has the expected internals and produces the correct String representation.","code":["t3.toString(settings).replace(' ','') == expected.replace('.0','  ').replace(' ','')","t3.dataType == DataType.of( Integer.class )","t3.mut.data.ref instanceof int[]"]},

        {"kind":"and","text":"The fourth tensor has the expected internals and produces the correct String representation.","code":["t4.toString(settings).replace(' ','') == expected.replace('.0','  ').replace(' ','')","t4.dataType == DataType.of( Short.class )","t4.mut.data.ref instanceof short[]"]},

        {"kind":"and","text":"The fifth tensor has the expected internals and produces the correct String representation.","code":["t5.toString(settings).replace(' ','') == expected.replace('.0','  ').replace(' ','')","t5.dataType == DataType.of( Byte.class )","t5.mut.data.ref instanceof byte[]"]},

        {"kind":"where","text":"The print configurations codes \"mode\", a common shape and expected String representation will be supplied:","code":{"shape":["[2, 3]","[2, 3]","[3, 2]","[2, 3, 4]","[2, 2, 3, 4]","[2, 70]","[2, 100]","[70, 2]"],"mode":["fap","fa","fp","fp","fp","f","f","f"],"expected":["(2x3):[\n   [  -4.0 ,  -3.0 ,  -2.0  ],\n   [  -1.0 ,   0.0 ,   1.0  ]\n]","(2x3):[\n   [ -4.0, -3.0, -2.0 ],\n   [ -1.0, 0.0, 1.0 ]\n]","(3x2):[\n   [  -4.0 ,  -3.0  ],\n   [  -2.0 ,  -1.0  ],\n   [   0.0 ,   1.0  ]\n]","(2x3x4):[\n   [\n      [  -4.0 ,  -3.0 ,  -2.0 ,  -1.0  ],\n      [   0.0 ,   1.0 ,   2.0 ,   3.0  ],\n      [   4.0 ,   5.0 ,  -4.0 ,  -3.0  ]\n   ],\n   [\n      [  -2.0 ,  -1.0 ,   0.0 ,   1.0  ],\n      [   2.0 ,   3.0 ,   4.0 ,   5.0  ],\n      [  -4.0 ,  -3.0 ,  -2.0 ,  -1.0  ]\n   ]\n]","(2x2x3x4):[\n   [\n      [\n         [  -4.0 ,  -3.0 ,  -2.0 ,  -1.0  ],\n         [   0.0 ,   1.0 ,   2.0 ,   3.0  ],\n         [   4.0 ,   5.0 ,  -4.0 ,  -3.0  ]\n      ],\n      [\n         [  -2.0 ,  -1.0 ,   0.0 ,   1.0  ],\n         [   2.0 ,   3.0 ,   4.0 ,   5.0  ],\n         [  -4.0 ,  -3.0 ,  -2.0 ,  -1.0  ]\n      ]\n   ],\n   [\n      [\n         [   0.0 ,   1.0 ,   2.0 ,   3.0  ],\n         [   4.0 ,   5.0 ,  -4.0 ,  -3.0  ],\n         [  -2.0 ,  -1.0 ,   0.0 ,   1.0  ]\n      ],\n      [\n         [   2.0 ,   3.0 ,   4.0 ,   5.0  ],\n         [  -4.0 ,  -3.0 ,  -2.0 ,  -1.0  ],\n         [   0.0 ,   1.0 ,   2.0 ,   3.0  ]\n      ]\n   ]\n]","(2x70):[\n   [ -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, ..38 more.., 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 ],\n   [ -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, ..38 more.., 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n]","(2x100):[\n   [ -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, ..68 more.., 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 ],\n   [ -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, ..68 more.., 1.0, 2.0, 3.0, 4.0, 5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n]","(70x2):[\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ],\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ],\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ],\n   [ -4.0, -3.0 ],\n   ... 38 more ...\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ],\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ],\n   [ -4.0, -3.0 ],\n   [ -2.0, -1.0 ],\n   [ 0.0, 1.0 ],\n   [ 2.0, 3.0 ],\n   [ 4.0, 5.0 ]\n]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can create scalar tensors.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new instance of a scalar tensor.","code":["Tsr<Double> t = Tsr.of( 6d )"]},

        {"kind":"expect","text":"The tensor is not stored on another device, meaning that it is not \"outsourced\".","code":["!t.isOutsourced()"]},

        {"kind":"and","text":"The tensor contains the expected data.","code":["t.mut.data.ref == [6] as double[]","t.items == [6d]","t.rawItems == [6] as double[]"]},

        {"kind":"and","text":"We can read the data in various array types:","code":["t.getItemsAs( double[].class ) == [6] as double[]","t.getItemsAs( float[].class  ) == [6] as float[]","t.getDataAs( double[].class ) == [6] as double[]","t.getDataAs( float[].class  ) == [6] as float[]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensor created from shape and datatype has expected state.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new vector tensor is being instantiated.","code":["Tsr<Byte> t = Tsr.of(  DataType.of(I8.class ), new int[]{ 2 } )"]},

        {"kind":"expect","text":"The vector is initialized with zeros.","code":["t.items == [0, 0] as List<Byte>"]},

        {"kind":"and","text":"We can access and verify this through the following ways as well:","code":["t.getItemsAs( double[].class ) == [0, 0] as double[]","t.getItemsAs( float[].class ) == [0, 0] as float[]","t.mut.data.ref == [0] as byte[]"]},

        {"kind":"and","text":"It is not stored on another device, meaning that it is not \"outsourced\".","code":["!t.isOutsourced()","t.isVirtual()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The data and the value of a tensor a 2 different things!",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a simple vector:","code":["var v = Tsr.ofFloats().withShape(3).andFill(-2, 4, 8)"]},

        {"kind":"and","text":"And then we store it on the device we want to test.","code":["v.to(device)"]},

        {"kind":"when","text":"We create a slice of the above vector, a scalar...","code":["var s = v.slice().axis(0).at(1).get()"]},

        {"kind":"then","text":"The slice contains the expected value with respect to the slice parent...","code":["v.at(1).get() == s.at(0).get()"]},

        {"kind":"and","text":"They both do not share the same value array.","code":["v.items != s.items"]},

        {"kind":"and","text":"They do however share the same underlying data.","code":["v.mut.data.ref == s.mut.data.ref"]},

        {"kind":"and","text":"The tensor simply stores the number 4.","code":["s.items == [4f]"]},

        {"kind":"where","text":"We test the following devices:","code":{"device":["CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}