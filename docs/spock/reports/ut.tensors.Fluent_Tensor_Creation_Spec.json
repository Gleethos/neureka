{
  "className":"ut.tensors.Fluent_Tensor_Creation_Spec",
  "title":"",
  "narrative":"",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.022 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Tensors can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!","This feature is based on a fluent builder API!"]
      },
      "blocks":[
        {"kind":"given","text":"We create a new homogeneously filled Tsr instance using the fluent builder API.","code":["    Tsr<?> t = Tsr.of( type )","                         .withShape( 3, 2 )","                         .all( value )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["    t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["    t.mut.data.ref == data","    t.rawData.length == 1","    t.items.size() == 6"]},

        {"kind":"and","text":"The tensor will have the shape we passed to the builder.","code":["    t.shape() == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries!","code":["    t.size() == 6"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is homogeneously filled it will be a \"virtual tensor\"\n                This means that the tensor will not have allocated the memory proportional to the size\n                of the tensor!\n            ","code":["    t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Boolean","class java.lang.Character"],"value":["4","4.0","4.0","42","false","°"],"data":["[4]","[4.0]","[4.0]","[42]","[false]","°"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Range based tensors can be created fluently.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a range based Tsr instance using the fluent builder API.","code":["Tsr<?> t = Tsr.of( type )","                .withShape( 3, 2 )","                .andFillFrom( from ).to( to ).step( step )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == data","t.rawData == data"]},

        {"kind":"and","text":"The tensor will have the shape we passed to the builder.","code":["t.shape() == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries!","code":["t.size() == 6"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is not homogeneously filled it will be an \"actual tensor\".\n                The opposite of that, a \"virtual tensor\", would mean that a tensor does not have allocated \n                memory proportional to the size of the tensor! \n                In this case however the tensor should be actual which means that it is not virtual.\n            ","code":["!t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Integer","class java.lang.Double","class java.lang.Double","class java.lang.Float","class java.lang.Float","class java.lang.Byte","class java.lang.Long"],"from":["-9","-2","2.7","-3.0","6.4","0.0","-5","-65"],"to":["18","4","45.0","3.0","78.3","1.0","6","45"],"step":["2.0","2.0","3.0","0.5","4.0","0.2","2.0","5.0"],"data":["[-9, -7, -5, -3, -1, 1]","[-2, 0, 2, 4, -2, 0]","[2.7, 5.7, 8.7, 11.7, 14.7, 17.7]","[-3.0, -2.5, -2.0, -1.5, -1.0, -0.5]","[6.4, 10.4, 14.4, 18.4, 22.4, 26.4]","[0.0, 0.2, 0.4, 0.6, 0.8, 1.0]","[-5, -3, -1, 1, 3, 5]","[-65, -60, -55, -50, -45, -40]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Value based tensors can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Tsr instance by passing an array of arguments which ought to iteratively fill the instance.","code":["Tsr<?> t = Tsr.of( type )","                .withShape( 3, 2 )","                .andFill( data )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == expected","t.rawData == expected"]},

        {"kind":"and","text":"The tensor will have the shape we passed to the builder.","code":["t.shape() == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries!","code":["t.size() == 6"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is not homogeneously filled it will be an \"actual tensor\".\n                The opposite of that, a \"virtual tensor\", would mean that a tensor does not have allocated \n                memory proportional to the size of the tensor! \n                In this case however the tensor should be actual which means that it is not virtual.\n            ","code":["!t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Short","class java.lang.Float","class java.lang.Byte","class java.lang.Long","class java.lang.Boolean","class java.lang.Character"],"data":["[2, 3, 4]","[-5.0, 6.5, 7.0]","[6, -1, -2]","[22.4, 26.4]","[-20, 3, 4, -3]","[23, 199]","[true, false]","[x, y]"],"expected":["[2, 3, 4, 2, 3, 4]","[-5.0, 6.5, 7.0, -5.0, 6.5, 7.0]","[6, -1, -2, 6, -1, -2]","[22.4, 26.4, 22.4, 26.4, 22.4, 26.4]","[-20, 3, 4, -3, -20, 3]","[23, 199, 23, 199, 23, 199]","[true, false, true, false, true, false]","xyxyxy"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Seed based tensors can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Tsr instance by passing an array of arguments which ought to be populated based on a seed.","code":["Tsr<?> t = Tsr.of( type )","                .withShape( 3, 2 )","                .andSeed( seed )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == expected","t.rawData == expected"]},

        {"kind":"and","text":"The tensor will have the shape we passed to the builder.","code":["t.shape() == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries!","code":["t.size() == 6"]},

        {"kind":"and","text":"","code":["t.toString().startsWith(\"(3x2):\")"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is not homogeneously filled it will be an \"actual tensor\".\n                The opposite of that, a \"virtual tensor\", would mean that a tensor does not have allocated \n                memory proportional to the size of the tensor! \n                In this case however the tensor should be actual which means that it is not virtual.\n            ","code":["!t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Short","class java.lang.Float","class java.lang.Byte","class java.lang.Long","class java.lang.Boolean","class java.lang.Character"],"seed":["a","b","c","d","e","f","g","h"],"expected":["[1431614970, 345625747, -1944974668, -1560046587, -840164727, 1545421892]","[0.5099337204650233, -0.1940291796851406, 1.4457326764876133, 1.1037197321548482, 0.5318191965243577, 0.19202511115716991]","[-14216, -20070, 24851, -22296, -9925, 31593]","[1.4457327, 1.1037197, 0.5318192, 0.19202511, 0.450341, -0.18904476]","[57, 26, -121, -59, -23, 90]","[7366351542344062765, -5751258536495446167, -794811082727408195, 283695574932216990, -455308978758056709, -8426760264878742120]","[true, false, false, false, false, true]","皜ЍꚈ寜"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Initialization lambda based tensors can be created fluently.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a Tsr instance by passing an initialization lambda which ought to iteratively fill the instance.","code":["Tsr<?> t = Tsr.of( type )","                .withShape( 3, 2 )","                .andWhere( initializer )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == expected","t.rawData == expected"]},

        {"kind":"and","text":"The tensor will have the shape we passed to the builder.","code":["t.shape() == [3, 2]"]},

        {"kind":"and","text":"The size of the tensor will be the product of all shape entries!","code":["t.size() == 6"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is not homogeneously filled it will be an \"actual tensor\".\n                The opposite of that, a \"virtual tensor\", would mean that a tensor does not have allocated \n                memory proportional to the size of the tensor! \n                In this case however the tensor should be actual which means that it is not virtual.\n            ","code":["!t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Short","class java.lang.Float","class java.lang.Byte","class java.lang.Long","class java.lang.Character","class java.lang.Boolean"],"initializer":["ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure1@2932a67f","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure2@673b3cfb","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure3@3653ada2","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure4@379887ac","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure5@1804f66a","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure6@3780ff79","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure7@3039bb6f","ut.tensors.Fluent_Tensor_Creation_Spec$__spock_feature_0_4prov1_closure8@731111a4"],"expected":["[0, 2, 3, 5, 6, 8]","[0.0, 2.0, 3.0, 5.0, 6.0, 8.0]","[0, 2, 3, 5, 6, 8]","[0.0, 2.0, 3.0, 5.0, 6.0, 8.0]","[0, 2, 3, 5, 6, 8]","[0, 2, 3, 5, 6, 8]","\u0000\u0002\u0003\u0005\u0006\b","[true, false, true, false, true, false]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Vectors can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a new Tsr instance using the \"vector\" method in the fluent builder API.","code":["Tsr<?> t = Tsr.of( type ).vector( values )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == data","t.rawData == data"]},

        {"kind":"and","text":"The tensor will have a one dimensional shape of the same length as the provided data array.","code":["t.shape() == [values.length]"]},

        {"kind":"and","text":"The size of the tensor will also be as long as the data array!","code":["t.size() == values.length"]},

        {"kind":"and","text":"\n                Based on the fact that the tensor is not homogeneously filled it will be an \"actual tensor\".\n                The opposite of that, a \"virtual tensor\", would mean that a tensor does not have allocated \n                memory proportional to the size of the tensor! \n                In this case however the tensor should be actual which means that it is not virtual.\n            ","code":["!t.isVirtual()"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Long"],"values":["[4, 5, -2]","[-1.0, 7.5]","[0.6, -32.7]","[1, 3, 2, 4]"],"data":["[4, 5, -2]","[-1.0, 7.5]","[0.6, -32.7]","[1, 3, 2, 4]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Scalars can be created fluently.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a new Tsr instance using the \"scalar\" method in the fluent builder API.","code":["Tsr<?> t = Tsr.of( type ).scalar( value )"]},

        {"kind":"expect","text":"This new instance will have the expected data type...","code":["t.dataType == DataType.of(type)"]},

        {"kind":"and","text":"...also it will contain the expected data.","code":["t.mut.data.ref == data","t.rawData == data"]},

        {"kind":"and","text":"The tensor will have a one dimensional shape of 1.","code":["t.shape() == [1]"]},

        {"kind":"and","text":"The size of the tensor will also 1!","code":["t.size() == 1"]},

        {"kind":"where","text":"The following data is being used to populate the builder API:","code":{"type":["class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Long"],"value":["3","5.7","9.4","42"],"data":["[3]","[5.7]","[9.4]","[42]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}