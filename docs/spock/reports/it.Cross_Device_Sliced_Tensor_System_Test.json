{
  "className":"it.Cross_Device_Sliced_Tensor_System_Test",
  "title":"Cross Device Tensor Slicing",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.150 seconds"
  },
  "headers":[" \n                <p>\n                    This specification covers the behavior of tensors when being sliced\n                    on multiple different device types in conjunction with \n                    the autograd system.\n                    Autograd should work on slices as well.          \n                </p>\n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Slices can be created using the SliceBuilder.",
      "result":"PASS",
      "duration":"0.055 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["if ( device == null ) return","Neureka.get().settings().autograd().isApplyingGradientWhenTensorIsUsed = false","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(false)","if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"A tensor which ought to be sliced:","code":["Tsr a = Tsr.of([4, 6], [","    1d, 2d, 3d, 4d, 5d, 6d,","    7d, 8d, 9d, 1d, 2d, 3d,","    4d, 5d, 6d, 7d, 8d, 9d,","    1d, 2d, 3d, 4d, 5d, 6d","])","device.store(a)"]},

        {"kind":"when","text":"","code":["Tsr b = a.slice() // [-1..-3, -6..-3]",".axis(0).from(-1).to(-3)",".axis(1).from(-6).to(-3)",".get()","Tsr s = a.slice() // [1, -2]",".axis(0).at(1)",".axis(1).at(-2)",".get()","s.rqsGradient = true"]},

        {"kind":"then","text":"","code":["s.toString() == \"(1x1):[2.0]:g:[null]\"","s.item(0) == 2.0","s.rqsGradient()","b.toString().contains(\"7.0, 8.0, 9.0, 1.0, 4.0, 5.0, 6.0, 7.0, 1.0, 2.0, 3.0, 4.0\")","b.spread() != null"]},

        {"kind":"when","text":"","code":["Tsr y = ( s * 4 ) ** 1.5"]},

        {"kind":"then","text":"","code":["y.toString() == '(1x1):[22.6274]; ->d(1x1):[16.9706]'"]},

        {"kind":"where","text":"","code":{"device":["OpenCLDevice[id=0x1b93078a200,platform=0x7fffb0f28000]","CPU[coreCount=32]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Cross device sliced tensor integration test runs without errors.",
      "result":"PASS",
      "duration":"0.086 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["if ( device == null ) return","Neureka.get().settings().autograd().isApplyingGradientWhenTensorIsUsed = false","Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","if ( device instanceof OpenCLDevice && !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"when","text":"","code":["Tsr x = Tsr.of([1],  3d).setRqsGradient(true)","Tsr b = Tsr.of([1], -4d)","Tsr w = Tsr.of([1],  2d)","device.store(x).store(b).store(w)","Tsr y = Tsr.of(\"((i0+i1)*i2)**2\", [x, b, w])"]},

        {"kind":"then","text":"","code":["y.indicesMap() != null","y.toString().contains(\"[1]:(4.0); ->d[1]:(-8.0)\")"]},

        {"kind":"when","text":"","code":["y.backward(Tsr.of(2d))","y = ( ( x + b ) * w )**2"]},

        {"kind":"then","text":"","code":["y.toString().contains(\"[1]:(4.0); ->d[1]:(-8.0)\")"]},

        {"kind":"when","text":"","code":["y.backward(Tsr.of(2d))","x.toString().contains(\"-32.0\")","y = b + w * x","Tsr a = Tsr.of([4, 6], [","        1d, 2d, 3d, 4d, 5d, 6d,","        7d, 8d, 9d, 1d, 2d, 3d,","        4d, 5d, 6d, 7d, 8d, 9d,","        1d, 2d, 3d, 4d, 5d, 6d","])","device.store(a)","b = a[[-1..-3, -6..-3]]","var s = a[[1, -2]]"]},

        {"kind":"then","text":"","code":["s.toString() == \"[1x1]:(2.0)\"","s.item(0) == 2.0","b.toString().contains(\"7.0, 8.0, 9.0, 1.0, 4.0, 5.0, 6.0, 7.0, 1.0, 2.0, 3.0, 4.0\")","b.spread() != null"]},

        {"kind":"when","text":"","code":["b = a[-3..-1, 0..3]","s = a[1, -2]"]},

        {"kind":"then","text":"","code":["s.toString() == \"[1x1]:(2.0)\"","s.item(0) == 2.0","s.getDataAt(0) == 1.0","s.getDataAt(1) == 2.0","b.toString().contains(\"7.0, 8.0, 9.0, 1.0, 4.0, 5.0, 6.0, 7.0, 1.0, 2.0, 3.0, 4.0\")","b.spread() != null"]},

        {"kind":"when","text":"","code":["if( device instanceof DummyDevice ) {","    a.getDataAs( double[].class )[1] = a.getDataAs( double[].class )[1] * 6","    a.getDataAs( double[].class )[7] = a.getDataAs( double[].class )[7] * 2","} else {","    Tsr k = Tsr.of([4, 6], [","                    1d, 6d, 1d, 1d,","                    1d, 1d, 1d, 2d,","                    1d, 1d, 1d, 1d,","                    1d, 1d, 1d, 1d,","                    1d, 1d, 1d, 1d,","                    1d, 1d, 1d, 1d","                ])","    device.store( k )","    a[] = a * k","}"]},

        {"kind":"then","text":"","code":["b.toString().contains(\"7.0, 16.0, 9.0, 1.0, 4.0, 5.0, 6.0, 7.0, 1.0, 2.0, 3.0, 4.0\")"]},

        {"kind":"when","text":"","code":["Tsr c = Tsr.of([3, 4], [","    -3d, 2d, 3d,","     5d, 6d, 2d,","    -1d, 1d, 2d,","     3d, 4d, 2d,","])","Tsr d = b + c"]},

        {"kind":"then","text":"","code":["(d.NDConf.asInlineArray() as List) == ( [3, 4, 4, 1, 4, 1, 0, 0, 1, 1] )","(b.NDConf.asInlineArray() as List) == ( [3, 4, 6, 1, 4, 1, 1, 0, 1, 1] )","(c.NDConf.asInlineArray() as List) == ( [3, 4, 4, 1, 4, 1, 0, 0, 1, 1] )","d.toString().contains(","    \"4.0, 18.0, 12.0, 6.0, \"+","    \"10.0, 7.0, 5.0, 8.0, \"+","    \"3.0, 5.0, 7.0, 6.0\"",")"]},

        {"kind":"when","text":"","code":["b = a[1..3, 2..4]"]},

        {"kind":"then","text":"","code":["b.toString().contains(\"9.0, 1.0, 2.0, 6.0, 7.0, 8.0, 3.0, 4.0, 5.0\")","b.spread() != null"]},

        {"kind":"when","text":"","code":["b = a[[[0..3]:2, [1..4]:2]]"]},

        {"kind":"then","text":"","code":["b.toString().contains( \"12.0, 4.0, 5.0, 7.0\" )","b.spread() != null"]},

        {"kind":"when","text":"","code":["Tsr p = Tsr.of([2,2], [2d, 55d, 4d, 7d]).to((device instanceof DummyDevice)?null:device)","Tsr u = Tsr.of([2,2], [5d, 2d, 7d, 34d]).to((device instanceof DummyDevice)?null:device)","p[] = u"]},

        {"kind":"then","text":"","code":["p.toString().contains(\"5.0, 2.0, 7.0, 34.0\")"]},

        {"kind":"when","text":"","code":["a[[[0..3]:2, [1..4]:2]] = Tsr.of([2, 2], [1d, 2d, 3d, 4d])"]},

        {"kind":"then","text":"","code":["b.toString().contains(\"1.0, 2.0, 3.0, 4.0\")","a.toString().contains(","        \"1.0, 1.0, 3.0, 2.0, 5.0, 6.0, \" +","        \"7.0, 16.0, 9.0, 1.0, 2.0, 3.0, \" +","        \"4.0, 3.0, 6.0, 4.0, 8.0, 9.0, \" +","        \"1.0, 2.0, 3.0, 4.0, 5.0, 6.0\"",")"]},

        {"kind":"when","text":"","code":["a[1..2, 1..2] = Tsr.of([2, 2], [8, 8, 8, 8])"]},

        {"kind":"then","text":"","code":["b.toString().contains(","        \"1.0, 2.0, \"+","        \"8.0, 4.0\"",")","a.toString().contains(","        \"1.0, 1.0, 3.0, 2.0, 5.0, 6.0, \" +","        \"7.0, 8.0, 8.0, 1.0, 2.0, 3.0, \" +","        \"4.0, 8.0, 8.0, 4.0, 8.0, 9.0, \" +","        \"1.0, 2.0, 3.0, 4.0, 5.0, 6.0\"",")"]},

        {"kind":"when","text":"","code":["b.setRqsGradient(true)","c = Tsr.of([2, 2], [","    -2, 3,//-2 + 24 + 3 + 8","     1, 2,","])","device.store(b).store(c)","x = Tsr.of(b, \"x\", c)"]},

        {"kind":"then","text":"","code":["x.toString().contains(\"[1x1]:(20.0); ->d[2x2]:(-2.0, 3.0, 1.0, 2.0)\")"]},

        {"kind":"where","text":"","code":{"device":["CPU[coreCount=32]","OpenCLDevice[id=0x1b93078a200,platform=0x7fffb0f28000]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}