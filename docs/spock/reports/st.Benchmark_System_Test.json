{
  "className":"st.Benchmark_System_Test",
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"2.191 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Tensor can be constructed by passing List instances.",
      "result":"PASS",
      "duration":"0.669 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["var t = Tsr.ofDoubles().withShape(1, 3, 6 ).all(0)"]},
        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(1x3x6)\")"]},
        {"kind":"when","text":"","code":["t = Tsr.ofDoubles().withShape(1, 3, 6).all(0)"]},
        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(1x3x6):[0.0, 0.0, 0.0\")"]},
        {"kind":"when","text":"","code":["t = Tsr.of([1, 3.3, 6])"]},
        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(3):[1.0, 3.3, 6.0]\")"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Test benchmark script and simple tensor constructor.",
      "result":"PASS",
      "duration":"1.519 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def configuration = [ \"iterations\":1, \"sample_size\":20, \"difficulty\":15, \"intensifier\":0 ]"]},
        {"kind":"and","text":"The benchmark script is being loaded into a GroovyShell instance.","code":["def session = new GroovyShell().evaluate(Load.resourceAt(\"benchmark.groovy\", this))"]},
        {"kind":"and","text":"A String instance for the result hash is being instantiated and the expected hash.","code":["String hash = \"\"","String expected = \"7084fb60f29fcce1ac96c2bee9c37b37\""]},
        {"kind":"when","text":"The benchmark script is being called...","code":["Map<String,List<Double>> result = session(","        configuration, null,","        CPU.get(),","        tsr -> {","            hash = (hash+tsr.toString()).md5()","        }",")"]},
        {"kind":"then","text":"The hash is as expected.","code":["hash == expected"]},
        {"kind":"and","text":"","code":["result.keySet().toList() == [\"convolutional_matrix_multiplication\", \"matrix_multiplication\", \"vector_multiplication\", \"manual_convolution\", \"tensor_math\", \"iterations\", \"difficulty\"]"]},
        {"kind":"and","text":"","code":["result.values().every { it.size() == 21 && it.every { it > 0 } }"]},
        {"kind":"when","text":"Only continue if testing system supports OpenCL.","code":["if ( !Neureka.get().canAccessOpenCLDevice() ) return"]},
        {"kind":"and","text":"The benchmark is now being executed with the first found OpenCLDevice instance...","code":["hash = \"\"","session(","        configuration, null,","        Device.get(\"first\"),","            tsr -> {","                hash = ( hash + tsr.toString() ).md5()","            }",")"]},
        {"kind":"then","text":"The calculated hash is as expected.","code":["hash == expected"]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}