{
  "className":"st.Benchmark_System_Test",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.910 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Tensor can be constructed by passing List instances.",
      "result":"PASS",
      "duration":"0.150 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["when : var t = Tensor.ofDoubles().withShape(1, 3, 6 ).all(0)"]},

        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(1x3x6)\")"]},

        {"kind":"when","text":"","code":["when : t = Tensor.ofDoubles().withShape(1, 3, 6).all(0)"]},

        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(1x3x6):[0.0, 0.0, 0.0\")"]},

        {"kind":"when","text":"","code":["when : t = Tensor.of([1, 3.3, 6])"]},

        {"kind":"then","text":"","code":["assert !t.toString().contains(\"empty\")","assert t.toString().contains(\"(3):[1.0, 3.3, 6.0]\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Test benchmark script and simple tensor constructor.",
      "result":"PASS",
      "duration":"0.758 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().backend().find(CLBackend).ifPresent({it.settings.autoConvertToFloat = true})"]},

        {"kind":"and","text":"","code":["var configuration = [ \"iterations\":1, \"sample_size\":20, \"difficulty\":15, \"intensifier\":0 ]","var strSettings = (Consumer<NDPrintSettings>) { NDPrintSettings it ->","                        it.cellSize = 7; it.isCellBound = true; // We use this to cap decimals to avoid rounding errors.","                    }"]},

        {"kind":"and","text":"The benchmark script is being loaded into a GroovyShell instance.","code":["var session = new GroovyShell().evaluate(Load.resourceAt(\"benchmark.groovy\", this))"]},

        {"kind":"and","text":"A String instance for the result hash is being instantiated and the expected hash.","code":["String hash = \"\"","String expected = \"58ed847a16ddc3bf7847f64091ff5d4d\"","var rec = []"]},

        {"kind":"when","text":"The benchmark script is being called...","code":["Map<String,List<Double>> result = session(","                        configuration, null,","                        CPU.get(),","                        tsr -> {","                            var str = tsr.toString(strSettings)","                            rec << str","                            hash = (hash+str).md5()","                        }","                )"]},

        {"kind":"then","text":"The hash is as expected.","code":["hash == expected"]},

        {"kind":"and","text":"","code":["result.keySet().toList() == [\"convolutional_matrix_multiplication\", \"matrix_multiplication\", \"vector_multiplication\", \"manual_convolution\", \"tensor_math\", \"iterations\", \"difficulty\"]"]},

        {"kind":"and","text":"","code":["result.values().every { it.size() == 21 && it.every { it > 0 } }"]},

        {"kind":"when","text":"Only continue if testing system supports OpenCL.","code":["if ( !Neureka.get().canAccessOpenCLDevice() ) return"]},

        {"kind":"and","text":"The benchmark is now being executed with the first found OpenCLDevice instance...","code":["hash = \"\"","var i = 0","session(","    configuration, null,","    Device.get(\"first\"),","        tsr -> {","            var str = tsr.toString(strSettings)","            if ( rec[i] != str ) println \"Mismatch at index $i:\\n${rec[i]}\\n$str\\n\"","            hash = ( hash + str ).md5()","            i++","        }",")"]},

        {"kind":"then","text":"The calculated hash is as expected.","code":["hash == expected"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
