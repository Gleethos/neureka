{
  "className":"ut.ndim.Tensor_Permute_Spec",
  "title":"Reshaping Tensors",
  "narrative":"Permuting an N-dimensional array means rearranging the dimensions/axes of the N-dimensional array.\n    It produces a new tensor with the same data as the original tensor,\n    but with the specified dimensions rearranged.\n\n    This is very useful for example when you want to\n    change the order of dimensions, for example, if you have a tensor with dimensions (batch_size, channels, height, width),\n    you can use permute() to rearrange the dimensions to (batch_size, height, width, channels).\n    Another useful application of permute() is transposing a matrix.\n    For example, if you have a matrix with dimensions (rows, columns),\n    you can use permute() to rearrange the dimensions to (columns, rows).\n\n    Permuting is a very cheap operation because it does not copy any data but merely\n    creates a new view on the same data with a different access pattern.",
  "subjects":["neureka.Tensor"],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.004 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can use the \"permute\" method to rearrange the dimensions of a tensor.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            In Neureka `Tensor::permute(int...)` rearranges the original tensor according to the desired \n            ordering and returns a new multidimensional rotated tensor. \n            The size of the returned tensor remains the same as that of the original.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A tensor with a shape of [2, 4, 6, 8]","code":["Tensor t = Tensor.ofFloats().withShape(2, 4, 6, 8).andSeed(42)"]},

        {"kind":"expect","text":"By default, the tensor has a row major layout.","code":["t.NDConf.layout == NDConfiguration.Layout.ROW_MAJOR","t.NDConf.traits == [NDTrait.COMPACT, NDTrait.SIMPLE, NDTrait.ROW_MAJOR, NDTrait.CONTINUOUS_MATRIX]"]},

        {"kind":"when","text":"We create a new permuted tensor with the shape of [6, 4, 8, 2] and store it as `t2`.","code":["var t2 = t.permute( 2, 1, 3, 0 )"]},

        {"kind":"then","text":"The new tensor has the shape of [6, 4, 8, 2].","code":["t2.shape == [6, 4, 8, 2]"]},

        {"kind":"and","text":"A unspecific layout is assigned to the new tensor.","code":["t2.NDConf.layout == NDConfiguration.Layout.UNSPECIFIC","t2.NDConf.traits == [NDTrait.COMPACT, NDTrait.COL_MAJOR, NDTrait.CONTINUOUS_MATRIX]"]},

        {"kind":"and","text":"The new tensor has the same size as the original tensor, but it is not the same object.","code":["t2.size == t.size","t2 !== t"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"When matrices are transpose, they will change their layout type as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tensor t = Tensor.ofFloats().withShape(3, 4).andSeed(42)"]},

        {"kind":"expect","text":"","code":["t.NDConf.layout == NDConfiguration.Layout.ROW_MAJOR","t.NDConf.traits == [NDTrait.COMPACT, NDTrait.SIMPLE, NDTrait.ROW_MAJOR, NDTrait.CONTINUOUS_MATRIX]"]},

        {"kind":"when","text":"","code":["t = t.T"]},

        {"kind":"then","text":"","code":["t.NDConf.layout == NDConfiguration.Layout.COLUMN_MAJOR","t.NDConf.traits == [NDTrait.COMPACT, NDTrait.COL_MAJOR, NDTrait.CONTINUOUS_MATRIX]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
