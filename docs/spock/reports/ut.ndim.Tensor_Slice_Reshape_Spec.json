{
  "className":"ut.ndim.Tensor_Slice_Reshape_Spec",
  "title":"Reshaping Slices of Tensors",
  "narrative":"Neureka provides a convenient way to reshape tensors\n    even if they are slices of other tensors sharing the same underlying data.\n    This is possible because of the under the hood indexing \n    abstractions provided by the `NDConfiguration` interface and its various implementations.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.005 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A slice of a tensor changes as expected when reshaping it.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A parent tensor.","code":["Tsr A = Tsr.of([","        [  1,  5,  3, -6, -3,  8, -9,  4  ],","        [  0, -2,  2,  1, -1,  0,  5,  4  ],","        [ -6,  7,  7, -2,  9,  0,  1, -1  ],","        [  4,  4, -1,  8,  4, -3,  2, -9  ],","        [  7,  5, -2, -3,  7, -8,  5,  0  ]","])"]},

        {"kind":"when","text":"A slice of this tensor is being created...","code":["Tsr a = A[1..3, 4..5]"]},

        {"kind":"and","text":"And also a slice of \"a\" with the same dimensionality, namely : \"b\".","code":["Tsr b = a[]"]},

        {"kind":"then","text":"The slice and the parent are as expected.","code":["A.toString() == \"(5x8):[1.0, 5.0, 3.0, -6.0, -3.0, 8.0, -9.0, 4.0, 0.0, -2.0, 2.0, 1.0, -1.0, 0.0, 5.0, 4.0, -6.0, 7.0, 7.0, -2.0, 9.0, 0.0, 1.0, -1.0, 4.0, 4.0, -1.0, 8.0, 4.0, -3.0, 2.0, -9.0, 7.0, 5.0, -2.0, -3.0, 7.0, -8.0, 5.0, 0.0]\"","a.toString() == \"(3x2):[-1.0, 0.0, 9.0, 0.0, 4.0, -3.0]\""]},

        {"kind":"and","text":"The slice \"b\" of the slice \"a\" is a different tensor that references the same underlying data!","code":["a != b","a.toString() == b.toString()"]},

        {"kind":"when","text":"The slice \"a\" is being reshaped... (transposed)","code":["Tsr c = a.T()"]},

        {"kind":"then","text":"The returned tensor is a different one than \"a\".","code":["a != c"]},

        {"kind":"and","text":"The order of the value of \"c\" reflect the reshaping...","code":["c.toString() == \"(2x3):[-1.0, 9.0, 4.0, 0.0, 0.0, -3.0]\""]},

        {"kind":"and","text":"The tensor \"b\" and the tensor \"a\" have not changed.","code":["b.toString() == \"(3x2):[-1.0, 0.0, 9.0, 0.0, 4.0, -3.0]\"","a.toString() == \"(3x2):[-1.0, 0.0, 9.0, 0.0, 4.0, -3.0]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Two slices of one big tensor perform matrix multiplication flawless.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A parent tensor.","code":["Tsr X = Tsr.of([","        [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],","        [1000,   -2,    2, 1000, 1000, 1000, 1000, 1000],","        [1000,    7,    7, 1000, 1000, 1000, 1000, 1000],","        [1000, 1000, 1000,    8,    4, 1000, 1000, 1000],","        [1000, 1000, 1000,   -3,    7, 1000, 1000, 1000]","])"]},

        {"kind":"when","text":"Extracting and transposing two distinct slices from the tensor above...","code":["Tsr a = X[1..2, 1..2].T()","Tsr b = X[3..4, 3..4].T()"]},

        {"kind":"then","text":"These matrices as String instances look as follows.","code":["a.toString() ==","\"(2x2):[\" +","    \"-2.0, 7.0, \" + // -16 + 28 = 12 ;  6 + 49 = 55","    \"2.0, 7.0\" +    //  16 + 28 = 44 ; -6 + 49 = 43","\"]\"","b.toString() ==","\"(2x2):[\" +","    \"8.0, -3.0, \" +","    \"4.0, 7.0\" +","\"]\""]},

        {"kind":"when","text":"Both 2D matrices are being multiplied via the dot operation...","code":["Tsr c = a.convDot(b)"]},

        {"kind":"then","text":"This produces the following matrix: ","code":["c.toString() == \"(2x1x2):[12.0, 55.0, 44.0, 43.0]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Reshaping a slice works as expected.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A parent tensor from which we want to create slices.","code":["Tsr X = Tsr.of([","    [1000, 1000, 1000, 1000, ],","    [1000,   -1,    4, 1000, ],","    [1000,    2,    7, 1000, ],","    [1000,    5,   -9, 1000, ],","    [1000, 1000, 1000, 1000, ]","])"]},

        {"kind":"when","text":"We extract a slice from the tensor above...","code":["Tsr a = X[1..3, 1..2].T()"]},

        {"kind":"then","text":"","code":["a.toString() ==","\"(2x3):[\" +","\"-1.0, 2.0, 5.0, \" +","\"4.0, 7.0, -9.0\" +","\"]\""]},

        {"kind":"when","text":"","code":["Tsr b = Function.of(\"[-1, 0, 1]:(I[0])\")(a)"]},

        {"kind":"then","text":"","code":["a.toString() == \"(2x3):[\" +","\"-1.0, 2.0, 5.0, \" +","\"4.0, 7.0, -9.0\" +","\"]\"","b.toString() == \"(1x2x3):[\" +","\"-1.0, 2.0, 5.0, \" +","\"4.0, 7.0, -9.0\" +","\"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}