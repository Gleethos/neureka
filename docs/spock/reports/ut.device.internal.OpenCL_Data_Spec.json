{
  "className":"ut.device.internal.OpenCL_Data_Spec",
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.283 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The OpenCLDevice specific Data class represents JVM data for OpenCL.",
      "result":"PASS",
      "duration":"0.050 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We make sure that any data will not automatically be converted to floats!","code":["if ( Neureka.get().backend.has(CLContext) )","Neureka.get().backend.get(CLContext).settings.autoConvertToFloat = false"]},

        {"kind":"and","text":"We create 2 different data objects, a full and a partial/sliced array.","code":["var full = Data.of(data)","var slice = Data.of(data, size, start)"]},

        {"kind":"and","text":"An expected array based on the previous slice indices!","code":["var expected2 = expected[start..(start+size-1)]"]},

        {"kind":"expect","text":"Both data objects report the expected array types!","code":["full.array.class == expectedType","slice.array.class == expectedType"]},

        {"kind":"and","text":"Also they report the expected data array size.","code":["full.length == expected.size()","slice.length == expected2.size()"]},

        {"kind":"and","text":"","code":["full.array !== slice.array","full.array == expected","(data instanceof Number && slice.array == [data] ) || slice.array == expected2"]},

        {"kind":"and","text":"They produce OpenCL specific pointer objects.","code":["full.pointer != null","slice.pointer != null"]},

        {"kind":"cleanup","text":"","code":["if ( Neureka.get().backend.has(CLContext) )","Neureka.get().backend.get(CLContext).settings.autoConvertToFloat = true"]},

        {"kind":"where","text":"","code":{"data":["[2.0, 3.0, 6.0]","[8.0, -2.0, 5.0, -1.0]","4.0","[2.0, 3.0, 6.0]","[8.0, -2.0, 5.0, -1.0]","4.0","[2, 3, 6]","[8, -2, 5, -1]","4","[2, 3, 6]","[8, -2, 5, -1]","4","[2, 3, 6]","[8, -2, 5, -1]","4","[2, 3, 6]","[8, -2, 5, -1]","4"],"start":["1","1","0","1","1","0","1","1","0","1","1","0","1","1","0","1","1","0"],"size":["2","3","1","2","3","1","2","3","1","2","3","1","2","3","1","2","3","1"],"expectedType":["class [F","class [F","class [F","class [D","class [D","class [D","class [I","class [I","class [I","class [S","class [S","class [S","class [J","class [J","class [J","class [B","class [B","class [B"],"expected":["[2, 3, 6]","[8, -2, 5, -1]","[4]","[2, 3, 6]","[8, -2, 5, -1]","[4]","[2, 3, 6]","[8, -2, 5, -1]","[4]","[2, 3, 6]","[8, -2, 5, -1]","[4]","[2, 3, 6]","[8, -2, 5, -1]","[4]","[2, 3, 6]","[8, -2, 5, -1]","[4]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"Data\" class can represent various OpenCL data types.",
      "result":"PASS",
      "duration":"0.079 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["array = array.asType(arrayType)","var data1 = Data.of(array, size, offset)","var data2 = Data.of(type, size)","var data3 = Data.of(array)"]},

        {"kind":"expect","text":"","code":["data1.array == array[offset..(offset+size-1)].asType(arrayType)","data2.array == new int[size].asType(arrayType)","data3.array == array"]},

        {"kind":"and","text":"","code":["data1.length == size","data2.length == size","data3.length == array.length"]},

        {"kind":"and","text":"","code":["data1.itemSize == itemSize","data2.itemSize == itemSize","data3.itemSize == itemSize"]},

        {"kind":"and","text":"","code":["data1.pointer != null","data2.pointer != null","data3.pointer != null"]},

        {"kind":"and","text":"","code":["data1.type.name() == targetType","data2.type.name() == targetType","data3.type.name() == targetType"]},

        {"kind":"and","text":"","code":["data1.array == (0..<data1.length).collect({it->data1.getElementAt((int)it)})","data2.array == (0..<data2.length).collect({it->data2.getElementAt((int)it)})","data3.array == (0..<data3.length).collect({it->data3.getElementAt((int)it)})"]},

        {"kind":"where","text":"","code":{"array":["[1, 2]","[8, 5, 2]","[42]","[1, 2, 3, 4, 5]","[1, 2]","[8, 5, 2]","[42]","[1, 2, 3, 4, 5]","[1, 2]","[8, 5, 2]","[42]","[1, 2, 3, 4, 5]","[1, 2]","[8, 5, 2]","[42]","[1, 2, 3, 4, 5]","[0.3, -0.9]","[2, 0.5, 8]","[0.3, -0.9]","[2, 0.5, 8]","[0.6, 3, 0.2]"],"arrayType":["class [I","class [I","class [I","class [I","class [B","class [B","class [B","class [B","class [J","class [J","class [J","class [J","class [S","class [S","class [S","class [S","class [F","class [F","class [D","class [D","class [D"],"type":["class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Float","class java.lang.Float","class java.lang.Double","class java.lang.Double","class java.lang.Double"],"itemSize":["4","4","4","4","1","1","1","1","8","8","8","8","2","2","2","2","4","4","8","8","8"],"size":["1","2","1","3","1","2","1","3","1","2","1","3","1","2","1","3","2","2","2","2","1"],"offset":["1","0","0","2","1","0","0","2","1","0","0","2","1","0","0","2","0","0","0","0","1"],"targetType":["I32","I32","I32","I32","I8","I8","I8","I8","I64","I64","I64","I64","I16","I16","I16","I16","F32","F32","F64","F64","F64"]}}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}