{
  "className":"ut.device.internal.OpenCL_Data_Spec",
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.318 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"The OpenCLDevice specific Data class represents JVM data for OpenCL.",
      "result":"PASS",
      "duration":"0.048 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We make sure that any data will not automatically be converted to floats!","code":["if ( Neureka.get().backend.has(CLContext) )","Neureka.get().backend.get(CLContext).settings.autoConvertToFloat = false"]},
        {"kind":"and","text":"We create 2 different data objects, a full and a partial/sliced array.","code":["var full = Data.of(data)","var slice = Data.of(data, size, start)"]},
        {"kind":"and","text":"An expected array based on the previous slice indices!","code":["var expected2 = expected[start..(start+size-1)]"]},
        {"kind":"expect","text":"Both data objects report the expected array types!","code":["full.array.class == expectedType","slice.array.class == expectedType"]},
        {"kind":"and","text":"Also they report the expected data array size.","code":["full.length == expected.size()","slice.length == expected2.size()"]},
        {"kind":"and","text":"","code":["full.array !== slice.array","full.array == expected","(data instanceof Number && slice.array == [data] ) || slice.array == expected2"]},
        {"kind":"and","text":"They produce OpenCL specific pointer objects.","code":["full.pointer != null","slice.pointer != null"]},
        {"kind":"cleanup","text":"","code":["if ( Neureka.get().backend.has(CLContext) )","Neureka.get().backend.get(CLContext).settings.autoConvertToFloat = true"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"Data\" class can represent various OpenCL data types.",
      "result":"PASS",
      "duration":"0.076 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["array = array.asType(arrayType)","var data1 = Data.of(array, size, offset)","var data2 = Data.of(type, size)","var data3 = Data.of(array)"]},
        {"kind":"expect","text":"","code":["data1.array == array[offset..(offset+size-1)].asType(arrayType)","data2.array == new int[size].asType(arrayType)","data3.array == array"]},
        {"kind":"and","text":"","code":["data1.length == size","data2.length == size","data3.length == array.length"]},
        {"kind":"and","text":"","code":["data1.itemSize == itemSize","data2.itemSize == itemSize","data3.itemSize == itemSize"]},
        {"kind":"and","text":"","code":["data1.pointer != null","data2.pointer != null","data3.pointer != null"]},
        {"kind":"and","text":"","code":["data1.type.name() == targetType","data2.type.name() == targetType","data3.type.name() == targetType"]},
        {"kind":"and","text":"","code":["data1.array == (0..<data1.length).collect({it->data1.getElementAt((int)it)})","data2.array == (0..<data2.length).collect({it->data2.getElementAt((int)it)})","data3.array == (0..<data3.length).collect({it->data3.getElementAt((int)it)})"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}