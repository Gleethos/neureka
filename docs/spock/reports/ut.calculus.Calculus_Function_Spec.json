{
  "className":"ut.calculus.Calculus_Function_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.534 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Function implementations ensure that internally created tensors are flagged as \"intermediate\" initially!",
      "result":"PASS",
      "duration":"0.111 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tsr<?>[] tensors) -> {","    var outputs = [Tsr.of(1)]","    tensors.length.times { outputs.add(tensors[it]) }","    return outputs[0]","})"]},
        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tsr<?>[] tensors) -> {","    var outputs = [Tsr.of(1)]","    tensors.length.times { outputs.add(tensors[it]) }","    return outputs[0].unsafe.setIsIntermediate(true)","})"]},
        {"kind":"and","text":"","code":["var a = Tsr.of(3)","var b = Tsr.of(-2.5)"]},
        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},
        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},
        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},
        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},
        {"kind":"then","text":"","code":["noExceptionThrown()"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function implementations ensure that outputs which are input members are not flagged as \"intermediate\"!",
      "result":"PASS",
      "duration":"0.023 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun1 = new DummyFunction((Args args, Tsr<?>[] tensors) -> tensors[0] )"]},
        {"kind":"and","text":"","code":["var fun2 = new DummyFunction((Args args, Tsr<?>[] tensors) -> {","    return tensors[0].unsafe.setIsIntermediate( true ) // This should fail!","})"]},
        {"kind":"and","text":"","code":["var a = Tsr.of(3)","var b = Tsr.of(-2.5)"]},
        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},
        {"kind":"when","text":"","code":["caller(a, b, fun1)"]},
        {"kind":"then","text":"","code":["noExceptionThrown()"]},
        {"kind":"when","text":"","code":["caller(a, b, fun2)"]},
        {"kind":"then","text":"","code":["thrown(IllegalStateException)"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Function implementations will ensure the \"call\" and \"invoke\" does not return tensors flagged as \"intermediate\".",
      "result":"PASS",
      "duration":"0.014 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var fun = new DummyFunction((Args args, Tsr<?>[] tensors) -> {","    return Tsr.of(42f).unsafe.setIsIntermediate(true)","})"]},
        {"kind":"and","text":"","code":["var a = Tsr.of(3)","var b = Tsr.of(-2.5)"]},
        {"kind":"expect","text":"","code":["!a.isIntermediate()","!b.isIntermediate()"]},
        {"kind":"when","text":"","code":["var t1 = fun.call(a, b)","var t2 = fun.invoke(a, b)","var t3 = fun.execute(a, b)"]},
        {"kind":"then","text":"","code":["!t1.isIntermediate()","!t2.isIntermediate()","t3.isIntermediate()"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The library context exposes a set of useful functions.",
      "result":"PASS",
      "duration":"0.138 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["fun.apply(Neureka.get().backend.function).toString() == expected","!fun.apply(Neureka.get().backend.function).isDoingAD()"]},
        {"kind":"and","text":"","code":["fun.apply(Neureka.get().backend.autogradFunction).toString() == expected","fun.apply(Neureka.get().backend.autogradFunction).isDoingAD()"]},
        {"kind":"where","text":"","code":[]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}