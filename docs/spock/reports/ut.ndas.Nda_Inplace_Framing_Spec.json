{
  "className":"ut.ndas.Nda_Inplace_Framing_Spec",
  "title":"NDA Framing",
  "narrative":"Framing an nd-array is all about naming its axes and then using those names to\n    access, read or write its values in a more convenient and human readable way.",
  "subjects":["neureka.Nda"],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.023 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can label the columns of a rank 2 nd-array.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A rank 2 nd-array with shape (2, 3).","code":["def nda = Nda.of(String).withShape(2, 3).andFill(\"1\", \"a\", \"§\", \"2\", \"b\", \"%\")"]},

        {"kind":"when","text":"We label the columns of the nd-array.","code":["nda.mut.label(\"Framed\").mut.labelAxes([null, [\"Num\", \"Letter\", \"Symbol\"]] as String[][])"]},

        {"kind":"then","text":"The columns are labeled as expected.","code":["nda.toString() == \"(2x3):[\\n\" +","                  \"   (   Num )(Letter)(Symbol ):( Framed )\\n\" +","                  \"   [    1  ,    a  ,    §   ],\\n\" +","                  \"   [    2  ,    b  ,    %   ]\\n\" +","                  \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can label the columns and rows of a rank 3 nd-array.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A rank 3 nd-array with shape (2, 3, 4).","code":["def nda = Nda.of(String)","                            .withShape(2, 2, 3)","                            .andFill(\"1\", \"a\", \"§\", \"2\", \"b\", \"%\" , \"3\", \"c\", \"€\", \"4\", \"d\", \"£\")"]},

        {"kind":"when","text":"We label the columns and rows of the nd-array.","code":["nda.mut.label(\"Framed\").mut.labelAxes([null, [\"A\", \"B\"], [\"Num\", \"Letter\", \"Symbol\"]])"]},

        {"kind":"then","text":"The columns and rows are labeled as expected.","code":["nda.toString() == \"(2x2x3):[\\n\" +","                  \"   [\\n\" +","                  \"      (   Num )(Letter)(Symbol ):( Framed )\\n\" +","                  \"      [    1  ,    a  ,    §   ]:( A ),\\n\" +","                  \"      [    2  ,    b  ,    %   ]:( B )\\n\" +","                  \"   ],\\n\" +","                  \"   [\\n\" +","                  \"      (   Num )(Letter)(Symbol ):( Framed )\\n\" +","                  \"      [    3  ,    c  ,    €   ]:( A ),\\n\" +","                  \"      [    4  ,    d  ,    £   ]:( B )\\n\" +","                  \"   ]\\n\" +","                  \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can use labels as selectors for slicing.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A rank 3 nd-array with shape (2, 3, 4).","code":["def nda = Nda.of(String)","                            .withShape(2, 2, 3)","                            .andFill(\"1\", \"a\", \"§\", \"2\", \"b\", \"%\" , \"3\", \"c\", \"€\", \"4\", \"d\", \"£\")"]},

        {"kind":"when","text":"We label the columns and rows of the nd-array.","code":["nda.mut.label(\"Framed\").mut.labelAxes([[\"M1\", \"M2\"], [\"A\", \"B\"], [\"Num\", \"Letter\", \"Symbol\"]])"]},

        {"kind":"then","text":"The columns and rows are labeled as expected.","code":["nda.toString() == \"(2x2x3):[\\n\" +","                  \"   ( M1 ):[\\n\" +","                  \"      (   Num )(Letter)(Symbol ):( Framed )\\n\" +","                  \"      [    1  ,    a  ,    §   ]:( A ),\\n\" +","                  \"      [    2  ,    b  ,    %   ]:( B )\\n\" +","                  \"   ],\\n\" +","                  \"   ( M2 ):[\\n\" +","                  \"      (   Num )(Letter)(Symbol ):( Framed )\\n\" +","                  \"      [    3  ,    c  ,    €   ]:( A ),\\n\" +","                  \"      [    4  ,    d  ,    £   ]:( B )\\n\" +","                  \"   ]\\n\" +","                  \"]\""]},

        {"kind":"when","text":"We slice the nd-array using labels.","code":["def slice = nda[\"M1\", \"A\", \"Num\"]"]},

        {"kind":"then","text":"The slice is as expected.","code":["slice.items == [\"1\"]","slice.toString() == \"(1x1x1):[\\n\" +","                    \"   ( M1 ):[\\n\" +","                    \"      (   Num  ):( Framed:slice )\\n\" +","                    \"      [    1   ]:( A )\\n\" +","                    \"   ]\\n\" +","                    \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The slice of a labeled vector is labeled too.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A rank 1 nd-array with shape (8).","code":["var nda = Nda.of(\"a\"..\"h\")"]},

        {"kind":"when","text":"We label the nd-array.","code":["nda.mut.label(\"Framed\").mut.labelAxes([\"Letters\":[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]])"]},

        {"kind":"then","text":"The nd-array is labeled as expected.","code":["nda.toString() == \"(8):(    A  )(   B  )(   C  )(   D  )(   E  )(   F  )(   G  )(   H   ):( Framed )\\n\" +","                  \"    [    a  ,    b  ,    c  ,    d  ,    e  ,    f  ,    g  ,    h   ]\""]},

        {"kind":"when","text":"\n            We slice the nd-array using labels...\n            Note that we are using the map syntax of `[i..j]:k` which is \n            semantically equivalent to pythons `i:j:k` syntax for indexing! (numpy)\n            Here `i` is the start index (or alias),\n            `j` is the end index (alias) and `k` is the step size.\n        ","code":["var slice = nda.getAt([\"B\"..\"G\"]:3)"]},

        {"kind":"then","text":"The slice is as expected.","code":["slice.items == [\"b\", \"e\"]","slice.toString() == \"(2):(    B  )(   E   ):( Framed:slice )\\n\" +","                    \"    [    b  ,    e   ]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Concatenating 2 labeled nd-arrays will produce a nd-array which is also labeled.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Two rank 2 nd-arrays with shape (2x3).","code":["var nda1 = Nda.of(\"a\", \"1\", \"!\", \"b\", \"2\", \"§\").reshape(2,3)","var nda2 = Nda.of(\"x\", \"2,50\", \"%\", \"y\", \"4,90\", \"&\").reshape(2,3)"]},

        {"kind":"when","text":"We label the nd-arrays.","code":["nda1.mut.label(\"Nda1\").mut.labelAxes([\"rows\":[\"A\", \"B\"], \"cols\":[\"Letter\", \"Num\", \"Symbol\"]])","nda2.mut.label(\"Nda2\").mut.labelAxes([\"rows\":[\"1\", \"2\"], \"cols\":[\"Letter\",  \"€\",  \"Symbol\"]])"]},

        {"kind":"then","text":"The nd-arrays are labeled as expected.","code":["nda1.toString() == \"(2x3):[\\n\" +","                    \"   ( Letter)(  Num )(Symbol ):( Nda1 )\\n\" +","                    \"   [    a  ,    1  ,    !   ]:( A ),\\n\" +","                    \"   [    b  ,    2  ,    §   ]:( B )\\n\" +","                    \"]\"","nda2.toString() == \"(2x3):[\\n\" +","                   \"   ( Letter)(   €  )(Symbol ):( Nda2 )\\n\" +","                   \"   [    x  ,  2,50 ,    %   ]:( 1 ),\\n\" +","                   \"   [    y  ,  4,90 ,    &   ]:( 2 )\\n\" +","                   \"]\""]},

        {"kind":"when","text":"We concatenate the nd-arrays.","code":["var nda = nda1.concatAt(0, nda2)"]},

        {"kind":"then","text":"\n                The concatenated nd-array is labeled as expected.\n                Note that conflicting labels will simply be merged into a single label.    \n            ","code":["nda.toString() == \"(4x3):[\\n\" +","                  \"   ( Letter)( Num+€)(Symbol ):( Nda1+Nda2 )\\n\" +","                  \"   [    a  ,    1  ,    !   ]:( A ),\\n\" +","                  \"   [    b  ,    2  ,    §   ]:( B ),\\n\" +","                  \"   [    x  ,  2,50 ,    %   ]:( 1 ),\\n\" +","                  \"   [    y  ,  4,90 ,    &   ]:( 2 )\\n\" +","                  \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can concatenate more than 2 nd-arrays.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Three rank 2 nd-arrays with shape (2x3).","code":["var nda1 = Nda.of(\"a\", \"1\", \"!\", \"b\", \"2\", \"§\").reshape(2,3)","var nda2 = Nda.of(\"x\", \"2,50\", \"%\", \"y\", \"4,90\", \"&\").reshape(2,3)","var nda3 = Nda.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\").reshape(2,3)"]},

        {"kind":"when","text":"We concatenate the nd-arrays.","code":["var nda = nda1.concatAt(0, nda2, nda3)"]},

        {"kind":"then","text":"The concatenated nd-array is as expected.","code":["nda.toString() == \"(6x3):[\\n\" +","                  \"   [    a  ,    1  ,    !   ],\\n\" +","                  \"   [    b  ,    2  ,    §   ],\\n\" +","                  \"   [    x  ,  2,50 ,    %   ],\\n\" +","                  \"   [    y  ,  4,90 ,    &   ],\\n\" +","                  \"   [    1  ,    2  ,    3   ],\\n\" +","                  \"   [    4  ,    5  ,    6   ]\\n\" +","                  \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
