{
  "className":"ut.autograd.AD_And_Computation_Graph_Spec",
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.179 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Reshaping produces expected computation graph and also works with reverse mode AD.",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Tsr<Double> a = Tsr.of([2, 3], [","    1d, 2d, 3d,","    4d, 5d, 6d","]).setRqsGradient(true)"]},

        {"kind":"and","text":"","code":["Function rs = Function.of(\"[1, 0]:(I[0])\")"]},

        {"kind":"when","text":"","code":["Tsr b = rs(a)","GraphNode na = a.get( GraphNode.class )","GraphNode nb = b.get( GraphNode.class )"]},

        {"kind":"then","text":"","code":["na.getChildren().size() == 1","b.toString().contains(\"\")","b.backward(Tsr.of([3, 2],[","        -1d, 2d,","         4d, 7d,","        -9d, 8d","]))","a.toString().contains(\"[2x3]:(1.0, 2.0, 3.0, 4.0, 5.0, 6.0):g:(-1.0, 4.0, -9.0, 2.0, 7.0, 8.0)\")","b.toString().contains(\"[3x2]:(1.0, 4.0, 2.0, 5.0, 3.0, 6.0)\")","na.isLeave()","na.function==null","na.getMode() == 1"]},

        {"kind":"and","text":"We expect the partial derivative to be cleaned up! (size == 0)","code":["na.size()==0","na.getNodeID()==1","!na.getLock().isLocked()","!nb.isLeave()","nb.function != null","nb.getMode() == -1","nb.size()==0","nb.getNodeID()!=1","!nb.getLock().isLocked()"]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Payloads and derivatives are null after garbage collection.",
      "result":"PASS",
      "duration":"0.167 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Double> a = Tsr.of(2d).setRqsGradient(true)","Tsr<Double> b = a * 3 / 5","Tsr<Double> c = Tsr.of(3d)","Tsr<Double> d = b ** c","Tsr<Double> e = d * c","GraphNode n = e.get( GraphNode.class )"]},

        {"kind":"when","text":"","code":["System.gc()"]},

        {"kind":"then","text":"","code":["n.parents[0].isCacheable()","!n.parents[0].isLeave()","n.parents[0].isGraphLeave()","n.parents[1].isLeave()","n.parents[1].isGraphLeave()"]},

        {"kind":"and","text":"","code":["for ( int i = 0; i < n.parents.length; i++ ) {","    assert n.parents[ i ].payload != null","    boolean[] exists = {false}","    n.parents[ i ].forEachTarget({ t -> exists[0] = true })","    assert exists[0]","}"]},

        {"kind":"when","text":"","code":["a = null","b = null","c = null","d = null","e = null","System.gc()","Sleep.until(100, {","    n.parents.every {it.payload == null && !it.hasDerivatives()}","})","System.gc()","Sleep.until(200, {","    n.parents.every {it.payload == null && !it.hasDerivatives()}","})"]},

        {"kind":"then","text":"","code":["for ( GraphNode p : n.parents ) {","    assert p.payload == null","    assert !p.hasDerivatives()","}"]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}