{
  "className":"ut.tensors.Expression_Based_Tensor_Instantiation_Spec",
  "title":"Expression based Tensor Instantiation",
  "narrative":"This specification defines how a tensor can be instantiated\n    using string expressions, which define operations to be executed.\n    This form of tensor instantiation is very useful to avoid boilerplate code.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.009 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A tensor can be created from a function as expression.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A simple scalar tensor containing the number \"4\".","code":["Tsr x = Tsr.of(4d)"]},

        {"kind":"when","text":"","code":["Tsr y = Tsr.of(\"th(I[0])\", x)"]},

        {"kind":"then","text":"","code":["y.toString() == \"(1):[0.99932]\"","y.isBranch()","!y.isLeave()","y.belongsToGraph()","x.belongsToGraph()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can instantiate tensors from various simple string expressions.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Three scalar tensors.","code":["Tsr<Double> a = Tsr.of(3d)","Tsr<Double> b = Tsr.of(2d)","Tsr<Double> c = Tsr.of(-1d)"]},

        {"kind":"when","text":"","code":["var t = Tsr.of(\"1+\", a, \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"7.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"1\", \"+\", a, \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"7.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"(\",\"1+\", a,\")\", \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"8.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"(\",\"1\", \"+\", a,\")\", \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"8.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"(\", c, \"*3)+\", \"(\",\"1+\", a,\")\", \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"5.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"(\", c, \"*\",\"3)+\", \"(\",\"1+\", a,\")\", \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"5.0\")"]},

        {"kind":"when","text":"","code":["t = Tsr.of(\"(\", c, \"*\",\"3\", \")+\", \"(\",\"1+\", a,\")\", \"*\", b)"]},

        {"kind":"then","text":"","code":["t.toString().contains(\"5.0\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}