{
  "className":"ut.tensors.exceptions.Tensor_Exception_Spec",
  "title":"Tensors Exception Behavior",
  "narrative":"This specification covers the behavior of the $Tsr class in\n    exceptional scenarios which are contrary to its intended use.\n    The purpose of this is to assert that the $Tsr class will provide\n    useful feedback to a user to explain that a misuse of its API\n    occurred so that the user can correct this misuse.",
  "subjects":[],
  "statistics":{
    "runs":"8",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.035 seconds"
  },
  "headers":["\n                <h2> Tensors Exception Behavior </h2>\n                <br> \n                <p>\n                    This specification covers the behavior of tensors\n                    in exceptional situations.           \n                </p>\n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Trying to inject an empty tensor into another causes fitting exception.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor instance used for exception testing.","code":["Tsr<Integer> t = Tsr.of([6, 6], -1)"]},

        {"kind":"when","text":"We try to inject an empty tensor whose size does of course not match...","code":["t.mut[[1..3], [1..3]] = Tsr.newInstance() as Tsr<Integer>"]},

        {"kind":"then","text":"The expected message is being thrown, which tells us that ","code":["def exception = thrown(IllegalArgumentException)","assert exception.message.contains(\"Provided tensor is empty! Empty tensors cannot be injected.\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Passing null to various methods of the tensor API will throw exceptions.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Integer> t = Tsr.of(1, 2, 3)"]},

        {"kind":"when","text":"","code":["errorCode(t)"]},

        {"kind":"then","text":"","code":["var exception = thrown(type)"]},

        {"kind":"and","text":"","code":["exception.message != \"\" && exception.message.length() > 13"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException","class java.lang.IllegalArgumentException"],"errorCode":["ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure1@a237607","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure2@46757ad2","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure3@4e5c8d00","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure4@5470b553","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure5@53c05182","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure6@4ce1407e","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure7@13157c93","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure8@1d36343c","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure9@24be1093","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure10@40b3d990","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure11@30bd6dab","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure12@4683a657","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure13@67389536","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure14@306056b0","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure15@47d63616","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure16@57950c89","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure17@189f89ec","ut.tensors.exceptions.Tensor_Exception_Spec$__spock_feature_0_1prov1_closure18@6d241556"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Passing an invalid object into Tsr constructor causes descriptive exception.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"A tensor is being instantiated with a nonsensical parameter.","code":["Tsr.ofRandom(Scanner.class, 2, 4)"]},

        {"kind":"then","text":"An exception is being thrown which tells us about it.","code":["def exception = thrown(IllegalArgumentException)","exception.message.contains(","        \"Could not create a random tensor for type 'class java.util.Scanner'!\"",")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Passing an invalid key object into the \"getAt\" method causes a descriptive exception.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new test tensor is being instantiated.","code":["var t = Tsr.of( [2, 3], -1..6 )"]},

        {"kind":"when","text":"A nonsensical object is being passed to the tensor.","code":["t[ [null] ]"]},

        {"kind":"then","text":"An exception is being thrown which tells us about it.","code":["def exception = thrown(IllegalArgumentException)","exception.message.contains(\"List of indices/ranges may not contain entries which are null!\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Out of dimension bound causes descriptive exception!",
      "result":"PASS",
      "duration":"0.009 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Some more complex slicing is being performed...","code":["var t = Tsr.of( [3, 3, 3, 3], 0 )","t.mut[1..2, 1..3, 1..1, 0..2] = Tsr.of( [2, 3, 1, 3], -4..2 )"]},

        {"kind":"then","text":"The slice range 1..3 causes and exception!","code":["def exception = thrown(IllegalArgumentException)","exception.message == \"java.lang.IllegalArgumentException: \" +","\"Cannot create slice because ranges are out of the bounds of the targeted tensor.\\n\" +","\"At index '1' : offset '1' + shape '3' = '4',\\n\" +","\"which is larger than the target shape '3' at the same index!\""]},

        {"kind":"and","text":"The logger logs the exception message!","code":["1 * System.err.println({it.endsWith(","    \"Cannot create slice because ranges are out of the bounds of the targeted tensor.\\n\" +","    \"At index '1' : offset '1' + shape '3' = '4',\\n\" +","    \"which is larger than the target shape '3' at the same index!\")","})"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Building a tensor with 0 shape arguments throws an exception.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["var t = Tsr.ofInts().withShape().all(0)"]},

        {"kind":"then","text":"","code":["thrown(IllegalArgumentException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Casting a tensor as something unusual will cuas an exception to be thrown.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We have a regular tensor of 2 bytes!","code":["var t = Tsr.ofBytes().withShape(2).andFill(-1, 2)"]},

        {"kind":"when","text":"We try to convert the tensor to an instance of type \"Random\"...","code":["t as Random"]},

        {"kind":"then","text":"This will obviously least to an exception being thrown.","code":["thrown(IllegalArgumentException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Building a tensor with \"null\" as shape argument throws an exception.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"","code":["Tsr.ofInts().withShape((List)null).all(0)"]},

        {"kind":"then","text":"","code":["thrown(IllegalArgumentException)"]},

        {"kind":"when","text":"","code":["Tsr.ofInts().withShape((int[])null).all(0)"]},

        {"kind":"then","text":"","code":["thrown(IllegalArgumentException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}