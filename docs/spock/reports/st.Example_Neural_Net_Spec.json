{
  "className":"st.Example_Neural_Net_Spec",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"2",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"4.607 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A simple 3 layer neural network converges.",
      "result":"PASS",
      "duration":"3.580 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var predictor = new SimpleFeedForwardNN(5, 42)","var input = Tsr.of( -0.2f, -0.1f, 0f, 0.1f, 0.2f ).withShape( 1, 5 )","var target = Tsr.of( 0.2f, 0.1f, 0f, -0.1f, -0.2f ).withShape( 1, 5 )"]},

        {"kind":"when","text":"","code":["var pred","var loss = []","100.times {","    pred = predictor.forward( input )","    loss << predictor.train( target )","    //println( \"Loss: ${loss.last()}\" )","    //println( \"Prediction: ${pred}\" )","}"]},

        {"kind":"then","text":"","code":["pred.shape == [1, 5]","loss.size() == 100","loss[0] > loss[99]","loss[0] > 1","loss[99] < 0.005"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A very simple 1 layer NN converges.",
      "result":"PASS",
      "duration":"1.020 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var inputs = Tsr.ofFloats().withShape( 2, 6 ).andFill(-4f..3f)","var weights = Tsr.ofRandom(Float, 6, 1)","var targets = Tsr.of( 0.2f, -0.1f, 0.5f, 1.2f, -0.3f, 0.2f ).withShape( 2, 1 )"]},

        {"kind":"and","text":"","code":["weights.setRqsGradient( true )","applyOptimizer.accept(weights)"]},

        {"kind":"and","text":"","code":["var pred","var losses = []"]},

        {"kind":"when","text":"","code":["100.times {","    pred = inputs.matMul( weights ).tanh()","    var loss = ((pred - targets)**2).sum()","    loss.backward()","    weights.applyGradient()","    losses << loss.item()","}"]},

        {"kind":"then","text":"","code":["pred.shape == [2, 1]","losses[0] > losses[losses.size()-1]","losses[0] > 2","losses[losses.size()-1] < 0.5"]},

        {"kind":"where","text":"","code":{"applyOptimizer":["{ it.set(Optimizer.SGD.withLearningRate(0.03)) }","{ it.set(Optimizer.ADAM) }","{ it.set(Optimizer.RMSProp.withLearningRate(0.05)) }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}