{
  "className":"it.Calculus_Stress_Test",
  "title":"",
  "narrative":"",
  "subjects":[],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"4.671 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Stress test runs error free and produces expected result",
      "result":"PASS",
      "duration":"0.818 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def stress = ( Tsr t ) -> {","    t = t + Tsr.of( t.shape(), -3d..12d )","    t = t * Tsr.of( t.shape(),  2d..3d  )","    t = t / Tsr.of( t.shape(),  1d..2d  )","    t = t **Tsr.of( t.shape(),  2d..1d  )","    t = t - Tsr.of( t.shape(), -2d..2d  )","    return t","}"]},

        {"kind":"and","text":"","code":["Tsr source = Tsr.of( [3, 3, 3, 3], -1d ).to( device )"]},

        {"kind":"when","text":"","code":["source.mut[1..2, 0..2, 1..1, 0..2] = Tsr.of( [2, 3, 1, 3], -4d..2d )","Tsr t = source[1..2, 0..2, 1..1, 0d..2d]"]},

        {"kind":"then","text":"","code":["t.toString() == Tsr.of( [2, 3, 1, 3], -4d..2d ).toString()"]},

        {"kind":"when","text":"","code":["t = stress(t)"]},

        {"kind":"then","text":"","code":["t.toString({it.hasSlimNumbers = true}) ==","\"(2x3x1x3):[\" +","    \"198, -6.5, \" +","    \"36, -2.5, \" +","    \"2, 6.5, \" +","    \"\" +","    \"101, 0, \" +","    \"15, 4, \" +","    \"146, 13, \" +","    \"\" +","    \"400, 17, \" +","    \"194, 15.5, \" +","    \"101, -4.5\" +","\"]\""]},

        {"kind":"and","text":"","code":["(device instanceof OpenCLDevice) || t.mut.data.ref == [198.0, -6.5, 36.0, -2.5, 2.0, 6.5, 101.0, 0.0, 15.0, 4.0, 146.0, 13.0, 400.0, 17.0, 194.0, 15.5, 101.0, -4.5]","(device instanceof OpenCLDevice) || source.mut.data.ref == [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -4.0, -3.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 2.0, -4.0, -3.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, -1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 2.0, -4.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -3.0, -2.0, -1.0, -1.0, -1.0, -1.0]"]},

        {"kind":"where","text":"","code":{"device":["CPU[cores=32]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Dot operation stress test runs error free and produces expected result",
      "result":"PASS",
      "duration":"0.107 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Double> t = Tsr.of( shape, -4d..2d )"]},

        {"kind":"when","text":"","code":["t = t.convDot( t.T() )"]},

        {"kind":"then","text":"","code":["t.toString() == expected"]},

        {"kind":"where","text":"","code":{"shape":["[2, 3]","[2, 3]","[2, 1, 3]","[2, 1, 3]"],"expected":["(2x1x2):[29.0, 2.0, 2.0, 2.0]","(2x1x2):[29.0, 2.0, 2.0, 2.0]","(2x1x1x1x2):[29.0, 2.0, 2.0, 2.0]","(2x1x1x1x2):[29.0, 2.0, 2.0, 2.0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The broadcast operation stress test runs error free and produces expected result",
      "result":"PASS",
      "duration":"0.838 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Double> t1 = Tsr.of( shape1, -4d..2d ).to( device )","Tsr<Double> t2 = Tsr.of( shape2, -3d..5d ).to( device )"]},

        {"kind":"when","text":"","code":["Tsr t = Tsr.of( operation, [t1,t2] )"]},

        {"kind":"then","text":"","code":["t.toString() == expected"]},

        {"kind":"where","text":"","code":{"device":["CPU[cores=32]","CPU[cores=32]","CPU[cores=32]","CPU[cores=32]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","CPU[cores=32]","CPU[cores=32]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","CPU[cores=32]","CPU[cores=32]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","OpenCLDevice[id=0x1c89bb832b0,platform=0x7ffba79e8000]","CPU[cores=32]","CPU[cores=32]"],"shape1":["[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]","[2, 1]","[2, 3, 1]"],"shape2":["[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]","[2, 2]","[1, 3, 2]"],"operation":["i0%i1","i0%i1","i0*i1","i0*i1","i0*i1","i0*i1","i0+i1","i0+i1","i0+i1","i0+i1","i0-i1","i0-i1","i0-i1","i0-i1","i0/i1","i0/i1"],"expected":["(2x2):[-1.0, -0.0, -0.0, NaN]","(2x3x2):[-1.0, -0.0, -0.0, NaN, -0.0, -0.0, -1.0, -1.0, 0.0, NaN, 0.0, 1.0]","(2x2):[12.0, 8.0, 3.0, -0.0]","(2x3x2):[12.0, 8.0, 3.0, -0.0, -2.0, -4.0, 3.0, 2.0, -0.0, 0.0, 1.0, 2.0]","(2x2):[12.0, 8.0, 3.0, -0.0]","(2x3x2):[12.0, 8.0, 3.0, -0.0, -2.0, -4.0, 3.0, 2.0, -0.0, 0.0, 1.0, 2.0]","(2x2):[-7.0, -6.0, -4.0, -3.0]","(2x3x2):[-7.0, -6.0, -4.0, -3.0, -1.0, 0.0, -4.0, -3.0, -1.0, 0.0, 2.0, 3.0]","(2x2):[-7.0, -6.0, -4.0, -3.0]","(2x3x2):[-7.0, -6.0, -4.0, -3.0, -1.0, 0.0, -4.0, -3.0, -1.0, 0.0, 2.0, 3.0]","(2x2):[-1.0, -2.0, -2.0, -3.0]","(2x3x2):[-1.0, -2.0, -2.0, -3.0, -3.0, -4.0, 2.0, 1.0, 1.0, 0.0, 0.0, -1.0]","(2x2):[-1.0, -2.0, -2.0, -3.0]","(2x3x2):[-1.0, -2.0, -2.0, -3.0, -3.0, -4.0, 2.0, 1.0, 1.0, 0.0, 0.0, -1.0]","(2x2):[1.33333, 2.0, 3.0, -∞]","(2x3x2):[1.33333, 2.0, 3.0, -∞, -2.0, -1.0, 0.33333, 0.5, -0.0, NaN, 1.0, 0.5]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation functions work across types, on large prime sized 1D slices and non sliced 1D tensors.",
      "result":"PASS",
      "duration":"2.010 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a function based on the provided expression.","code":["var func = Function.of(funExpression)"]},

        {"kind":"and","text":"We use a large prime number to size our tensors in order to stress workload divisibility.","code":["var PRIME_SIZE_1 = 7907","var PRIME_SIZE_2 = 7919"]},

        {"kind":"and","text":"We create 2 tensors storing the same values, one sliced and the other a normal tensor.","code":["var t1 = Tsr.of(type).withShape(PRIME_SIZE_1).andSeed(\"Tempeh\")","var t2 = Tsr.of(type).withShape(PRIME_SIZE_2).all(0)[9..7915]","t2[0..t2.size-1] = t1"]},

        {"kind":"expect","text":"The types of both tensors should match what was provided during instantiation.","code":["t1.dataType == DataType.of(type)","t1.itemType == type","t2.dataType == DataType.of(type)","t2.itemType == type"]},

        {"kind":"when","text":"We apply the function to both tensors...","code":["var result1 = func(t1)","var result2 = func(t2)"]},

        {"kind":"then","text":"First we ensure that both tensors have the correct value/element type.","code":["result1.itemType == type","result2.itemType == type"]},

        {"kind":"and","text":"The underlying data object should match the data array type as is defined by the data type!","code":["result1.mut.data.ref.class == result1.dataType.dataArrayType()","result2.mut.data.ref.class == result2.dataType.dataArrayType()"]},

        {"kind":"and","text":"The data of the first non slice tensor as well as its slice should be as expected.","code":["Arrays.hashCode(result1.mut.data.ref) == expected[0]","Arrays.hashCode(result2.mut.data.ref) == expected[1]"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float"],"funExpression":["gaus(i0)*100 % i0","gaus(i0)*100 % i0","gaus(i0)*100 % i0","tanh(i0)*100 % i0","tanh(i0)*100 % i0","tanh(i0)*100 % i0","fast_tanh(i0)*100 % i0","fast_tanh(i0)*100 % i0","fast_tanh(i0)*100 % i0","fast_gaus(i0)+i0","fast_gaus(i0)+i0","fast_gaus(i0)+i0","softsign(i0)*100 % i0","softsign(i0)*100 % i0","softsign(i0)*100 % i0","random(i0)","random(i0)"],"expected":["[-341638852, -341638852]","[945052504, 945052504]","[566202463, 566202463]","[-1157698679, -1157698679]","[1967446493, 1967446493]","[-1054395405, -1054395405]","[-465291508, -465291508]","[-1372925001, -1372925001]","[-1054395405, -1054395405]","[-662875915, -662875915]","[-1211048977, -1211048977]","[-1237330383, -1237330383]","[1967097666, 1967097666]","[71072251, 71072251]","[-1054395405, -1054395405]","[-2059799883, 276852681]","[-2100773274, -590726536]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Activation functions work across types.",
      "result":"PASS",
      "duration":"0.325 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a function based on the provided expression.","code":["var func = Function.of(funExpression)"]},

        {"kind":"and","text":"We use a large prime number to size our tensors in order to stress workload divisibility.","code":["var PRIME_SIZE_1 = 3","var PRIME_SIZE_2 = 5"]},

        {"kind":"and","text":"We create 2 tensors storing the same values, one sliced and the other a normal tensor.","code":["var t1 = Tsr.of(type).withShape(PRIME_SIZE_1).andSeed(\"Seitan\")","var t2 = Tsr.of(type).withShape(PRIME_SIZE_2).all(0)[1..3]","t2[0..t2.size-1] = t1"]},

        {"kind":"expect","text":"The types of both tensors should match what was provided during instantiation.","code":["t1.dataType   == DataType.of(type)","t1.itemType == type","t2.dataType   == DataType.of(type)","t2.itemType == type"]},

        {"kind":"when","text":"We apply the function to both tensors...","code":["var result1 = ( !derive ? func(t1) : func.derive([t1], 0) )","var result2 = ( !derive ? func(t2) : func.derive([t2], 0) )"]},

        {"kind":"then","text":"First we ensure that both tensors have the correct value/element type.","code":["result1.itemType == type","result2.itemType == type"]},

        {"kind":"and","text":"The underlying data object should match the data array type as is defined by the data type!","code":["result1.mut.data.ref.class == result1.dataType.dataArrayType()","result2.mut.data.ref.class == result2.dataType.dataArrayType()"]},

        {"kind":"and","text":"The data of the first non slice tensor as well as its slice should be as expected.","code":["result1.items == expected","result2.items == expected"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer","class java.lang.Double","class java.lang.Float","class java.lang.Integer"],"funExpression":["silu(i0)","silu(i0)","silu(i0)","silu(i0)","silu(i0)","silu(i0)","gelu(i0)","gelu(i0)","gelu(i0)","gelu(i0)","gelu(i0)","gelu(i0)","selu(i0)","selu(i0)","selu(i0)","selu(i0)","selu(i0)","selu(i0)","gatu(i0)","gatu(i0)","gatu(i0)","gatu(i0)","gatu(i0)","gatu(i0)","gasu(i0)","gasu(i0)","gasu(i0)","gasu(i0)","gasu(i0)","gasu(i0)"],"derive":["false","false","false","true","true","true","false","false","false","true","true","true","false","false","false","true","true","true","false","false","false","true","true","true","false","false","false","true","true","true"],"expected":["[1.0985150624263118, 2.331551300795844, 0.08745752408303246]","[1.098515, 2.3315513, 0.08745752]","[2124371342, 0, 0]","[1.0198659569612678, 1.0992238228008295, 0.5805713104936336]","[1.019866, 1.0992239, 0.5805713]","[1, 0, 0]","[1.2553019101258691, 2.48514859714065, 0.09199892841280806]","[1.255302, 2.4851487, 0.09199893]","[2124371342, 0, 0]","[1.09968352899801, 1.043758795430269, 0.6360091016582581]","[1.0996835, 1.0437589, 0.6360091]","[1, 0, 0]","[1.4457526798842053, 2.6470118580557593, 0.17005220305511268]","[1.4457527, 2.647012, 0.1700522]","[-2062888229, -2, -2]","[1.0507009873554805, 1.0507009873554805, 1.0507009873554805]","[1.050701, 1.050701, 1.050701]","[1, 0, 0]","[0.9891407665275838, 0.9999999999999742, 0.004239423130809827]","[0.98914075, 1.0, 0.0042394227]","[1, -1, -1]","[0.1226918386004856, 9.805489753489383E-13, 0.07858138767615172]","[0.12269211, 0.0, 0.078581385]","[0, 0, 0]","[0.7226245060456667, 0.9411395236107959, 0.004221551478848414]","[0.72262454, 0.9411396, 0.004221551]","[1, -1, -1]","[0.4370057619908791, 0.06596632547000601, 0.07792071781374522]","[0.43700573, 0.06596632, 0.07792072]","[0, 0, 0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}