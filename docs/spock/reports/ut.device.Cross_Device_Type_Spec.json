{
  "className":"ut.device.Cross_Device_Type_Spec",
  "title":"Finding Device Types",
  "narrative":"Neureka introduces a the concept of a `Device` which is an interface\n    that represents a computational device used for executing tensor / nd-array operations on them.\n    The `Device` interface is implemented by various classes which represent\n    different types of accelerator hardware such as `CPUs`, `GPUs`, `TPUs`, `FPGAs`, etc.\n    These various `Device` types can not be instantiated directly because they model \n    the concrete and finite hardware that is available on any given system Neureka is running on.\n    This means that they are usually instantiated lazily upon access request or \n    upfront by the library backend (usually a backend extension built fo a specific device).\n    In order to find these instances embedded in the library backend the `Device` interface\n    exposes various static methods which can be used to find a device instance by name or type.",
  "subjects":["neureka.devices.Device"],
  "statistics":{
    "runs":"9",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"1",
    "duration":"0.170 seconds"
  },
  "headers":["\n                Specified below is the behaviour of the factory methods in the\n                Device interface as well as its various implementations \n                which should adhere to a certain set of common behaviours.\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can find Device implementations or null by passing search keys to the \"get\" method.",
      "result":"PASS",
      "duration":"0.008 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" method are dependent on the current \n            system and the available hardware.\n        "]
      },
      "blocks":[
        {"kind":"when","text":"We pass a query key word to the \"get\" method...","code":["    var device = Device.get(query)"]},

        {"kind":"then","text":"...the result should be a non-null device (if our query key matches something).","code":["    device != null"]},

        {"kind":"and","text":"The resulting Device variable has the expected type (CPU, OpenCLDevice, ...).","code":["    device.class == type"]},

        {"kind":"where","text":"The query key words and the expected device types returned.","code":{"query":["cPu","jVm","natiVe","Threaded","first CPU","openCl","first gpu","nvidia or amd or intel","rocm or cuda or amd or nvidia","nvidia || amd or intel","cuda||rocm || gpu","first"],"type":["class neureka.devices.host.CPU","class neureka.devices.host.CPU","class neureka.devices.host.CPU","class neureka.devices.host.CPU","class neureka.devices.host.CPU","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice","class neureka.devices.opencl.OpenCLDevice"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can query the backend for devices by specifying both the requested type and a key word.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        ","\n            Note that the examples specified in the table below\n            may not be the same on every system because the devices\n            returned by the \"get\" and \"find\" methods are dependent on the current \n            system and the available hardware that Neureka encounters.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"Querying for a device using a device type and key works as expected.","code":["    Device.get(type, key) === expected"]},

        {"kind":"and","text":"We can use the \"find\" method if we want the result to be wrapped in a nice and safe Optional instance.","code":["    Device.find(type, key).isEmpty() && expected == null || Device.find(type, key).get() === expected"]},

        {"kind":"where","text":"The we can use the following device type, key and expected device instance.","code":{"type":["interface neureka.devices.Device","interface neureka.devices.Device","interface neureka.devices.Device","class testutility.mock.DummyDevice","class testutility.mock.DummyDevice","class testutility.mock.DummyDevice","class testutility.mock.DummyDevice"],"key":["cpu","jvm","processor","first","any","cpu","gpu"],"expected":["CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","null","null","null","null"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"In total there are 3 different types of methods for finding device instances.",
      "result":"PASS",
      "duration":"0.004 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The \"get\" method returns a device instance or null.","code":["Device.get(key) === expected"]},

        {"kind":"and","text":"The \"any\" method returns a device instance or the \"CPU device\", which is the library default device.","code":["Device.any(key) === expected || Device.any(key) === CPU.get()"]},

        {"kind":"and","text":"The \"find\" method returns a device instance wrapped in an Optional instance.","code":["Device.find(key).isEmpty() && expected == null || Device.find(key).get() === expected"]},

        {"kind":"where","text":"The we can use the following search key and expected device instance.","code":{"key":["cpu","central processing","e9rt56hqfwe5f0","5638135dh90978","banana device","cupcake"],"expected":["CPU[cores=12]","CPU[cores=12]","null","null","null","null"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Passing a numeric array to a tensor should modify its contents!",
      "result":"PASS",
      "duration":"0.008 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        ","\n            Here we demonstrate that a tensor located on a non-CPU `Device` will be\n            updated when passing a float or double array, even if it its data is stored\n            on the GPU or somewhere else!\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor which we transfer to a device using the \"to\" method...","code":["    Tsr t = Tsr.of(new int[]{3, 2}, new double[]{2, 4, -5, 8, 3, -2}).to(device)"]},

        {"kind":"when","text":"A numeric array is passed to said tensor...","code":["    t.mut.setItems(data1)","    t.mut.setItems(data2)"]},

        {"kind":"then","text":"The tensor (as String) contains the expected String.","code":["    t.toString().contains(expected)"]},

        {"kind":"where","text":"The following data is being used :","code":{"device":["CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]"],"data1":["[]","[2.0, 3.0, 4.0, 5.0, 6.0]","[3.0, 5.0, 6.0]","[9.0, 4.0, 7.0, -12.0]","[22.0, 24.0, 35.0, 80.0]","[]","[2.0, 3.0, 4.0, 5.0, 6.0]","[3.0, 5.0, 6.0]","[9.0, 4.0, 7.0, -12.0]","[22.0, 24.0, 35.0, 80.0]"],"data2":["[]","[1.0, 1.0, 1.0, 1.0]","[4.0, 2.0, 3.0]","[-5.0, -2.0, 1.0]","[-1.0, -1.0, -1.0]","[]","[1.0, 1.0, 1.0, 1.0, 1.0]","[4.0, 2.0, 3.0]","[-5.0, -2.0, 1.0]","[-1.0, -1.0, -1.0]"],"expected":["(3x2):[2.0, 4.0, -5.0, 8.0, 3.0, -2.0]","(3x2):[1.0, 1.0, 1.0, 1.0, 6.0, -2.0]","(3x2):[4.0, 2.0, 3.0, 8.0, 3.0, -2.0]","(3x2):[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","(3x2):[-1.0, -1.0, -1.0, 80.0, 3.0, -2.0]","(3x2):[2.0, 4.0, -5.0, 8.0, 3.0, -2.0]","(3x2):[1.0, 1.0, 1.0, 1.0, 1.0, -2.0]","(3x2):[4.0, 2.0, 3.0, 8.0, 3.0, -2.0]","(3x2):[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","(3x2):[-1.0, -1.0, -1.0, 80.0, 3.0, -2.0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Devices expose an API for accessing (reading and writing) the data of a tensor.",
      "result":"PASS",
      "duration":"0.049 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Because in some environments OpenCL might not be available, the test will be stopped!","code":["if ( device == null ) return"]},

        {"kind":"when","text":"A 2D tensor is being instantiated by passing the given shape and data...","code":["Tsr t = Tsr.of(shape, data).to(device)"]},

        {"kind":"then","text":"The tensor values (as List) are as expected.","code":["Arrays.equals(t.getItemsAs(double[].class), DataConverter.get().convert(expected,double[].class))"]},

        {"kind":"when","text":"The same underlying data is being queried by calling the device...","code":["var result = (0..<t.size()).collect{device.access(t).readAt(it)}"]},

        {"kind":"then","text":"This other result also contains the same elements.","code":["result == expected"]},

        {"kind":"when","text":"","code":["result = (0..<t.size()).collect{device.access(t).readArray(data.getClass(), it, 1)[0]}"]},

        {"kind":"then","text":"This other result also contains the same elements.","code":["result == expected"]},

        {"kind":"where","text":"The following data is being used for tensor instantiation :","code":{"device":["CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","CPU[cores=12]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]"],"shape":["[3, 2]","[3, 2]","[3, 2]","[3, 2]","[3, 2]","[3, 2]","[3, 2]","[3, 2]","[3, 2]"],"data":["[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","[true, false, false]","[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","[-1.0, -1.0, -1.0, 80.0, 3.0, -2.0]"],"expected":["[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[-5, -2, 1, -12, 3, -2]","[true, false, false, true, false, false]","[-5.0, -2.0, 1.0, -12.0, 3.0, -2.0]","[-1.0, -1.0, -1.0, 80.0, 3.0, -2.0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Execution calls containing null arguments will cause an exception to be thrown in device instances.",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Every argument within an ExecutionCall instance has a purpose. Null is not permissible.\n        ","\n            Every argument within an ExecutionCall instance has a purpose. Null is not permissible.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A mocked ExecutionCall with mocked algorithm...","code":["    var call = Mock(ExecutionCall)","    var implementation = Mock(Algorithm)"]},

        {"kind":"and","text":"We construct a plausible mocked call by making it expose the given device.","code":["    call.getDevice() >> device"]},

        {"kind":"when","text":"The call is being passed to the execution utility method ..","code":["    AbstractDeviceAlgorithm.prepareAndExecute( call, AbstractDeviceAlgorithm::executeDeviceAlgorithm )"]},

        {"kind":"then","text":"...the implementation is being accessed in order to access the mocked lambda...","code":["    (1.._) * call.getAlgorithm() >> implementation"]},

        {"kind":"and","text":"The tensor array is being accessed to check for null. (For exception throwing)","code":["    1 * call.inputs() >> new Tsr[]{ Mock(Tsr), null }"]},

        {"kind":"and","text":"The expected exception is being thrown alongside a descriptive message.","code":["    def exception = thrown(IllegalArgumentException)","    exception.message == \"Device arguments may not be null!\\n\" +","            \"One or more tensor arguments within the given ExecutionCall instance is null.\""]},

        {"kind":"where","text":"The following Device instances are being tested :","code":{"device":["CPU[cores=12]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Devices store tensors which can also be restored.",
      "result":"PASS",
      "duration":"0.015 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Device implementations also behave like storage units for tensors,\n            which you can see below.\n        ","\n            Device implementations also behave like storage units for tensors,\n            which you can see below.\n        ","\n            Device implementations also behave like storage units for tensors,\n            which you can see below.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"The given device is available and Neureka is being reset.","code":["    if ( device == null ) return"]},

        {"kind":"and","text":"Two tensors which will be transferred later on...","code":["    int initialNumber = device.size()","    Tsr a = Tsr.of([2, 3], \";)\")","    Tsr b = Tsr.of([3, 4], \":P\")"]},

        {"kind":"expect","text":"The given device is initially empty.","code":["    device.isEmpty() == ( device.size() == 0 )","    !device.has( a ) || device instanceof CPU","    !device.has( b ) || device instanceof CPU"]},

        {"kind":"when","text":"The the first tensor is being passed to the device...","code":["    device.store( a )"]},

        {"kind":"then","text":"...tensor \"a\" is now on the device.","code":["    !device.isEmpty()","    device.size() == initialNumber + 1","    device.has( a )","    !device.has( b ) || device instanceof CPU"]},

        {"kind":"when","text":"The the second tensor is being passed to the device...","code":["    device.store( b )"]},

        {"kind":"then","text":"...tensor \"b\" is now also on the device.","code":["    !device.isEmpty()","    device.size() == initialNumber + 2","    device.has( a )","    device.has( b )"]},

        {"kind":"when","text":"They are being removed again...","code":["    device.free( a ).free( b )"]},

        {"kind":"then","text":"...the device is empty again.","code":["    device.isEmpty() == ( initialNumber == 0 )","    device.size() == initialNumber","    !device.has( a ) || device instanceof CPU","    !device.has( b ) || device instanceof CPU"]},

        {"kind":"where","text":"The following Device instances are being tested :","code":{"device":["CPU[cores=12]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]","FileDevice[directory=build/test-can,stored={},loadable=[],loaded=[]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Devices also store slices which can also be restored just like normal tensors.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The given device is available and Neureka is being reset.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"Two tensors which will be transferred later on...","code":["int initialNumber = device.size()","Tsr a = Tsr.of([2, 3], \";)\")","Tsr b = a[1, 0..2]"]},

        {"kind":"expect","text":"The given device is initially empty.","code":["device.isEmpty() == ( device.size() == 0 )","!device.has( a ) || device instanceof CPU","!device.has( b ) || device instanceof CPU"]},

        {"kind":"when","text":"The the first tensor is being passed to the device...","code":["device.store( a )"]},

        {"kind":"then","text":"...tensor \"a\" is now on the device.","code":["!device.isEmpty()","device.size() == initialNumber + 1","device.has( a )"]},

        {"kind":"and","text":"","code":["!device.has( b ) || device instanceof CPU"]},

        {"kind":"when","text":"","code":["device.free( a )"]},

        {"kind":"then","text":"...the device is empty again.","code":["device.isEmpty() == ( initialNumber == 0 )","device.size() == initialNumber","!device.has( a ) || device instanceof CPU","!device.has( b ) || device instanceof CPU"]},

        {"kind":"where","text":"The following Device instances are being tested :","code":{"device":["CPU[cores=12]","OpenCLDevice[id=0x233028e4e10,platform=0x233028e46e0]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Devices cannot store slices whose parents are not already stored.",
      "result":"IGNORED",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The given device is available and Neureka is being reset.","code":["if ( device == null ) return"]},

        {"kind":"and","text":"Two tensors which will be transferred later on...","code":["Tsr a = Tsr.of([2, 3], \";)\")","Tsr b = a[1, 0..2]"]},

        {"kind":"and","text":"","code":["var initialSize = device.size()"]},

        {"kind":"expect","text":"The given device is initially empty.","code":["device.isEmpty() == ( device.size() == 0 )","!device.has( a )","!device.has( b )"]},

        {"kind":"when","text":"The the first tensor is being passed to the device...","code":["device.store( b )"]},

        {"kind":"then","text":"...tensor \"a\" is now on the device.","code":["var exception = thrown(IllegalStateException)","exception.message.contains(\"Data parent is not outsourced!\")"]},

        {"kind":"expect","text":"The given device is initially empty.","code":["device.isEmpty() == ( device.size() == 0 )","!device.has( a )","!device.has( b )"]},

        {"kind":"when","text":"","code":["storageMethod(device, a)"]},

        {"kind":"then","text":"","code":["!device.isEmpty()","a.isOutsourced()","b.isOutsourced()"]},

        {"kind":"and","text":"","code":["device.has( a )","b.mut.data.ref == null","device.has( b )","device.size() == initialSize"]},

        {"kind":"where","text":"The following Device instances are being tested :","code":{"device":[],"storageMethod":[]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Virtual tensors stay virtual when outsourced.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Note: A virtual tensor is a tensor which is not yet fully initialized\n            in the sense that the data array is not yet allocated according to the \n            tensors size (number of elements they hold).\n            This is the case for tensor which are filled homogeneously with a single value,\n            like for example an all 0 tensor.    \n        ","\n            Note: A virtual tensor is a tensor which is not yet fully initialized\n            in the sense that the data array is not yet allocated according to the \n            tensors size (number of elements they hold).\n            This is the case for tensor which are filled homogeneously with a single value,\n            like for example an all 0 tensor.    \n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a homogeneously filled tensor, which is therefor \"virtual\".","code":["    var t = Tsr.ofFloats().withShape(4,3).all(-0.54f)"]},

        {"kind":"and","text":"We also get a device for testing...","code":["    var device = Device.get(deviceType)"]},

        {"kind":"expect","text":"We expect that the tensor is virtual, meaning its underlying data array stores only a single value...","code":["    t.isVirtual()"]},

        {"kind":"when","text":"We send the tensor to the device...","code":["    t.to(device)"]},

        {"kind":"then","text":"This should cause it to be \"outsourced\", (except dor a CPU device of course).","code":["    t.isOutsourced() != ( device instanceof CPU )"]},

        {"kind":"and","text":"...we expect the tensor to stay virtual on the device!","code":["    t.isVirtual()"]},

        {"kind":"when","text":"We restore the device...","code":["    device.restore(t)"]},

        {"kind":"then","text":"The tensor should no longer be outsourced.","code":["    !t.isOutsourced()"]},

        {"kind":"and","text":"It should still be virtual!","code":["    t.isVirtual()"]},

        {"kind":"where","text":"We test on the following devices:","code":{"deviceType":["CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}