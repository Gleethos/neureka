{
  "className":"ut.framing.Tensor_Framing_Spec",
  "title":"Naming Tensors and their Dimensions.",
  "narrative":"A powerful concept in the data science as well as machine learning\n    world is something usually referred to as \"Data Frames\".\n    These are highly flexible 2D data structures\n    used to load and store CSV, CRV, etc... files for \n    data exploration and further processing.\n    Data frames are so powerful because\n    their indices are labeled and therefore human readable.\n    Neureka's tensors are general purpose data containers\n    which may also stored data in 2 dimensions whose\n    indices may also be something other than integers.",
  "subjects":["neureka.Tsr","neureka.framing.NDFrame"],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.274 seconds"
  },
  "headers":["\n                    This specification covers the behavior\n                    of with respect to specifying aliases for\n                    tensor indices and then using them for slicing.     \n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Added labels to tensors are accessible through the \"index()\" method.",
      "result":"PASS",
      "duration":"0.026 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a 3D tensor and label its indices.","code":["Tsr t = Tsr.of([2, 3, 2], 1..100)","t.label([","        [\"1\", \"2\"],","        [\"a\", \"b\", \"c\"],","        [1, 2]","])","String asString = t.frame().toString()"]},

        {"kind":"expect","text":"The string representation of the tensor should include these labels.","code":["asString.contains(\"a\")","asString.contains(\"b\")","asString.contains(\"c\")","asString.contains(\"1\")","!asString.contains(\"Axis One\")","!asString.contains(\"Axis Two\")","!asString.contains(\"Axis Three\")"]},

        {"kind":"when","text":"We provide a map, where the keys are axis labels...","code":["t.label([","        \"Axis One\" : [\"1\", \"2\"],","        \"Axis Two\" : [\"a\", \"b\", \"c\"],","        \"Axis Three\" : [1, 2]","])","asString = t.frame().toString()"]},

        {"kind":"then","text":"Once again, the string will mention all labels","code":["asString.contains(\"a\")","asString.contains(\"b\")","asString.contains(\"c\")","asString.contains(\"1\")","asString.contains(\"Axis One\")","asString.contains(\"Axis Two\")","asString.contains(\"Axis Three\")","asString.contains(\"|     Axis One     |     Axis Two     |    Axis Three    |\")"]},

        {"kind":"when","text":"","code":["t.label([","        \"Axis One\" : [\"x\", \"y\"],","        \"Axis Two\" : null,","        \"Axis Three\" : [\"tim\", \"tina\"]","])","asString = t.frame().toString()"]},

        {"kind":"then","text":"","code":["t.frame().atAxis(\"Axis Three\").getAllAliasesForIndex(0) == [\"tim\"]","t.frame().atAxis(\"Axis Three\").getAllAliasesForIndex(1) == [\"tina\"]","t.frame().atAxis(\"Axis One\").getAllAliases().contains(\"x\")","t.frame().atAxis(\"Axis One\").getAllAliases().contains(\"y\")","!asString.contains(\" a \")","!asString.contains(\" b \")","!asString.contains(\" c \")","asString.contains(\"x\")","asString.contains(\"tim\")","asString.contains(\"tina\")","asString.contains(\"0\")","asString.contains(\"1\")","asString.contains(\"2\")","asString.contains(\"Axis One\")","asString.contains(\"Axis Two\")","asString.contains(\"Axis Three\")","asString.contains(\"|     Axis One     |     Axis Two     |    Axis Three    |\")"]},

        {"kind":"when","text":"","code":["t.frame().atAxis(\"Axis Two\").replace(1).with(\"Hello\")","asString = t.frame().toString()"]},

        {"kind":"then","text":"","code":["!asString.contains(\" a \")","!asString.contains(\" b \")","!asString.contains(\" c \")","asString.contains(\"x\")","asString.contains(\"tim\")","asString.contains(\"tina\")","asString.contains(\"0\")","!asString.contains(\"1\")","asString.contains(\"Hello\")","asString.contains(\"2\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Rank 2 tensors can be labeled and their labels can be used to extract slices / subsets of tensors.",
      "result":"PASS",
      "duration":"0.019 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Tensor printing is set to \"legacy\" for this test.","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"A labeled tensor of rank 2 is being created.","code":["Tsr t = Tsr.of([3, 4], [","        1d, 2d, 3d, 4d,","        9d, 8d, 6d, 5d,","        4d, 5d, 6d, 7d","])","t.label([","        [\"1\", \"2\", \"3\"],","        [\"a\", \"b\", \"y\", \"z\"]","])"]},

        {"kind":"expect","text":"","code":["t.toString({","            it.rowLimit = 15","            it.isScientific = false","            it.isMultiline = true","            it.hasGradient = false","            it.cellSize = 6","            it.hasValue = true","            it.hasRecursiveGraph = false","            it.hasDerivatives = false","            it.hasShape =  true","            it.isCellBound = false","            it.postfix = \"\"","            it.prefix = \"\"","            it.hasSlimNumbers = false","}) == \"[3x4]:(\\n\" +","      \"   [    a  ][   b  ][   y  ][   z   ]\\n\" +","      \"   (   1.0 ,   2.0 ,   3.0 ,   4.0  ):[ 1 ],\\n\" +","      \"   (   9.0 ,   8.0 ,   6.0 ,   5.0  ):[ 2 ],\\n\" +","      \"   (   4.0 ,   5.0 ,   6.0 ,   7.0  ):[ 3 ]\\n\" +","      \")\""]},

        {"kind":"when","text":"We use a label for slicing a row from the tensor (which is also a matrix in this case).","code":["Tsr x = t[\"2\", 1..2]"]},

        {"kind":"then","text":"This new slice \"x\" then will yield true when using the \"contains\" operator on t.","code":["x in t"]},

        {"kind":"and","text":"Calling the \"contains\" method will also return true.","code":["t.contains(x)"]},

        {"kind":"and","text":"The String representation is as expected.","code":["x.toString().contains(\"[1x2]:(8.0, 6.0)\")"]},

        {"kind":"and","text":"The tensor \"x\" is of course a (partial) slice:","code":["x.isSlice()","x.isPartialSlice()"]},

        {"kind":"and","text":"The original tensor \"t\" is a \"parent\":","code":["t.isSliceParent()"]},

        {"kind":"when","text":"We now call the \"getAt\" method manually with the same arguments...","code":["x = t.getAt(\"2\", new int[]{ 1, 2 })"]},

        {"kind":"then","text":"This will produce the same result \"x\" with the same properties...","code":["x in t","t.contains(x)","x.toString().contains(\"[1x2]:(8.0, 6.0)\")","x.isSlice()","t.isSliceParent()"]},

        {"kind":"when","text":"Supplying String ranges (whose entries are also labels) for slicing...","code":["x = t[\"2\"..\"3\", \"b\"..\"y\"]"]},

        {"kind":"then","text":"This slice will be as expected!","code":["x in t","t.contains(x)","x.toString().contains(\"[2x2]:(8.0, 6.0, 5.0, 6.0)\")","x.isSlice()","x.isPartialSlice()","t.isSliceParent()"]},

        {"kind":"when","text":"Calling the \"getAt\" method manually with \"ranges\" as String arrays...","code":["x = t.getAt(new String[]{\"2\", \"3\"}, new String[]{\"b\", \"y\"})"]},

        {"kind":"then","text":"...this will produce the same result as previously:","code":["x in t","t.contains(x)","x.toString().contains(\"[2x2]:(8.0, 6.0, 5.0, 6.0)\")","x.isSlice()","x.isPartialSlice()","t.isSliceParent()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Rank 3 tensors can be labeled and their labels can be used to extract slices / subsets of tensors.",
      "result":"PASS",
      "duration":"0.213 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Tensor printing is set to \"legacy\" for this test.","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"A labeled tensor of rank 3 is being created.","code":["Tsr t = Tsr.of([2, 3, 4], -7d..7d)","t.label( 'My Tensor', [","    [\"1\", \"2\"],","    [\"a\", \"b\", \"y\"],","    [\"tim\", \"tom\", \"tina\", \"tanya\"]","])"]},

        {"kind":"expect","text":"When the tensor is converted to a String then the labels will be included:","code":["t.toString({","    it.rowLimit = 15","    it.isScientific = false","    it.isMultiline = true","    it.hasGradient = false","    it.cellSize = 6","    it.hasValue = true","    it.hasRecursiveGraph = false","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","}) == \"[2x3x4]:(\\n\" +","      \"   [ 1 ]:(\\n\" +","      \"      [   tim ][  tom ][ tina ][ tanya ]:[ My Tensor ]\\n\" +","      \"      (  -7.0 ,  -6.0 ,  -5.0 ,  -4.0  ):[ a ],\\n\" +","      \"      (  -3.0 ,  -2.0 ,  -1.0 ,   0.0  ):[ b ],\\n\" +","      \"      (   1.0 ,   2.0 ,   3.0 ,   4.0  ):[ y ]\\n\" +","      \"   ),\\n\" +","      \"   [ 2 ]:(\\n\" +","      \"      [   tim ][  tom ][ tina ][ tanya ]:[ My Tensor ]\\n\" +","      \"      (   5.0 ,   6.0 ,   7.0 ,  -7.0  ):[ a ],\\n\" +","      \"      (  -6.0 ,  -5.0 ,  -4.0 ,  -3.0  ):[ b ],\\n\" +","      \"      (  -2.0 ,  -1.0 ,   0.0 ,   1.0  ):[ y ]\\n\" +","      \"   )\\n\" +","      \")\""]},

        {"kind":"when","text":"Creating a slice by passing a single label, a range of labels and a range with stride...","code":["Tsr x = t[\"2\", \"b\"..\"y\", [[\"tim\",\"tanya\"]:2]]"]},

        {"kind":"then","text":"This new slice \"x\" then will yield true when using the \"contains\" operator on t.","code":["x in t"]},

        {"kind":"and","text":"Calling the \"contains\" method will also return true.","code":["t.contains(x)"]},

        {"kind":"and","text":"The String representation is as expected.","code":["x.toString({","    it.rowLimit = 15","    it.isScientific = false","    it.isMultiline = true","    it.hasGradient = false","    it.cellSize = 6","    it.hasValue = true","    it.hasRecursiveGraph = false","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","}) == \"[1x2x2]:(\\n\" +","      \"   (\\n\" +","      \"      (  -6.0 ,  -4.0  ),\\n\" +","      \"      (  -2.0 ,   0.0  )\\n\" +","      \"   )\\n\" +","      \")\""]},

        {"kind":"and","text":"The tensor \"x\" is of course a slice:","code":["x.isSlice()"]},

        {"kind":"and","text":"The original tensor \"t\" is a \"parent\":","code":["t.isSliceParent()"]},

        {"kind":"and","text":"The slice is not virtual.","code":["!x.isVirtual()"]},

        {"kind":"when","text":"We slice the tensor t by passing a map of start and end labels as keys and strides as values.","code":["x = t[\"2\", [[\"b\"..\"y\"]:1, [\"tim\",\"tanya\"]:2]]"]},

        {"kind":"then","text":"","code":["x in t","t.contains(x)","x.toString({","    it.rowLimit = 15","    it.isScientific = false","    it.isMultiline = true","    it.hasGradient = false","    it.cellSize = 6","    it.hasValue = true","    it.hasRecursiveGraph = false","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","}) == \"[1x2x2]:(\\n\" +","      \"   (\\n\" +","      \"      (  -6.0 ,  -4.0  ),\\n\" +","      \"      (  -2.0 ,   0.0  )\\n\" +","      \"   )\\n\" +","      \")\"","!x.isVirtual()","x.isSlice()","t.isSliceParent()","t.sliceCount()==2"]},

        {"kind":"when","text":"We slice the tensor t by passing a map of start and end labels as keys and strides as values.","code":["x = t[[[\"2\"]:1, [\"b\"..\"y\"]:1, [\"tim\",\"tanya\"]:2]]"]},

        {"kind":"then","text":"","code":["x in t","t.contains(x)","x.toString({","    it.rowLimit = 15","    it.isScientific = false","    it.isMultiline = true","    it.hasGradient = false","    it.cellSize = 6","    it.hasValue = true","    it.hasRecursiveGraph = false","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","}) == \"[1x2x2]:(\\n\" +","      \"   (\\n\" +","      \"      (  -6.0 ,  -4.0  ),\\n\" +","      \"      (  -2.0 ,   0.0  )\\n\" +","      \"   )\\n\" +","      \")\"","!x.isVirtual()","x.isSlice()","t.isSliceParent()","t.sliceCount()==3"]},

        {"kind":"when","text":"","code":["t.label(","    new String[][]{","        new String[]{ \"1\", \"2\" },","        new String[]{ \"a\", \"b\", \"y\" },","        new String[]{ \"tim\", \"tom\", \"tina\", \"tanya\" }","    }",")","x = t[ [\"1\",\"2\"], \"b\"..\"y\", [[\"tim\",\"tanya\"]:2] ]"]},

        {"kind":"then","text":"","code":["x in t","t.contains(x)","x.toString({","    it.rowLimit = 15","    it.isScientific = false","    it.isMultiline = true","    it.hasGradient = false","    it.cellSize = 6","    it.hasValue = true","    it.hasRecursiveGraph = false","    it.hasDerivatives = false","    it.hasShape =  true","    it.isCellBound = false","    it.postfix = \"\"","    it.prefix = \"\"","    it.hasSlimNumbers = false","}) == \"[2x2x2]:(\\n\" +","      \"   (\\n\" +","      \"      (  -3.0 ,  -1.0  ),\\n\" +","      \"      (   1.0 ,   3.0  )\\n\" +","      \"   ),\\n\" +","      \"   (\\n\" +","      \"      (  -6.0 ,  -4.0  ),\\n\" +","      \"      (  -2.0 ,   0.0  )\\n\" +","      \"   )\\n\" +","      \")\"","!x.isVirtual()","x.isSlice()","t.isSliceParent()","t.sliceCount() == 4"]},

        {"kind":"when","text":"...we make the GC collect some garbage...","code":["WeakReference weak = new WeakReference(x)","x = null","System.gc()","Sleep.until(100, { weak.get() == null })"]},

        {"kind":"then","text":"The weak reference is null because the tensor had no string reference to it! (No memory leak!)","code":["weak.get() != null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A tensor can be labeled partially.",
      "result":"PASS",
      "duration":"0.003 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A labeled tensor of rank 3 is being created.","code":["Tsr t = Tsr.of([2, 3, 4], -7d..7d)","t.label( 'My Tensor', [","    [\"1\", \"2\"],","    null, // We don't want to label the rows","    [\"tim\", \"tom\"] // We only label 2 of 4","])"]},

        {"kind":"expect","text":"When the tensor is converted to a String then the specified labels will be included:","code":["t.toString({","    it.isMultiline=true; it.isCellBound=true; it.cellSize=7;it.isLegacy=false","}) == \"(2x3x4):[\\n\" +","        \"   ( 1 ):[\\n\" +","        \"      (   tim  )(  tom  )(       )(        ):( My Tensor )\\n\" +","        \"      [   -7.0 ,   -6.0 ,   -5.0 ,   -4.0  ],\\n\" +","        \"      [   -3.0 ,   -2.0 ,   -1.0 ,   0.0   ],\\n\" +","        \"      [   1.0  ,   2.0  ,   3.0  ,   4.0   ]\\n\" +","        \"   ],\\n\" +","        \"   ( 2 ):[\\n\" +","        \"      (   tim  )(  tom  )(       )(        ):( My Tensor )\\n\" +","        \"      [   5.0  ,   6.0  ,   7.0  ,   -7.0  ],\\n\" +","        \"      [   -6.0 ,   -5.0 ,   -4.0 ,   -3.0  ],\\n\" +","        \"      [   -2.0 ,   -1.0 ,   0.0  ,   1.0   ]\\n\" +","        \"   ]\\n\" +","        \"]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}