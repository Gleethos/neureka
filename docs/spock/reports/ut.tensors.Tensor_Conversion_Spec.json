{
  "className":"ut.tensors.Tensor_Conversion_Spec",
  "title":"Tensor Type Conversion",
  "narrative":"Here we specify how a tensor can be converted to other data types\n    like for example another tensor of a different data type.",
  "subjects":["neureka.Tsr"],
  "statistics":{
    "runs":"3",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.014 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We turn a tensor into a scalar value or string through the \"as\" operator!",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A tensor of 3 floats:","code":["var t = Tsr.ofFloats().vector(42, 42, 42)"]},

        {"kind":"expect","text":"We can now turn the tensor int other data types!","code":["(t as Integer) == 42","(t as Double) == 42","(t as Short) == 42","(t as Byte) == 42","(t as Long) == 42"]},

        {"kind":"and","text":"Also use it instead of the \"toString\" method.","code":["(t as String) == t.toString()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors value type can be changed by calling \"toType(...)\".",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr x = Tsr.of(3d)"]},

        {"kind":"when","text":"","code":["x.unsafe.toType( Float.class )"]},

        {"kind":"then","text":"","code":["x.rawItems instanceof float[]","x.unsafe.data.ref instanceof float[]","x.data instanceof float[]","x.getItemsAs( float[].class )[ 0 ] == 3.0f"]},

        {"kind":"when","text":"","code":["x.unsafe.toType( Double.class )"]},

        {"kind":"then","text":"","code":["x.rawItems instanceof double[]","x.unsafe.data.ref instanceof double[]","x.data instanceof double[]","x.getItemsAs( float[].class )[ 0 ]==3.0f"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can change the data type of all kinds of tensors.",
      "result":"PASS",
      "duration":"0.001 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        ","\n            Warning! The `toType` method mutates the tensor!\n            This is especially problematic with respect to generics, \n            because if the tensor is still used as a tensor of the old type, \n            then the compiler will not be able to detect that the tensor has changed its type.\n            This is why we have to use the `unsafe` API exists.\n            Only use this method if there are urgent performance requirements and\n            you know exactly what you are doing!\n        "]
      },
      "blocks":[
        {"kind":"given","text":"A simple tensor with a few initial values.","code":["var data = [-3, -12, 42, -42, 12, 3]","var a = Tsr.of(sourceType).withShape(data.size()).andFill(data)"]},

        {"kind":"when","text":"We change the data type of the tensor using the unsafe \"toType\" method.","code":["var b = a.unsafe.toType(targetType)"]},

        {"kind":"then","text":"The returned tensor has the expected data type.","code":["b.itemType == targetType"]},

        {"kind":"and","text":"The returned tensor has the expected values.","code":["b.rawItems == data.collect({ it.asType(targetType) })"]},

        {"kind":"and","text":"The returned tensor is in fact the original instance.","code":["a === b"]},

        {"kind":"where","text":"We use the following data and matrix dimensions!","code":{"sourceType":["class java.lang.Double","class java.lang.Double","class java.lang.Double","class java.lang.Double","class java.lang.Double","class java.lang.Double","class java.lang.Float","class java.lang.Float","class java.lang.Float","class java.lang.Float","class java.lang.Float","class java.lang.Float","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Long","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Integer","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Short","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte","class java.lang.Byte"],"targetType":["class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte","class java.lang.Double","class java.lang.Float","class java.lang.Long","class java.lang.Integer","class java.lang.Short","class java.lang.Byte"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}