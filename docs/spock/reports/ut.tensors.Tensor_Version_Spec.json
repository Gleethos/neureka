{
  "className":"ut.tensors.Tensor_Version_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.252 seconds"
  },

  "title":"Tensor (Data Array) Version",
  "narrative":"There are two fundamental categories of operations\u000a which can be applied to tensors : \u000a Inline operations and Non-Inline operations! \u000a \u000a Inline operations are often times problematic because they produce\u000a side effects by changing passed tensors instead of producing new ones... \u000a One such bad side effect can easily occur for tensors involved in the\u000a autograd system, more specifically: the recorded computation graph. \u000a Inline operations can break the mathematically pureness of the back-propagation\u000a procedure by for example changing partial derivatives... <br>\u000a In order to prevent said errors to occur unnoticed tensors\u000a have versions which will increment when the underlying data of the tensor changes. \u000a This version will be tracked by the computation graph as well in order to\u000a match it with the ones stored inside the tensor. \u000a A mismatch would then yield an exception! \u000a \u000a This specification is responsible for defining the behaviour of this\u000a version number with respect to their wrapping tensors as well as computation graph nodes.",
  "headers":["\\u000a <p>\\u000a Here you can find out how the version number of a tensor is\\u000a set and tracked.\\u000a </p>\\u000a"],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Inline operations causes version incrementation.",
      "result":"PASS",
      "duration":"0.088 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"2 tensors a and b.","code":["Neureka.get().settings().autograd().setIsPreventingInlineOperations( safe_inline )","Tsr a = Tsr.of(4) + Tsr.of(2)","Tsr b = Tsr.of(-1) + Tsr.of(-3).setRqsGradient(true)","Binding binding = new Binding()","binding.setVariable('a', a)","binding.setVariable('b', b)"]},

        {"kind":"expect","text":"Initially both tensors have a version number of 0.","code":["a.getVersion() == 0","b.getVersion() == 0"]},

        {"kind":"when","text":"The groovy code (performing inline operations) is being evaluated.","code":["Tsr c = new GroovyShell(binding).evaluate((code))"]},

        {"kind":"then","text":"The resulting tensor (toString) will contain the expected sub-string.","code":["c.toString().contains(expected)","c == a"]},

        {"kind":"and","text":"The three tensors have the expected versions.","code":["a.getVersion() == version_of_a","b.getVersion() == version_of_b","c.getVersion() == version_of_c"]},

        {"kind":"where","text":"","code":{"code":[" a.plusAssign(b) "," a.minusAssign(b) "," a.timesAssign(b) "," a.divAssign(b) "," a.plusAssign(b) "," a.minusAssign(b) "," a.timesAssign(b) "," a.divAssign(b) "],"safe_inline":["true","true","true","true","false","false","false","false"],"version_of_c":["1","1","1","1","0","0","0","0"],"version_of_a":["1","1","1","1","0","0","0","0"],"version_of_b":["0","0","0","0","0","0","0","0"],"expected":["(1):[2.0]","(1):[10.0]","(1):[-24.0]","(1):[-1.5]","(1):[2.0]","(1):[10.0]","(1):[-24.0]","(1):[-1.5]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Non-inline operations do not cause version incrementation.",
      "result":"PASS",
      "duration":"0.096 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().autograd().setIsPreventingInlineOperations( no_inline )"]},

        {"kind":"and","text":"Two tensors, one requiring gradients and the other one not.","code":["Tsr a = Tsr.of(6).setRqsGradient(true)","Tsr b = Tsr.of(-4)"]},

        {"kind":"and","text":"A binding for both tensors as preparation for calling the Groovy shell.","code":["Binding binding = new Binding()","binding.setVariable('a', a)","binding.setVariable('b', b)"]},

        {"kind":"expect","text":"The versions of both tensors are 0 initially.","code":["a.getVersion() == 0","b.getVersion() == 0"]},

        {"kind":"when","text":"The Groovy code is being evaluated inside the Groovy shell.","code":["Tsr c = new GroovyShell(binding).evaluate((code))"]},

        {"kind":"then","text":"The resulting tensor (toString) will contain the expected String.","code":["c.toString().contains(expected)","c != a"]},

        {"kind":"and","text":"The three tensors have the expected versions.","code":["a.getVersion() == version_of_a","b.getVersion() == version_of_b","c.getVersion() == version_of_c"]},

        {"kind":"where","text":"The following arguments are being used:","code":{"code":[" a + b "," a - b "," a * b "," a / b "," a % b "," a + b "," a - b "," a * b "," a / b "," a % b "],"no_inline":["false","false","false","false","false","true","true","true","true","true"],"version_of_c":["0","0","0","0","0","0","0","0","0","0"],"version_of_a":["0","0","0","0","0","0","0","0","0","0"],"version_of_b":["0","0","0","0","0","0","0","0","0","0"],"expected":["(1):[2.0]","(1):[10.0]","(1):[-24.0]","(1):[-1.5]","(1):[2.0]","(1):[2.0]","(1):[10.0]","(1):[-24.0]","(1):[-1.5]","(1):[2.0]"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Inline operations cause illegal state exceptions.",
      "result":"PASS",
      "duration":"0.034 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().autograd().setIsPreventingInlineOperations( true )","Tsr a = Tsr.of(4) + Tsr.of(2).setRqsGradient(true)","Tsr b = Tsr.of(-4)","Binding binding = new Binding()","binding.setVariable('a', a)","binding.setVariable('b', b)"]},

        {"kind":"expect","text":"","code":["a.getVersion() == 0","b.getVersion() == 0"]},

        {"kind":"when","text":"The groovy code is being evaluated.","code":["Tsr c = new GroovyShell( binding ).evaluate( code )"]},

        {"kind":"then","text":"An illegal state exception is being thrown.","code":["def exception = thrown(IllegalStateException)","exception.message == message"]},

        {"kind":"and","text":"The variable \"c\" is null!","code":["c == null"]},

        {"kind":"where","text":"","code":{"code":["a.plusAssign(b) ","a.minusAssign(b)","a.timesAssign(b)","a.divAssign(b) "],"message":["Inline operation occurred on tensor which is part of a computation graph node with autograd support!\u000aThe following OperationType caused an internal version mismatch: 'left_inline'","Inline operation occurred on tensor which is part of a computation graph node with autograd support!\u000aThe following OperationType caused an internal version mismatch: 'left_inline'","Inline operation occurred on tensor which is part of a computation graph node with autograd support!\u000aThe following OperationType caused an internal version mismatch: 'left_inline'","Inline operation occurred on tensor which is part of a computation graph node with autograd support!\u000aThe following OperationType caused an internal version mismatch: 'left_inline'"]}}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Storing a tensor on a device should not change the version of a tensor (Even though its data changed technically).",
      "result":"PASS",
      "duration":"0.005 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var t = Tsr.ofFloats().withShape(5, 2).andSeed(42)"]},

        {"kind":"expect","text":"","code":["t.version == 1"]},

        {"kind":"when","text":"","code":["t.to('GPU')"]},

        {"kind":"then","text":"","code":["t.isOutsourced()","t.version == 1"]},

        {"kind":"when","text":"","code":["t[0] = 1f","t[new int[]{1, 0}] = 6f","t[0, 1] = 42f","t.set(0, 3f)","t.setItemAt(3, 4f)","t.set(new int[]{1, 1}, -1f)","t.unsafe.setDataAt(3, 5f)"]},

        {"kind":"then","text":"","code":["t.version == 8"]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}