{
  "className":"ut.backend.Backend_Extension_Spec",
  "title":"",
  "narrative":"",
  "subjects":["neureka.backend.api.Operation","neureka.backend.api.BackendContext"],
  "statistics":{
    "runs":"1",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.065 seconds"
  },
  "headers":["\n                   This specification defines the behavior of\n                   Operation instances and their ability to be extended! <br> \n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Mock operation interacts with FunctionNode (AbstractFunction) instance as expected.",
      "result":"PASS",
      "duration":"0.062 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new mock operation type is being created.","code":["var op = Mock(Operation)"]},

        {"kind":"and","text":"A list of mocked function source nodes.","code":["var children = [Mock(FunctionInput), Mock(FunctionInput)]"]},

        {"kind":"and","text":"A mock tensor which is the expected output","code":["Tsr output = Mock(Tsr)","var mutate = Mock(MutateTsr)"]},

        {"kind":"and","text":"A mocked operation implementation.","code":["var implementation = Mock(Algorithm)"]},

        {"kind":"when","text":"A FunctionNode is being instantiated via the given mocks...","code":["var function = new FunctionNode(op, children, false)"]},

        {"kind":"then","text":"The mock type has been called as expected and the function has the following properties.","code":["(1.._) * op.getArity() >> 2","function.isFlat()","!function.isDoingAD()"]},

        {"kind":"when","text":"The function is being called with an empty tensor array...","code":["var result = function.call(new Tsr[0])"]},

        {"kind":"then","text":"The custom call hook should be accessed as outlined below.","code":["(0.._) * op.getAlgorithmFor(_) >> implementation","(0.._) * implementation.execute(_,_) >> Result.of(output)","(1.._) * output.getMut() >> mutate","(1.._) * mutate.setIsIntermediate(false) >> output","(1.._) * output.isIntermediate() >> true","(1.._) * op.execute(_,_) >> Result.of(output)"]},

        {"kind":"and","text":"The mocked output tensor never returns the mock device because our custom call hook replaces execution.","code":["0 * output.getDevice() >> Mock(Device)"]},

        {"kind":"and","text":"The ADAnalyzer of the mock implementation will not be called because \"doAD\" is set to \"false\".","code":["0 * implementation.isSuitableFor(_)"]},

        {"kind":"and","text":"The result is the same as the mock tensor returned by the custom call hook.","code":["result == output"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}