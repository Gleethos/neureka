{
  "className":"ut.device.OpenCLDevice_Exception_Spec",
  "title":"OpenCLDevice Exception Handling",
  "narrative":"The OpenCLDevice class, one of many implementations of the Device interface, \n    represents physical OpenCL devices.\n    This specification defines how instances of this class deal with exceptional information.",
  "subjects":[],
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"0.205 seconds"
  },
  "headers":["\n            <p>\n                It is important that an OpenCLDevice gives insightful error messages\n                when encountering exceptional situations.\n            </p>\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"An OpenCLDevice will throw an exception when trying to add a tensor whose \"data parent\" is not outsourced.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The first found OpenCLDevice instance.","code":["Device device = Device.get('first')"]},

        {"kind":"and","text":"A tensor and a slice tensor of the prior.","code":["Tsr t = Tsr.of([4, 3], 2d)","Tsr s = t[1..3, 1..2]"]},

        {"kind":"expect","text":"Both tensors share not only the same data but also the same data type.","code":["t.mut.data.ref == s.mut.data.ref","t.dataType == DataType.of( Double.class )","s.dataType == DataType.of( Double.class )"]},

        {"kind":"when","text":"We try to add the slice to the device.","code":["device.store(s)"]},

        {"kind":"then","text":"An exception is being thrown.","code":["def exception = thrown(IllegalStateException)"]},

        {"kind":"and","text":"It explains what went wrong.","code":["exception.message == \"Data parent is not outsourced!\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Ad hoc compilation produces expected exceptions.",
      "result":"PASS",
      "duration":"0.104 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def device = Neureka.get().backend().get(CLBackend.class).platforms[0].devices[0]"]},

        {"kind":"expect","text":"Initially there is no ad hoc kernel with the following name.","code":["!device.hasAdHocKernel( 'right_dummy_kernel_name' )"]},

        {"kind":"when","text":"We try to compile a new ad hoc kernel named \"right_dummy_kernel_name\" containing the wrong name in source...","code":["device.compileAdHocKernel( 'right_dummy_kernel_name', \"\"\"","        __kernel void wrong_dummy_kernel_name (","                __global float* output,","                __global float* input,","                float value","            ) {","                unsigned int i = get_global_id( 0 );","                output[i] = input[i] + value;","            }","        \"\"\"",")"]},

        {"kind":"then","text":"An exception is being raised because the kernel name provided does not match the one in the source.","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Method 'clCreateKernel' failed! The name of the '__kernel' method declared inside \\n\" +","        \"the source String does not match the provided name needed for kernel creation.\""]},

        {"kind":"and","text":"Still the kernel does not exist because it failed to compile.","code":["!device.hasAdHocKernel( 'right_dummy_kernel_name' )"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Ad hoc compilation produces expected exceptions when duplication is found.",
      "result":"PASS",
      "duration":"0.097 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def device = Neureka.get().backend().get(CLBackend.class).getPlatforms()[0].devices[0]","def code = \"\"\"","            __kernel void right_dummy_kernel_name (","                    __global float* output,","                    __global float* input,","                    float value","                ) {","                    unsigned int i = get_global_id( 0 );","                    output[i] = input[i] + value;","                }","            \"\"\""]},

        {"kind":"expect","text":"Initially there is no ad hoc kernel with the following name.","code":["!device.hasAdHocKernel( 'right_dummy_kernel_name' )"]},

        {"kind":"when","text":"We try to compile a new ad hoc kernel named \"right_dummy_kernel_name\"...","code":["device.compileAdHocKernel( 'right_dummy_kernel_name', code )"]},

        {"kind":"then","text":"The compilation succeeds and the device stores the new ad hoc kernel.","code":["device.hasAdHocKernel( 'right_dummy_kernel_name' )"]},

        {"kind":"when","text":"We try to compile the same kernel name and source again...","code":["device.compileAdHocKernel( 'right_dummy_kernel_name', code )"]},

        {"kind":"then","text":"This leads to the following exception:","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"Cannot compile kernel source for name 'right_dummy_kernel_name' because the name is already taken.\\n\" +","        \"Use another name or find out why this kernel already exists.\\n\" +","        \"Besides the name, the source code of the existing kernel is also identical.\\n\""]},

        {"kind":"and","text":"Of course the original kernel is still present.","code":["device.hasAdHocKernel( 'right_dummy_kernel_name' )"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Trying to restore a tensor which is not on a device raises exception.",
      "result":"PASS",
      "duration":"0",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["def device = Neureka.get().backend().get(CLBackend.class).getPlatforms()[0].devices[0]"]},

        {"kind":"when","text":"We pass a new tensor to the restore method of the device, even though the tensor is not stored on it...","code":["device.restore( Tsr.newInstance() )"]},

        {"kind":"then","text":"The previous attempt raises an illegal argument exception with an explanatory message.","code":["def exception = thrown( IllegalArgumentException )","exception.message == \"The passed tensor cannot be restored from \" +","        \"this OpenCL device because the tensor is not stored on the device.\\n\""]},

        {"kind":"and","text":"This message is also being logged by the internal device logger.","code":["1 * System.err.println( \"[Test worker] ERROR neureka.devices.opencl.OpenCLDevice - The passed tensor cannot be restored from \" +","        \"this OpenCL device because the tensor is not stored on the device.\\n\"",")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}