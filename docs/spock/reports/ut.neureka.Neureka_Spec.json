{
  "className":"ut.neureka.Neureka_Spec",
  "title":"The Neureka context can be used and configured as expected.",
  "narrative":"This specification covers the behavior of the Neureka class which\n    exposes a global API for configuring thread local contexts and library settings.\n    The purpose of this is to assert that the API exposed by the Neureka class \n    is both thread local and configurable.\n    This specification also exists to cover standards for the Neureka library in general.",
  "subjects":["neureka.Neureka"],
  "statistics":{
    "runs":"6",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"5.739 seconds"
  },
  "headers":["\n                <p>\n                    This specification defines what types of settings are exposed by\n                    Neureka as well as more general things like how string representations\n                    of various library types should look like...        \n                </p>\n            "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Neureka class instance has expected behaviour.",
      "result":"PASS",
      "duration":"0.094 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"Important settings have their expected states.","code":["!Neureka.get().settings().isLocked()","!Neureka.get().settings().debug().isKeepingDerivativeTargetPayloads()","!Neureka.get().settings().autograd().isApplyingGradientWhenTensorIsUsed()"]},

        {"kind":"when","text":"Once something is changes to false...","code":["Neureka.get().settings().autograd().isApplyingGradientWhenTensorIsUsed = true"]},

        {"kind":"then","text":"This setting change applies!","code":["Neureka.get().settings().autograd().isApplyingGradientWhenTensorIsUsed()","!Neureka.get().settings().autograd().isRetainingPendingErrorForJITProp()"]},

        {"kind":"and","text":"The version number is as expected!","code":["Neureka.version()==\"0.17.0\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Neureka settings class can be locked causing its properties to be immutable.",
      "result":"PASS",
      "duration":"0.788 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"Something used to set a property and something to get the property.","code":["def set = { it -> setter(Neureka.get().settings(), it) }","def get = { getter(Neureka.get().settings()) }"]},

        {"kind":"expect","text":"Initially the property has the expected value.","code":["get() == value"]},

        {"kind":"when","text":"We lock the settings object...","code":["Neureka.get().settings().setIsLocked(true)"]},

        {"kind":"and","text":"We try to set the property to another value...","code":["set(!value)"]},

        {"kind":"then","text":"The property is not changed!","code":["get() == value"]},

        {"kind":"when","text":"We unlock the settings object...","code":["Neureka.get().settings().setIsLocked(false)"]},

        {"kind":"and","text":"Again we try to set the property to another value...","code":["set(!value)"]},

        {"kind":"then","text":"The property is changed!","code":["get() != value"]},

        {"kind":"cleanup","text":"We reset the settings object to its original state.","code":["set(value)"]},

        {"kind":"where","text":"The properties used are boolean types.","code":{"value":["false","true","false","true","false","false","true","false","false","false"],"getter":["ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure5@2886f957","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure6@4c649d54","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure7@39ebb078","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure8@7fb88af0","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure9@5b9a6389","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure10@4981c19","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure11@4f567fd1","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure12@368bd392","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure13@7410611e","ut.neureka.Neureka_Spec$__spock_feature_0_1prov1_closure14@3a8349b5"],"setter":["ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure15@33d44f52","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure16@6f51aea5","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure17@59699f75","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure18@1044c44f","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure19@6d9e58e4","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure20@8560401","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure21@64a70690","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure22@3c650c1f","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure23@6e4ee15a","ut.neureka.Neureka_Spec$__spock_feature_0_1prov2_closure24@492cab0"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Every Thread instance has their own Neureka instance.",
      "result":"PASS",
      "duration":"0.075 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A map containing entries for Neureka instances.","code":["def map = ['instance 1':null, 'instance 2':null]"]},

        {"kind":"when","text":"Two newly instantiated tensors store their Neureka instances in the map.","code":["def t1 = new Thread({ map['instance 1'] = Neureka.get() })","def t2 = new Thread({ map['instance 2'] = Neureka.get() })"]},

        {"kind":"and","text":"The tensors are being started and joined.","code":["t1.start()","t2.start()","t1.join()","t2.join()"]},

        {"kind":"then","text":"The map entries will no longer be filled with null.","code":["map['instance 1'] != null","map['instance 2'] != null"]},

        {"kind":"and","text":"The Neureka instances stored in the map will be different objects.","code":["map['instance 1'] != map['instance 2']"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various library objects adhere to the same toString formatting convention!",
      "result":"PASS",
      "duration":"1.677 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The provided object matches the following pattern defining a common standard!","code":["toStringStandard.matcher(neurekaObject.toString()).matches()"]},

        {"kind":"where","text":"The following objects are being used..","code":{"neurekaObject":["CPU[coreCount=32]","DataType[class=String(String)]","Relation[parent=null,children=null,shapeRelations=null]","JITProp@1886645442[finished=0,pending=0,isDone=false]","Neureka[settings=Neureka.Settings[debug=Neureka.Settings.Debug[isKeepingDerivativeTargetPayloads=false],autograd=Neureka.Settings.AutoGrad[isPreventingInlineOperations=true,isRetainingPendingErrorForJITProp=false,isApplyingGradientWhenTensorIsUsed=false,isApplyingGradientWhenRequested=false],view=Neureka.Settings.View[ndArrayPrintSettings=neureka.view.NDPrintSettings@6142d5f],ndim=Neureka.Settings.NDim[isOnlyUsingDefaultNDConfiguration=false],dtype=Neureka.Settings.DType[defaultDataTypeClass=class neureka.dtype.custom.F64,isAutoConvertingExternalDataToJVMTypes=true],isLocked=false],utility=neureka.Neureka$Utility@4e109944,backend=BackendContext[size=41]]","Neureka.Settings[debug=Neureka.Settings.Debug[isKeepingDerivativeTargetPayloads=false],autograd=Neureka.Settings.AutoGrad[isPreventingInlineOperations=true,isRetainingPendingErrorForJITProp=false,isApplyingGradientWhenTensorIsUsed=false,isApplyingGradientWhenRequested=false],view=Neureka.Settings.View[ndArrayPrintSettings=neureka.view.NDPrintSettings@6142d5f],ndim=Neureka.Settings.NDim[isOnlyUsingDefaultNDConfiguration=false],dtype=Neureka.Settings.DType[defaultDataTypeClass=class neureka.dtype.custom.F64,isAutoConvertingExternalDataToJVMTypes=true],isLocked=false]","Neureka.Settings.AutoGrad[isPreventingInlineOperations=true,isRetainingPendingErrorForJITProp=false,isApplyingGradientWhenTensorIsUsed=false,isApplyingGradientWhenRequested=false]","Neureka.Settings.Debug[isKeepingDerivativeTargetPayloads=false]","Neureka.Settings.DType[defaultDataTypeClass=class neureka.dtype.custom.F64,isAutoConvertingExternalDataToJVMTypes=true]","Neureka.Settings.NDim[isOnlyUsingDefaultNDConfiguration=false]","Neureka.Settings.View[ndArrayPrintSettings=neureka.view.NDPrintSettings@6142d5f]","Functions[_dimTrim=dimtrim(I[0]),_idy=(I[0] <- I[1]),_conv=(I[0] x I[1]),_plus=(I[0] + I[1]),_plusAssign=(I[0] <- (I[0] + I[1])),_minus=(I[0] - I[1]),_minusAssign=(I[0] <- (I[0] - I[1])),_div=(I[0] / I[1]),_divAssign=(I[0] <- (I[0] / I[1])),_pow=(I[0] ** I[1]),_powAssign=(I[0] <- (I[0] ** I[1])),_mul=(I[0] * I[1]),_mulAssign=(I[0] <- (I[0] * I[1])),_add=(I[0] + I[1]),_addAssign=(I[0] <- (I[0] + I[1])),_mod=(I[0] % I[1]),_modAssign=(I[0] <- (I[0] % I[1])),_neg=(-1.0 * I[0]),_matMul=(I[0] @ I[1]),_transpose2D=([1,0]:(I[0])),_random=(I[0]),_tanh=tanh(I[0]),_fastTanh=fast_tanh(I[0]),_softsign=softsign(I[0]),_sigmoid=sig(I[0]),_gaus=gaus(I[0]),_fastGaus=fast_gaus(I[0]),_ln=ln(I[0]),_quad=quad(I[0]),_relu=relu(I[0]),_abs=abs(I[0]),_sin=sin(I[0]),_cos=cos(I[0]),_softplus=softplus(I[0]),_silu=silu(I[0]),_gelu=gelu(I[0]),_selu=selu(I[0]),_min=min(I[0]),_max=max(I[0]),_sum=sumItems(I[0]),$jacocoData=[Z@60c0f793]","Functions[_dimTrim=dimtrim(I[0]),_idy=(I[0] <- I[1]),_conv=(I[0] x I[1]),_plus=(I[0] + I[1]),_plusAssign=(I[0] <- (I[0] + I[1])),_minus=(I[0] - I[1]),_minusAssign=(I[0] <- (I[0] - I[1])),_div=(I[0] / I[1]),_divAssign=(I[0] <- (I[0] / I[1])),_pow=(I[0] ** I[1]),_powAssign=(I[0] <- (I[0] ** I[1])),_mul=(I[0] * I[1]),_mulAssign=(I[0] <- (I[0] * I[1])),_add=(I[0] + I[1]),_addAssign=(I[0] <- (I[0] + I[1])),_mod=(I[0] % I[1]),_modAssign=(I[0] <- (I[0] % I[1])),_neg=(-1.0 * I[0]),_matMul=(I[0] @ I[1]),_transpose2D=([1,0]:(I[0])),_random=(I[0]),_tanh=tanh(I[0]),_fastTanh=fast_tanh(I[0]),_softsign=softsign(I[0]),_sigmoid=sig(I[0]),_gaus=gaus(I[0]),_fastGaus=fast_gaus(I[0]),_ln=ln(I[0]),_quad=quad(I[0]),_relu=relu(I[0]),_abs=abs(I[0]),_sin=sin(I[0]),_cos=cos(I[0]),_softplus=softplus(I[0]),_silu=silu(I[0]),_gelu=gelu(I[0]),_selu=selu(I[0]),_min=min(I[0]),_max=max(I[0]),_sum=sumItems(I[0]),$jacocoData=[Z@60c0f793]","BackendContext[size=41]","FunctionCache[size=364]","ExecutionCall[inputs=[..1..],device=CPU[coreCount=32],operation=Addition@2ed929d4[identifier='add',operator='+'],algorithm=LazyRef<>[?],arguments=[DerivIdx[-1],VarIdx[-1]]]","CustomDeviceCleaner@79d027a6[registered=0]","GraphNode@2863d72b[parents=[?, ?],function=(I[0] * I[1]),shape=1]","GraphLock@736777e0[owner=(I[0] * (3.0 / 2.0))]","FileDevice[directory=.,stored={},loadable=[],loaded=[]]","NDConfiguration@7f1754b1#7f1754b1[layout=ROW_MAJOR,shape=[2, 3, 8, 4],translation=[96, 32, 4, 1],indicesMap=[96, 32, 4, 1],spread=[1, 1, 1, 1],offset=[0, 0, 0, 0]]","NDConfiguration@81591d6e#ffffffff81591d6e[layout=UNSPECIFIC,shape=[2, 3, 8, 4],translation=[96, 200, 8, 1],indicesMap=[96, 32, 4, 1],spread=[1, 1, 1, 1],offset=[0, 0, 0, 0]]","NDConfiguration@447dace1#447dace1[layout=UNSPECIFIC,shape=[2, 3, 8, 4],translation=[96, 32, 4, 1],indicesMap=[96, 92, 4, 1],spread=[1, 4, 1, 1],offset=[0, 0, 0, 0]]","NDConfiguration@773c5be9#773c5be9[layout=ROW_MAJOR,shape=[2, 3, 8],translation=[24, 8, 1],indicesMap=[24, 8, 1],spread=[1, 1, 1],offset=[0, 0, 0]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"OpenCL related library objects adhere to the same toString formatting convention!",
      "result":"PASS",
      "duration":"0.231 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The provided object matches the following pattern defining a common standard!","code":["toStringStandard.matcher(neurekaCLObject.toString()).matches()"]},

        {"kind":"where","text":"The following objects are being used..","code":{"neurekaCLObject":["CLContext@448c1290[platforms=[OpenCLPlatform@11a7e4fa[pid=cl_platform_id[0x7fff67b48000],context=cl_context[0x1c18673a020],kernels=[..48..]]]]","OpenCLPlatform@11a7e4fa[pid=cl_platform_id[0x7fff67b48000],context=cl_context[0x1c18673a020],kernels=[..48..]]","OpenCLDevice[deviceId=cl_device_id[0x1c18e4a07a0],platform=OpenCLPlatform@11a7e4fa[pid=cl_platform_id[0x7fff67b48000],context=cl_context[0x1c18673a020],kernels=[..48..]]]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Backend related library objects adhere to the same toString formatting convention!",
      "result":"PASS",
      "duration":"2.795 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"expect","text":"The provided object matches the following pattern defining a common standard!","code":["toStringStandard.matcher(operation.toString()).matches()"]},

        {"kind":"and","text":"The same criteria should also be met for every algorithm within the current operation.","code":["operation.getAllAlgorithms().every {","    toStringStandard.matcher(it.toString()).matches()","}"]},

        {"kind":"where","text":"The following operations are being used..","code":{"operation":["Absolute@6b63267b[identifier='abs',operator='abs']","Cosinus@210fa8dc[identifier='cos',operator='cos']","Gaussian@4ccd84b6[identifier='gaus',operator='gaus']","GaussianFast@486a77f1[identifier='fast_gaus',operator='fast_gaus']","Identity@44548c60[identifier='idy',operator='idy']","Quadratic@b3701f6[identifier='quad',operator='quad']","ReLU@49e10c79[identifier='relu',operator='relu']","Sigmoid@2f210acb[identifier='sig',operator='sig']","Sinus@41d8b8af[identifier='sin',operator='sin']","Softplus@7ed7cf97[identifier='softplus',operator='softplus']","Tanh@5c4d10b8[identifier='tanh',operator='tanh']","TanhFast@1125ab5d[identifier='fast_tanh',operator='fast_tanh']","GaTU@6a009db3[identifier='gatu',operator='gatu']","GaSU@62e04a04[identifier='gasu',operator='gasu']","Softsign@3e7e6341[identifier='softsign',operator='softsign']","Logarithm@3d0c7fcf[identifier='ln',operator='ln']","SiLU@343d96a5[identifier='silu',operator='silu']","GeLU@d7112aa[identifier='gelu',operator='gelu']","SeLU@19f3016a[identifier='selu',operator='selu']","Summation@360764b1[identifier='sumJs',operator='sumJs']","Product@713c2a75[identifier='prodJs',operator='prodJs']","Power@740b49[identifier='power',operator='**']","Division@53546dae[identifier='divide',operator='/']","Multiplication@7b82fdae[identifier='multiply',operator='*']","Modulo@4660f9a6[identifier='modulo',operator='%']","Subtraction@6f3abc98[identifier='subtract',operator='-']","Addition@2ed929d4[identifier='add',operator='+']","XConv@4b9bcc3b[identifier='mul_conv',operator='x']","XConvLeft@5c2e07af[identifier='inv_convolve_mul_left',operator='«x']","XConvRight@17a9fbbd[identifier='inv_convolve_mul_right',operator='x»']","MatMul@4c1645df[identifier='matMul',operator='@']","DimTrim@251a1df7[identifier='dimtrim',operator='dimtrim']","Reshape@34132e9d[identifier='reshape',operator=',']","AssignLeft@4ce6fb9a[identifier='left_inline',operator='<']","Randomization@20b4bfa6[identifier='random',operator='rand']","Cat@2b0fbdc6[identifier='concat',operator='concat']","Slice@49b7b141[identifier='slice',operator='slice']","Min@116d8477[identifier='min',operator='min']","Max@3ca89897[identifier='max',operator='max']","Sum@2fb2102b[identifier='sumItems',operator='sumItems']","OptimizedOperation@7c3fb30a[identifier='my_test_fun',operator='my_test_fun']"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}