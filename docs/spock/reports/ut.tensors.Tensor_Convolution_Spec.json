{
  "className":"ut.tensors.Tensor_Convolution_Spec",
  "title":"Tensor Convolution",
  "narrative":"This specification shows how convolution can be performed on tensors.\n\n    Convolution is a linear operation which is not only important for image processing but also\n    a central player in the field of machine learning (especially for computer vision).\n    It is used to extract features from images and other typically ~2 dimensional data.\n    Other than that it is extremely important in the field of signal processing.",
  "subjects":[],
  "statistics":{
    "runs":"10",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"1.324 seconds"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can perform a convolution operation on a 2D tensor.",
      "result":"PASS",
      "duration":"0.201 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor with shape [3, 3] and values [1, 2, 3, ..., 9].","code":["var x =","Tsr.of(type, [3, 3], [","        1, 2, 3,","        4, 5, 6,","        7, 8, 9","])"]},

        {"kind":"and","text":"A 2D kernel with shape [2, 2] and values [1, 2, 0, -1].","code":["var k =","Tsr.of(type, [2, 2], [","        1, 2,","        0, -1","])"]},

        {"kind":"and","text":"We move both tensors to a device on which we want to execute.","code":["x.to(device)","k.to(device)"]},

        {"kind":"when","text":"We perform a convolution operation on the tensor with the kernel `k`.","code":["var y = x.conv(k)"]},

        {"kind":"then","text":"The resulting tensor should have shape [2, 2] and value [0.0, 2.0, 6.0, 8.0].","code":["y.shape == [2, 2]","y.items == [0.0, 2.0, 6.0, 8.0]"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Float","class java.lang.Double","class java.lang.Float"],"device":["CPU","CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution with tensors of the same shape is equivalent to a dot product.",
      "result":"PASS",
      "duration":"0.185 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor with shape [2, 2] and values [1, 3, 6, -8].","code":["var x =","Tsr.of(Float, [2, 2], [","                1,  3,","                6, -8,","            ])"]},

        {"kind":"and","text":"A 2D kernel with shape [2, 2] and values [-2, 1, 4, 5].","code":["var k =","Tsr.of(Float, [2, 2], [","                -2, 1,","                 4, 5","            ])"]},

        {"kind":"when","text":"We perform a convolution operation on the tensor with the kernel `k`.","code":["var y = x.conv(k)"]},

        {"kind":"then","text":"The resulting tensor should have shape [1, 1] and value [-15.0].","code":["y.shape == [1, 1]","y.items == [-15.0]"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Float","class java.lang.Double","class java.lang.Float"],"device":["CPU","CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution can be performed using non-quadratic matrix tensors.",
      "result":"PASS",
      "duration":"0.191 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 2D tensor with shape [2, 3] and values [1, 3, 6, -8, 2, 4].","code":["var x =","Tsr.of(Float, [2, 3], [","                1,  3,  6,","               -8,  2,  4,","            ])"]},

        {"kind":"and","text":"A 2D kernel with shape [1, 2] and values [-2, 1].","code":["var k =","Tsr.of(Float, [1, 2], [","                -2, 1","            ])"]},

        {"kind":"when","text":"We perform a convolution operation on the tensor with the kernel `k`.","code":["var y = x.conv(k)"]},

        {"kind":"then","text":"The resulting tensor should have shape [2, 2] and value [1.0, 0.0, 18.0, 0.0].","code":["y.shape == [2, 2]","y.items == [1.0, 0.0, 18.0, 0.0]"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Float","class java.lang.Double","class java.lang.Float"],"device":["CPU","CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Convolution can be performed using tensors with an additional dimension as batch size.",
      "result":"PASS",
      "duration":"0.187 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A 3D tensor with shape [2, 2, 2] and values [1, 3, 6, -8, 2, 4, 5, 7].","code":["var x =","Tsr.of(Float, [2, 2, 2], [","                1,  3,","                6, -8,","                2,  4,","                5,  7","            ])"]},

        {"kind":"and","text":"A 2D kernel with shape [2, 2] and values [-2, 1, 4, 5].","code":["var k =","Tsr.of(Float, [1, 2, 2], [","                -2, 1,","                 4, 5","            ])"]},

        {"kind":"when","text":"We perform a convolution operation on the tensor with the kernel `k`.","code":["var y = x.conv(k)"]},

        {"kind":"then","text":"The resulting tensor should have shape [2, 1, 1] and value [-15.0, 55.0].","code":["y.shape == [2, 1, 1]","y.items == [-15.0, 55.0]"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Float","class java.lang.Double","class java.lang.Float"],"device":["CPU","CPU","GPU"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"x\" (convolution) operator produces expected results (On the CPU).",
      "result":"PASS",
      "duration":"0.125 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The 'x' operator performs convolution on the provided operands.\n            The meaning of the operands is not defined, so one the kernel tensor\n            can be the first and second operand. \n        ","\n            The 'x' operator performs convolution on the provided operands.\n            The meaning of the operands is not defined, so one the kernel tensor\n            can be the first and second operand. \n        "]
      },
      "blocks":[
        {"kind":"given","text":"Gradient auto apply for tensors in ue is set to false.","code":["Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(false)"]},

        {"kind":"and","text":"Tensor legacy view is set to true.","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)"]},

        {"kind":"and","text":"Two new 3D tensor instances with the shapes: [2x3x1] & [1x3x2].","code":["var x = Tsr.of(new int[]{2, 3, 1},","    new double[]{","        3,  2, -1,","        -2,  2,  4","    }",")",".mut.toType(type)","var y = Tsr.of(new int[]{1, 3, 2},","    new double[]{","        4, -1,","        3,  2,","        3, -1","    }",")",".mut.toType(type)"]},

        {"kind":"when","text":"The x-mul result is being instantiated by passing a simple equation to the tensor constructor.","code":["var z = Tsr.of(\"I0xi1\", x, y)"]},

        {"kind":"then","text":"The result contains the expected String.","code":["z.toString().contains(expected)"]},

        {"kind":"when","text":"The x-mul result is being instantiated by passing a object array containing equation parameters and syntax.","code":["z = Tsr.of(new Object[]{x, \"x\", y})"]},

        {"kind":"then","text":"The result contains the expected String.","code":["z.toString().contains(expected)"]},

        {"kind":"where","text":"","code":{"type":["class java.lang.Double","class java.lang.Float"],"expected":["[2x1x2]:(15.0, 2.0, 10.0, 2.0)","[2x1x2]:(15.0, 2.0, 10.0, 2.0)"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Manual convolution produces expected result.",
      "result":"PASS",
      "duration":"0.075 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(false)","Tsr a = Tsr.of([100, 100], 3d..19d)","Tsr x = a[1..-2,0..-1]","Tsr y = a[0..-3,0..-1]","Tsr z = a[2..-1,0..-1]"]},

        {"kind":"when","text":"","code":["Tsr rowconvol = x + y + z","Tsr k = rowconvol[0..-1,1..-2]","Tsr v = rowconvol[0..-1,0..-3]","Tsr j = rowconvol[0..-1,2..-1]","Tsr u = a[1..-2,1..-2]","Tsr colconvol = k + v + j - 9 * u","String xAsStr = x.toString()","String yAsStr = y.toString()","String zAsStr = z.toString()","String rcAsStr = rowconvol.toString()","String kAsStr = k.toString()","String vAsStr = v.toString()","String jAsStr = j.toString()","String uAsStr = u.toString()"]},

        {"kind":"then","text":"","code":["xAsStr.contains(\"(98x100):[18.0, 19.0, 3.0, 4.0, 5.0\")","yAsStr.contains(\"(98x100):[3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0\")","zAsStr.contains(\"(98x100):[16.0, 17.0, 18.0, 19.0, 3.0\")","rcAsStr.contains(\"(98x100):[37.0, 40.0, 26.0, 29.0, 15.0, 18.0\")","kAsStr.contains(\"(98x98):[40.0, 26.0, 29.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0\")","vAsStr.contains(\"(98x98):[37.0, 40.0, 26.0, 29.0, 15.0, 18.0, 21.0\")","jAsStr.contains(\"(98x98):[26.0, 29.0, 15.0, 18.0, 21.0, 24.0\")","uAsStr.contains(\"(98x98):[19.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \")","colconvol.toString().contains(\"(98x98):[-68.0, 68.0, 34.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -17.0, \" +","\"-34.0, -68.0, 68.0, 34.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -17.0, -34.0, \" +","\"-68.0, 68.0, 34.0, 17.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -17.0, ... + 9554 more]\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Very simple manual convolution produces expected result.",
      "result":"PASS",
      "duration":"0.136 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(false)","Tsr a = Tsr.of([4, 4], 0d..16d).to( device )","Tsr x = a[1..-2,0..-1]","Tsr y = a[0..-3,0..-1]","Tsr z = a[2..-1,0..-1]"]},

        {"kind":"when","text":"","code":["Tsr rowconvol = x + y + z","Tsr k = rowconvol[0..-1,1..-2]","Tsr v = rowconvol[0..-1,0..-3]","Tsr j = rowconvol[0..-1,2..-1]","Tsr u = a[1..-2,1..-2]","Tsr colconvol = k + v + j - 9 * u","String xAsStr = x.toString()","String yAsStr = y.toString()","String zAsStr = z.toString()","String rcAsStr = rowconvol.toString()","String kAsStr = k.toString()","String vAsStr = v.toString()","String jAsStr = j.toString()","String uAsStr = u.toString()"]},

        {"kind":"then","text":"","code":["xAsStr.contains(\"(2x4):[4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0]\")","yAsStr.contains(\"(2x4):[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]\")","zAsStr.contains(\"(2x4):[8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0]\")","rcAsStr.contains(\"(2x4):[12.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0, 33.0]\")","kAsStr.contains(\"(2x2):[15.0, 18.0, 27.0, 30.0]\")","vAsStr.contains(\"(2x2):[12.0, 15.0, 24.0, 27.0]\")","jAsStr.contains(\"(2x2):[18.0, 21.0, 30.0, 33.0]\")","uAsStr.contains(\"(2x2):[5.0, 6.0, 9.0, 10.0]\")","colconvol.toString().contains(\"(2x2):[0.0, 0.0, 0.0, 0.0]\")"]},

        {"kind":"where","text":"The following data is being used for tensor instantiation :","code":{"device":["CPU[cores=32]","OpenCLDevice[id=0x233ce941af0,platform=0x7ffb85358000]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Autograd works with simple 2D convolution.",
      "result":"PASS",
      "duration":"0.073 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The following library configuration is being used.","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Neureka.get().settings().autograd().setIsApplyingGradientWhenRequested(false)","Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(true)","Neureka.get().settings().autograd().setIsRetainingPendingErrorForJITProp(true)"]},

        {"kind":"when","text":"The following calculations are being executed...","code":["Tsr<Double> i_a = Tsr.of([2, 1], [","    1d,","    2d","])","Tsr<Double> w_a = Tsr.of([2, 2], [","        1d, 3d,","        4d, -1d","]).setRqsGradient(true)","Tsr<Double> o_a = Tsr.of(i_a, \"x\", w_a)","Tsr<Double> w_b = Tsr.of([2, 2], [","        -2d, 1d,  // 9, 1 -> -17","        2d, -1d   // ... -> 17","]).setRqsGradient(true)","Tsr o_b = Tsr.of(o_a, \"x\", w_b)","Tsr w_c = Tsr.of([2, 2], [","        0.5d, 3d,","        -2d, -0.5d","]).setRqsGradient(true)","Tsr o_c = Tsr.of(o_a, \"x\", w_c)","Tsr out = o_b * o_c"]},

        {"kind":"then","text":"The results are as expected.","code":["o_a.toString().contains(\"(9.0, 1.0)\")","out.toString().contains(\"(-127.5, -314.5)\")","o_b.toString().contains(\"(-17.0, 17.0)\")","o_c.toString().contains(\"(7.5, -18.5)\")","w_a.toString().contains(\"g:(null)\")","w_b.toString().contains(\"g:(null)\")"]},

        {"kind":"when","text":"The \"backward\" method is being called on the \"out\" tensor...","code":["out.backward(Tsr.of([2, 1], 1d))"]},

        {"kind":"then","text":"The autograd system produces the expected results.","code":["w_a.toString().contains(\"g:(null)\")","!w_b.toString().contains(\"g:(null)\")"]},

        {"kind":"when","text":"Neureka is being configured to apply tensors when host tensor is being used...","code":["Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(true)","w_a * 3","Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(false)"]},

        {"kind":"then","text":"The tensors change their states as expected.","code":["w_a.toString().contains(\"g:(null)\")","w_a.toString().contains(\"(-93.5, -30.5, -185.0, -68.0):g:(null)\")","!w_b.toString().contains(\"g:(null)\")","w_b.toString().contains(\"g:(67.5, 7.5, -166.5, -18.5)\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Sime convolution works as expected eith autograd.",
      "result":"PASS",
      "duration":"0.069 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Neureka.get().settings().view().getNDPrintSettings().setIsLegacy(true)","Neureka.get().settings().autograd().setIsApplyingGradientWhenRequested(false)","Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(true)","Neureka.get().settings().autograd().setIsRetainingPendingErrorForJITProp(true)"]},

        {"kind":"when","text":"","code":["Tsr i_a = Tsr.of([2, 1], [1d, 2d])","Tsr w_a = Tsr.of([2, 2], [1d, 3d, 4d, -1d]).setRqsGradient(true)","Tsr o_a = Tsr.of(i_a,\"x\", w_a)","Tsr w_b = Tsr.of([2, 2], [-2d, 1d, 2d, -1d]).setRqsGradient(true)","Tsr o_b = Tsr.of(o_a,\"x\", w_b)","Tsr w_c = Tsr.of([2, 2], [0.5d, 3d, -2d, -0.5d]).setRqsGradient(true)","Tsr o_c = Tsr.of(o_a, \"x\", w_c)","Tsr out = o_b*o_c"]},

        {"kind":"then","text":"","code":["o_a.toString().contains(\"(9.0, 1.0)\")","out.toString().contains(\"(-127.5, -314.5)\")","o_b.toString().contains(\"(-17.0, 17.0)\")","o_c.toString().contains(\"(7.5, -18.5)\")","w_a.toString().contains(\"g:(null)\")","w_b.toString().contains(\"g:(null)\")"]},

        {"kind":"when","text":"","code":["out.backward(Tsr.of([2, 1], 1))"]},

        {"kind":"then","text":"","code":["w_a.toString().contains(\"g:(null)\")","!w_b.toString().contains(\"g:(null)\")"]},

        {"kind":"when","text":"","code":["Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(true)","w_a * 3","Neureka.get().settings().autograd().setIsApplyingGradientWhenTensorIsUsed(false)"]},

        {"kind":"then","text":"","code":["w_a.toString().contains(\"g:(null)\")","!w_a.toString().contains(\"1.0, 3.0, 4.0, -1.0\")","!w_b.toString().contains(\"g:(null)\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Tensors have the correct layout after convolution.",
      "result":"PASS",
      "duration":"0.062 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["Tsr<Double> t0 = Tsr.of([3, 2, 1], [","        1d, 2d,","        3d, 4d,","        5d, 6d","])","Tsr<Double> x0 = Tsr.of([1, 2, 3], [","        1d, 2d, 3d,","        4d, 5d, 6d","])"]},

        {"kind":"expect","text":"","code":["t0.mut.data.ref == [1, 2, 3, 4, 5, 6] as double[]","x0.mut.data.ref == [1, 2, 3, 4, 5, 6] as double[]","t0.NDConf.layout == NDConfiguration.Layout.ROW_MAJOR","x0.NDConf.layout == NDConfiguration.Layout.ROW_MAJOR"]},

        {"kind":"when","text":"","code":["Tsr<Double> out0 = Tsr.of(\"i0xi1\", [t0, x0] )"]},

        {"kind":"then","text":"","code":["out0.toString() == \"(3x1x3):[9.0, 12.0, 15.0, 19.0, 26.0, 33.0, 29.0, 40.0, 51.0]\""]},

        {"kind":"when","text":"","code":["t0.mut.toLayout(NDConfiguration.Layout.COLUMN_MAJOR)","x0.mut.toLayout(NDConfiguration.Layout.COLUMN_MAJOR)"]},

        {"kind":"then","text":"","code":["t0.NDConf.layout == NDConfiguration.Layout.COLUMN_MAJOR","x0.NDConf.layout == NDConfiguration.Layout.COLUMN_MAJOR","t0.mut.data.ref == [1, 3, 5, 2, 4, 6] as double[]","x0.mut.data.ref == [1, 4, 2, 5, 3, 6] as double[]"]},

        {"kind":"and","text":"","code":["t0.toString() == \"(3x2x1):[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\"","x0.toString() == \"(1x2x3):[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\""]},

        {"kind":"when","text":"","code":["out0 = Tsr.of(\"i0xi1\", [t0, x0])"]},

        {"kind":"then","text":"","code":["out0.toString() == \"(3x1x3):[9.0, 12.0, 15.0, 19.0, 26.0, 33.0, 29.0, 40.0, 51.0]\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}