/*

    Content :

        1.  BUILD DEPENDENCIES
        2.  BUILD PLUGINS
        3.  UTILITY LAMBDAS FOR AUTOMATIC VERSION MIGRATION
        4.  VERSION MIGRATION
        5.  SETTING JAVA VERSION AND DEPENDENCY SRC
        6.  LOADING AND COMPILING DEPENDENCIES
        7.  CONFIGURING TEST EXECUTION
        8.  CONFIGURING TEST REPORTING
        9.  CONFIGURING MUTATION TESTING
        10. CUSTOM DEPLOYMENT TASKS
        11. JAR CREATION
        12. JDOC CREATION
        13. MAVEN DEPLOYMENT CONFIGURATION

*/
//______________________________________________________________________________________________________________________
//----------------------------------------------------------------------------------------------------------------------
// 1. BUILD DEPENDENCIES :

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2' // Used to create minified jar file of Neureka!
        //classpath 'com.guardsquare:proguard-gradle:7.0.0'
    }
}

//----------------------------------------------------------------------------------------------------------------------
// 2. BUILD PLUGINS :

plugins {
    id 'java'
    id 'groovy'
    id 'idea'

    // Test reporting :
    id 'jacoco'

    // Mutation testing : (pitest)
    id 'info.solidsoft.pitest' version '1.5.1'

    // Kotlin tests:
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'

    // Public deployment :
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}



// This gives some more freedom for comments ( special characters... ).
compileJava { options.encoding = "UTF-8" } // Allows for '"' characters in comments for example...

String PROJECT = "neureka"
String VERSION = "0.17.0"
String GROUP_ID = "com.github.gleethos"
String BASENAME = "neureka"

boolean SIGN_ON_PUBLISH = false

//----------------------------------------------------------------------------------------------------------------------
// 3. UTILITY LAMBDAS FOR AUTOMATIC VERSION MIGRATION :

def change = { c -> new Object() {
            def between = { String a, String b -> new Object() {
                    def inFile = { String p, boolean unchanged = false ->
                        File file = new File( "$rootDir" + p )
                        if ( !file.exists() ) return
                        String[] parts = file.text.split( a )
                        if ( parts.length == 1 ) println( '-=>\n'+ a )
                        assert parts.length == 2
                        String[] tails = parts[1].split( b )
                        if ( tails.length == 1 ) println( '-=>\n'+ b )
                        assert tails.length >= 2
                        b = b.replace("\\", "")
                        a = a.replace("\\", "")
                        if ( tails.length > 2 ) {
                            tails[1] = (tails as List)[1..tails.length-1].join(b)
                        }
                        if( !unchanged ) file.write( parts[0] + a + c(tails[0]) + b + tails[1] )
                    }
                }
            }
        }
    }

//----------------------------------------------------------------------------------------------------------------------
// 4. VERSION MIGRATION : SETTING VERSION IN SRC AND PRODUCTION :

task setVersionAcrossProject() {
    change({VERSION}).between( "return \"", "\"" ).inFile("/src/main/resources/library_settings.groovy")
    change({VERSION}).between( "String _VERSION = \"", "\";" ).inFile("/src/main/java/neureka/Neureka.java")
    change({VERSION}).between( "Neureka.version\\(\\)==\"", "\"//version" ).inFile("/src/test/groovy/ThoroughGroovyTests.groovy")
    change({VERSION}).between( "Neureka.version\\(\\)==\"", "\"//version" ).inFile("/src/test/groovy/ut/neureka/Neureka_Spec.groovy")

    change({VERSION}).between( "raw/master/production/lib/neureka-", "\\.jar\\)" ).inFile("/README.md")
    change({VERSION}).between( "neureka/master/production/lib/neureka-", "\\.jar\\)" ).inFile("/README.md")
    change({VERSION}).between( "<version>", "</version>").inFile("/README.md")

    File readme = new File("$rootDir/README.md")
    readme.write( readme.text.replaceAll( "implementation 'com\\.github\\.gleethos:neureka:\\d(\\.\\d+){2}(-pre)*(-alpha)*", "implementation 'com.github.gleethos:neureka:"+VERSION ) )
    readme.write( readme.text.replaceAll( "implementation\\(\"com.github\\.gleethos:neureka:\\d(\\.\\d+){2}(-pre)*(-alpha)*", "implementation(\"com.github.gleethos:neureka:"+VERSION ) )
    readme.write( readme.text.replaceAll( "implementation 'com\\.github\\.Gleethos:neureka:v\\d(\\.\\d+){2}(-pre)*(-alpha)*", "implementation 'com.github.Gleethos:neureka:v"+VERSION ) )
    readme.write( readme.text.replaceAll( "@Grab\\('com\\.github\\.Gleethos:neureka:v\\d(\\.\\d+){2}(-pre)*(-alpha)*", "@Grab\\('com\\.github\\.Gleethos:neureka:v"+VERSION ) )
}

// SETTING VERSION AND GROUP-ID FOR BUILDING :

group GROUP_ID
archivesBaseName = BASENAME
version VERSION

//----------------------------------------------------------------------------------------------------------------------
// 5. SETTING JAVA VERSION AND DEPENDENCY SRC:

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenCentral()
    //gradlePluginPortal { url "http://jcenter.bintray.com/" }
}

//----------------------------------------------------------------------------------------------------------------------
// 6. LOADING AND COMPILING DEPENDENCIES :

// Note: Visit the library gradle plugin documentation for more information about api vs implementation.
dependencies {

    // Core library dependencies :
    implementation 'org.jocl:jocl:2.0.4' //-> Internal dependency!
    implementation 'org.jetbrains:annotations:23.0.0'

    // Logging :
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'

    // Test suite : Groovy, Spock (+ sl4j, + Spock-Reports)
    //-----------------------------------------------------
    // mandatory dependencies for using Spock
    testImplementation 'org.codehaus.groovy:groovy:3.0.11'
    testImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
    testImplementation 'com.athaydes:spock-reports:2.3.0-groovy-3.0'//, { transitive = false }

    testRuntimeOnly group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.10' // allows mocking of classes (in addition to interfaces)
    testRuntimeOnly group: 'org.objenesis', name: 'objenesis', version: '3.2'      // allows mocking of classes without default constructor (together with ByteBuddy or CGLIB)

    // Kotlin tests:
    testImplementation 'org.jetbrains.kotlin:kotlin-script-runtime:1.3.31' // first the runtime so that the tests compile
    testImplementation 'org.jetbrains.kotlin:kotlin-test' // Then some test dependencies to do assertions...
    testImplementation 'org.assertj:assertj-core:3.22.0' // Same story here!
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    testImplementation 'org.slf4j:slf4j-api:1.7.36'  // LOGGING
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


//----------------------------------------------------------------------------------------------------------------------
// 7. CONFIGURING TEST EXECUTION :


test {
    //filter { includeTestsMatching "*" } // Filter for tests scenarios!

    // Spock-Reports configuration can be found in the test resources: src/test/resources/SpockConfig.Groovy

    useJUnitPlatform() // ...otherwise tests will not be received by gradle...

    // Memory :
    minHeapSize = "1g"
    maxHeapSize = "5g"

    // Number of threads used for testing :
    maxParallelForks = (int) Math.floor(1+(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)/2)
}


//----------------------------------------------------------------------------------------------------------------------
// 8. CONFIGURING TEST REPORTING :

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("docs/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}
check.dependsOn jacocoTestReport

//----------------------------------------------------------------------------------------------------------------------
// 9. CONFIGURING MUTATION TESTING :

// This take forever to complete, strong test filtering is needed!
pitest {
    junit5PluginVersion = '0.12' // This is important, otherwise pitest will not run.
    //jvmArgs = ['-Xmx1024m', '-ea']
    useClasspathFile = true     // useful with bigger projects on Windows
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    targetClasses = ["neureka*"]  // by default "${project.group}.*" //:= com.github.gleethos.*
    targetTests = ["ut.*", "it.*", "st.*"]
    pitestVersion = '1.5.1' // not needed when a default PIT version should be used
    threads = (int) Math.floor(1+(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)/2)
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}


//----------------------------------------------------------------------------------------------------------------------
// 10. CUSTOM DEPLOYMENT TASKS :

task cleanForDeployment(type: Delete) {
    delete "$rootDir/build"
    delete new File("$rootDir/docs/jdocs").listFiles()
    delete new File("$rootDir/docs/spock/reports").listFiles()
}

task deploy() {

    // Expected before : dependsOn 'cleanForDeployment'

    dependsOn 'check'
    dependsOn 'jar'
    //dependsOn 'proguard'
    dependsOn 'javadoc'
    dependsOn 'releaseJDocs'
    dependsOn 'releaseSpockReports'

    // Expected after : dependsOn 'injectSpockStyles'
}

task releaseJDocs(type: Copy) {
    from "$rootDir/build/docs/javadoc"
    into "$rootDir/docs/jdocs"
}

task releaseSpockReports(type: Copy) {
    from "$rootDir/build/spock-reports"
    into "$rootDir/docs/spock/reports"
}

task injectSpockStyles(type: Task){
    ant.replaceregexp(match:"<style>[\\s\\S]*</style>", replace:'<style>###</style>', flags:'g', byline:false) {
        fileset(dir: "$rootDir/docs/spock/reports")
    }
    ant.replaceregexp(
            match:'<style>###</style>',
            replace:'<style>' + new File("$rootDir/docs/spock/css/custom.css").text + '</style>',
            flags:'g',
            byline:false
    ) {
        fileset(dir: "$rootDir/docs/spock/reports")
    }
}

//----------------------------------------------------------------------------------------------------------------------
// 11. JAR CREATION :

jar {
    copy {
        from "$rootDir/build/libs/neureka-"+VERSION+".jar"
        into "$rootDir/production/lib"
    }
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

//----------------------------------------------------------------------------------------------------------------------
// 12. JDOC CREATION:

task createJDocs(type: Javadoc){
    destinationDir = new File("$projectDir/docs/jdocs")
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

//----------------------------------------------------------------------------------------------------------------------
// 13. MAVEN DEPLOYMENT CONFIGURATION: (! WIP !)

artifacts {
    archives javadocJar, sourcesJar
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt


signing {
    required { SIGN_ON_PUBLISH && gradle.taskGraph.hasTask("publish") }
    //Key-ID: 372447547E38B0A909776E4DD830DAE574A07986
    sign configurations.archives
    sign publishing.publications
}

nexusPublishing {
    packageGroup = GROUP_ID
    repositories { sonatype() }
    transitionCheckOptions {
        // closing checks take some time so increase the retries
        // total time is maxRetries(180) * delayBetween(10s) = 30m
        maxRetries.set(180)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = PROJECT
                description = 'A platform independent tensor library written in Java.'
                url = 'https://gleethos.github.io/'+PROJECT+'/index.html'
                organization {
                    name = 'com.github.gleethos'
                    url = 'https://github.com/Gleethos'
                }
                issueManagement {
                    system = 'Github'
                    url = 'https://github.com/Gleethos/'+PROJECT+'/issues'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = "https://raw.githubusercontent.com/Gleethos/"+PROJECT+"/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "Gleethos"
                        name = "Daniel Nepp"
                        email = "Gleethos@gmx.at"
                    }
                }
                scm {
                    url = 'https://github.com/Gleethos/'+PROJECT+''
                    connection = 'scm:git:git://github.com/Gleethos/'+PROJECT+'.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Gleethos/'+PROJECT+'.git'
                }
            }
        }
    }
}
