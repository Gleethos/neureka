/*

    Content :

        1. BUILD DEPENDENCIES
        2. BUILD PLUGINS
        3. UTILITY LAMBDAS FOR AUTOMATIC VERSION MIGRATION
        4. VERSION MIGRATION
        5. SETTING JAVA VERSION AND DEPENDENCY SRC
        6. LOADING AND COMPILING DEPENDENCIES
        7. CONFIGURING TEST EXECUTION
        8. CONFIGURING TEST REPORTING
        9. CONFIGURING MUTATION TESTING
        10. CUSTOM DEPLOYMENT TASKS
        11. JAR CREATION AND MINIFICATION
        12. CONFIGURING JDOC GENERATION
        13. MAVEN DEPLOYMENT CONFIGURATION : (! WIP ! WIP ! WIP !)

*/
//______________________________________________________________________________________________________________________
//----------------------------------------------------------------------------------------------------------------------
// 1. BUILD DEPENDENCIES :

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2' // Used to create minified jar file of Neureka!
    }
}

//----------------------------------------------------------------------------------------------------------------------
// 2. BUILD PLUGINS :

plugins {
    id 'java'
    id 'groovy'
    id 'idea'

    // Test reporting :
    id 'jacoco'

    // Mutation testing : (pitest)
    id 'info.solidsoft.pitest' version '1.5.1'

    // Public deployment :
    id 'java-library'
    id 'maven'//-publish'
    id 'signing'
}

String PROJECT = "neureka"
String VERSION = "0.3.0"
String GROUPID = "com.github.gleethos"
String BASENAME = "neureka"

//----------------------------------------------------------------------------------------------------------------------
// 3. UTILITY LAMBDAS FOR AUTOMATIC VERSION MIGRATION :

def change = { c -> new Object() {
            def between = { String a, String b -> new Object() {
                    def inFile = { String p, boolean unchanged=false ->
                        File file = new File("$rootDir" + p)
                        if(!file.exists()) return
                        String[] parts = file.text.split(a)
                        assert parts.length == 2
                        String[] tails = parts[1].split(b)
                        if( tails.length > 2 ) {
                            tails[1] = (tails as List)[1..tails.length].inject('',{s,v->s+v})
                            println(tails as List)
                        }
                        if(!unchanged) file.write(parts[0] + a.replace("\\", "") + c(tails[0]) + b.replace("\\", "") + ((tails.length>1)?tails[1]:""))
                    }
                }
            }
        }
    }

//----------------------------------------------------------------------------------------------------------------------
// 4. VERSION MIGRATION : SETTING VERSION IN SRC AND PRODUCTION :

change({VERSION}).between("production/lib/neureka-", "\\.jar\\)").inFile("/README.md")
change({VERSION}).between("implementation 'com\\.github\\.Gleethos:neureka:v", "'\r\n\\}\r\n```").inFile("/README.md")
change({VERSION}).between("return \"", "\"").inFile("/src/main/resources/library_settings.groovy")
change({VERSION}).between("assert Neureka.version\\(\\)==\"", "\"//version").inFile("/src/test/groovy/ThoroughGroovyTests.groovy")
change({VERSION}).between("Neureka.version\\(\\)==\"", "\"//version").inFile("/src/test/groovy/ut/neureka/Neureka_Unit_Tests.groovy")

// SETTING VERSION AND GROUP-ID FOR BUILDING :

group GROUPID
archivesBaseName = BASENAME
version VERSION

//----------------------------------------------------------------------------------------------------------------------
// 5. SETTING JAVA VERSION AND DEPENDENCY SRC:

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    jcenter { url "http://jcenter.bintray.com/" }
}

//----------------------------------------------------------------------------------------------------------------------
// 6. LOADING AND COMPILING DEPENDENCIES :

dependencies {
    // Library dependencies :
    api 'org.codehaus.groovy:groovy:3.0.5'
    implementation 'org.jocl:jocl:2.0.2' //-> Internal dependency!
    implementation 'org.jetbrains:annotations:16.0.2'

    // Logging :
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    //implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.29' // adds log4j backend

    // Test suite : Groovy, Spock (+ sl4j, + Spock-Reports)
    testCompile group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.5'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '2.0-M2-groovy-3.0'
    testCompile group: 'org.spockframework', name: 'spock-bom', version: '2.0-M2-groovy-3.0'
    testCompile 'com.athaydes:spock-reports:2.0-RC2', { transitive = false }
    testImplementation 'org.slf4j:slf4j-api:1.7.30'  // LOGGING
    testRuntimeClasspath 'org.slf4j:slf4j-simple:1.7.30'
    testRuntime "net.bytebuddy:byte-buddy:1.9.3" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.6"    // allows mocking of classes without default constructor (together with CGLIB)
}

//----------------------------------------------------------------------------------------------------------------------
// 7. CONFIGURING TEST EXECUTION :

test {
    //filter { includeTestsMatching "*" } // Filter for tests scenarios!

    // Spock-Reports configuration :
    //systemProperty 'com.athaydes.spockframework.report.outputDir', 'docs/spock/reports'
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true

    useJUnitPlatform() // ...otherwise tests will not be received by gradle...

    // Memory :
    minHeapSize = "1g"
    maxHeapSize = "5g"

    // Number of threads used for testing :
    maxParallelForks = (int) Math.floor(1+(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)/2)
}

//----------------------------------------------------------------------------------------------------------------------
// 8. CONFIGURING TEST REPORTING :

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("docs/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}
check.dependsOn jacocoTestReport

//----------------------------------------------------------------------------------------------------------------------
// 9. CONFIGURING MUTATION TESTING :



pitest {
    junit5PluginVersion = '0.12' // This is important, otherwise pitest will not run.
    //jvmArgs = ['-Xmx1024m', '-ea']
    useClasspathFile = true     // useful with bigger projects on Windows
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    targetClasses = ["neureka*"]  // by default "${project.group}.*" //:= com.github.gleethos.*
    targetTests = ["ut.*", "it.*", "st.*"]
    pitestVersion = '1.5.1' // not needed when a default PIT version should be used
    threads = (int) Math.floor(1+(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)/2)
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}


//----------------------------------------------------------------------------------------------------------------------
// 10. CUSTOM DEPLOYMENT TASKS :

task cleanForDeployment(type: Delete) {
    delete "$rootDir/build"
    delete new File("$rootDir/docs/jdocs").listFiles()
    delete new File("$rootDir/docs/spock/reports").listFiles()
}

task releaseJDocs(type: Copy) {
    from "$rootDir/build/docs/javadoc"
    into "$rootDir/docs/jdocs"
}

task releaseSpockReports(type: Copy) {
    from "$rootDir/build/spock-reports"
    into "$rootDir/docs/spock/reports"
}

task injectSpockStyles(type: Task){
    ant.replaceregexp(match:"<style>[\\s\\S]*</style>", replace:'<style>###</style>', flags:'g', byline:false) {
        fileset(dir: "$rootDir/docs/spock/reports")
    }
    ant.replaceregexp(
            match:'<style>###</style>',
            replace:'<style>' + new File("$rootDir/docs/spock/css/custom.css").text + '</style>',
            flags:'g',
            byline:false
    ) {
        fileset(dir: "$rootDir/docs/spock/reports")
    }
}

task deploy() {

    // Expected before : dependsOn 'cleanForDeployment'

    dependsOn 'check'
    dependsOn 'jar'
    dependsOn 'proguard'
    dependsOn 'javadoc'
    dependsOn 'releaseJDocs'
    dependsOn 'releaseSpockReports'

    // Expected after : dependsOn 'injectSpockStyles'
}

//----------------------------------------------------------------------------------------------------------------------
// 11. JAR CREATION AND MINIFICATION :


jar {
    //destinationDirectory = file("$rootDir/build/libs")
    copy {
        from "$rootDir/build/libs/neureka-"+VERSION+".jar"
        into "$rootDir/production/lib"
    }
}


task ('proguard', type: proguard.gradle.ProGuardTask) {
    verbose
    //allowaccessmodification
    injars  'build/libs/'+PROJECT+'-'+VERSION+'.jar'
    outjars 'production/min-lib/'+PROJECT+'-min-'+VERSION+'.jar'
    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {// Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {// As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }

    // Save the obfuscation mapping to a file, so we can de-obfuscate any stack traces later on.
    printmapping 'production/min-lib/'+PROJECT+'-min-'+VERSION+'.map'
    keepparameternames
    renamesourcefileattribute 'SourceFile'
    keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod'
    keepattributes '*Annotation*' // Preserve all annotations.

    // Preserve all public classes, and their public and protected fields and methods.
    keep 'public class * { \
        public protected *; \
    }'

    // Preserve all .class method names.
    keepclassmembernames 'class * { \
        java.lang.Class class$(java.lang.String); \
        java.lang.Class class$(java.lang.String, boolean); \
    }'

    // Preserve all native method names and the names of their classes.
    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration classes.
    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // We could comment this out if neureka library doesn't use serialization.
    // If the code contains serializable classes that have to be backward
    // compatible -> refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Note: library may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:

    // keep 'public class com.example.MyClass'
    // keep 'public interface com.example.MyInterface'
    // keep 'public class * implements com.example.MyInterface'

    keep 'class org.jocl.** { *; }'
    keep 'interface org.jocl.** { *; }'
    keep 'class org.jetbrains.** { *; }'
    keep 'interface org.jetbrains.** { *; }'
    keep 'class groovy.lang.** { *; }'
    keep 'interface groovy.lang.** { *; }'

    //keep 'class java.lang.** { *; }'
    //dontwarn 'java.**'
    dontwarn 'org.jocl.**'
    dontwarn 'org.codehaus.**'
    dontwarn 'groovy.lang.**'
    dontwarn 'org.jetbrains.**'
}

//----------------------------------------------------------------------------------------------------------------------
// 12. CONFIGURING JDOC GENERATION:

task createJDocs(type: Javadoc){
    destinationDir = new File("$projectDir/docs/jdocs")
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

//----------------------------------------------------------------------------------------------------------------------
// 13. MAVEN DEPLOYMENT CONFIGURATION: (! WIP !)

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

signing {
    //372447547E38B0A909776E4DD830DAE574A07986
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword'))
            {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name 'Example Application'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A platform independent tensor library written in Java.'
                url 'https://gleethos.github.io/'+PROJECT+'/index.html'

                resolveStrategy = Closure.DELEGATE_FIRST
                name PROJECT
                description = "A platform independent tensor library written in Java."
                url "https://gleethos.github.io/"+PROJECT+"/index.html"
                organization {
                    name 'com.github.gleethos'
                    url 'https://github.com/Gleethos'
                }
                issueManagement {
                    system 'Github'
                    url 'https://github.com/Gleethos/'+PROJECT+'/issues'
                }
                licenses {
                    license {
                        name "MIT License"
                        url "https://raw.githubusercontent.com/Gleethos/"+PROJECT+"/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id "Gleethos"
                        name "Daniel Nepp"
                        email "Gleethos@gmx.at"
                    }
                }

                scm {
                    url 'https://github.com/Gleethos/'+PROJECT+''
                    connection 'scm:git:git://github.com/Gleethos/'+PROJECT+'.git'
                    developerConnection 'scm:git:ssh://git@github.com:Gleethos/'+PROJECT+'.git'
                }
            }
        }
    }
}



