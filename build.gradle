
buildscript {
    repositories {
        jcenter()
        //flatDir dirs: '/libs/proguard6.2.2/lib'
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
        //classpath ':proguard:'
    }
}

//-----------------------------------------------------------------

plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'groovy'
    id 'maven-publish'
}

group 'org.gleethos'
version '1.0.0'

//-----------------------------------------------------------------

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    jcenter { url "http://jcenter.bintray.com/" }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'org.gleethos.neureka'
            artifactId 'neureka'
            version '1.0.0'
            from components.java
        }
    }
}

//-----------------------------------------------------------------

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.jetbrains:annotations:16.0.2'
    compile group: 'org.jocl', name: 'jocl', version: '2.0.2'
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-rc-3'
}

//-----------------------------------------------------------------

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("docs/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}
check.dependsOn jacocoTestReport

//-----------------------------------------------------------------
jar {
    //destinationDirectory = file("$rootDir/build/libs")
    //from configurations.compile.collect{ zipTree it }
    //destinationDirectory = file("$rootDir/production")
    //from configurations.compile.collect{ zipTree it }
    copy {
        from "$rootDir/build/libs/neureka-"+version+".jar"
        into "$rootDir/production"
    }
}
//-----------------------------------------------------------------
test {
    //filter { includeTestsMatching "*" }
    minHeapSize = "1g"
    maxHeapSize = "5g"
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
//-----------------------------------------------------------------

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) platform = 'win'
else if (currentOS.isLinux()) platform = 'linux'
else if (currentOS.isMacOsX()) platform = 'mac'

task ('proguard', type: proguard.gradle.ProGuardTask) {

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    verbose

    //allowaccessmodification

    // Specify the input jars, output jars, and library jars.
    // In this case, the input jar is the program library that we want to process.

    //libraryjars files(configurations.compile.collect())

    injars  'build/libs/neureka-'+version+'.jar'
    outjars 'production/min/neureka-min-'+version+'.jar'

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    // Save the obfuscation mapping to a file, so we can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping 'production/min/neureka-min-'+version+'.map'
    keepparameternames
    renamesourcefileattribute 'SourceFile'
    keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod'

    // Preserve all annotations.
    keepattributes '*Annotation*'

    // Preserve all public classes, and their public and protected fields and
    // methods.

    keep 'public class * { \
        public protected *; \
    }'

    keep 'class org.jocl.** { *; }'
    keep 'interface org.jocl.** { *; }'
    keep 'class org.jetbrains.** { *; }'
    keep 'interface org.jetbrains.** { *; }'
    keep 'class groovy.lang.** { *; }'
    keep 'interface groovy.lang.** { *; }'

    dontwarn 'org.jocl.**'
    dontwarn 'org.codehaus.**'
    dontwarn 'groovy.lang.**'
    dontwarn 'org.jetbrains.**'

    // Preserve all .class method names.

    keepclassmembernames 'class * { \
        java.lang.Class class$(java.lang.String); \
        java.lang.Class class$(java.lang.String, boolean); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your library doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Your library may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:

    // keep 'public class com.example.MyClass'
    // keep 'public interface com.example.MyInterface'
    // keep 'public class * implements com.example.MyInterface'
}


task deploy() {
    dependsOn 'assemble'
    dependsOn 'jar'
    dependsOn 'proguard'
}
