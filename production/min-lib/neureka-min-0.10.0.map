neureka.Neureka -> neureka.Neureka:
    java.lang.ThreadLocal _INSTANCES -> a
    org.slf4j.Logger _LOG -> b
    java.lang.String _VERSION -> c
    boolean _OPENCL_AVAILABLE -> d
    neureka.Neureka$Settings _settings -> e
    neureka.Neureka$Utility _utility -> f
    neureka.backend.api.BackendContext _backend -> g
    boolean $assertionsDisabled -> h
    104:130:neureka.backend.api.BackendContext backend() -> backend
    133:136:void <init>() -> <init>
    147:155:neureka.Neureka get() -> get
    169:170:void set(neureka.Neureka) -> set
    173:175:neureka.Neureka configure(java.lang.Object) -> configure
    181:181:boolean canAccessOpenCL() -> canAccessOpenCL
    186:186:neureka.Neureka$Settings settings() -> settings
    189:190:neureka.Neureka$Settings settings(java.lang.Object) -> settings
    196:196:neureka.Neureka$Utility utility() -> utility
    201:201:java.lang.String version() -> version
    210:220:void reset() -> reset
    225:225:java.lang.String toString() -> toString
    232:232:neureka.backend.api.BackendContext getBackend() -> getBackend
    234:234:void setBackend(neureka.backend.api.BackendContext) -> setBackend
    69:69:boolean access$100(neureka.Neureka) -> a
    1222:1222:boolean _currentThreadIsNotAuthorized():222:222 -> a
    1222:1222:boolean access$100(neureka.Neureka):69 -> a
    69:69:org.slf4j.Logger access$200() -> a
    69:88:void <clinit>() -> <clinit>
neureka.Neureka$Settings -> neureka.Neureka$Settings:
    neureka.Neureka$Settings$Debug _debug -> b
    neureka.Neureka$Settings$AutoGrad _autograd -> c
    neureka.Neureka$Settings$Indexing _indexing -> d
    neureka.Neureka$Settings$View _view -> e
    neureka.Neureka$Settings$NDim _ndim -> f
    neureka.Neureka$Settings$DType _dtype -> g
    boolean _isLocked -> h
    neureka.Neureka this$0 -> a
    248:257:void <init>(neureka.Neureka) -> <init>
    270:270:neureka.Neureka$Settings$Debug debug() -> debug
    273:274:neureka.Neureka$Settings$Debug debug(java.lang.Object) -> debug
    277:277:neureka.Neureka$Settings$AutoGrad autograd() -> autograd
    280:281:neureka.Neureka$Settings$AutoGrad autograd(java.lang.Object) -> autograd
    284:284:neureka.Neureka$Settings$Indexing indexing() -> indexing
    287:288:neureka.Neureka$Settings$Indexing indexing(java.lang.Object) -> indexing
    291:291:neureka.Neureka$Settings$View view() -> view
    294:295:neureka.Neureka$Settings$View view(java.lang.Object) -> view
    298:298:neureka.Neureka$Settings$NDim ndim() -> ndim
    301:302:neureka.Neureka$Settings$NDim ndim(java.lang.Object) -> ndim
    305:305:neureka.Neureka$Settings$DType dtype() -> dtype
    308:309:neureka.Neureka$Settings$DType dtype(java.lang.Object) -> dtype
    317:317:boolean isLocked() -> isLocked
    325:325:void setIsLocked(boolean) -> setIsLocked
    328:335:java.lang.String toString() -> toString
    239:239:void <init>(neureka.Neureka,byte) -> <init>
    239:239:boolean access$300(neureka.Neureka$Settings) -> a
    1260:1267:boolean notModifiable():260:267 -> a
    1260:1267:boolean access$300(neureka.Neureka$Settings):239 -> a
    239:239:boolean access$400(neureka.Neureka$Settings) -> b
neureka.Neureka$Settings$AutoGrad -> neureka.Neureka$Settings$AutoGrad:
    boolean _isPreventingInlineOperations -> a
    boolean _isRetainingPendingErrorForJITProp -> b
    boolean _isApplyingGradientWhenTensorIsUsed -> c
    boolean _isApplyingGradientWhenRequested -> d
    neureka.Neureka$Settings this$1 -> e
    389:394:void <init>(neureka.Neureka$Settings) -> <init>
    401:401:boolean isPreventingInlineOperations() -> isPreventingInlineOperations
    409:411:void setIsPreventingInlineOperations(boolean) -> setIsPreventingInlineOperations
    423:423:boolean isRetainingPendingErrorForJITProp() -> isRetainingPendingErrorForJITProp
    436:438:void setIsRetainingPendingErrorForJITProp(boolean) -> setIsRetainingPendingErrorForJITProp
    445:445:boolean isApplyingGradientWhenTensorIsUsed() -> isApplyingGradientWhenTensorIsUsed
    453:455:void setIsApplyingGradientWhenTensorIsUsed(boolean) -> setIsApplyingGradientWhenTensorIsUsed
    477:477:boolean isApplyingGradientWhenRequested() -> isApplyingGradientWhenRequested
    488:490:void setIsApplyingGradientWhenRequested(boolean) -> setIsApplyingGradientWhenRequested
    493:497:java.lang.String toString() -> toString
neureka.Neureka$Settings$DType -> neureka.Neureka$Settings$DType:
    java.lang.Class _defaultDataTypeClass -> a
    boolean _isAutoConvertingExternalDataToJVMTypes -> b
    neureka.Neureka$Settings this$1 -> c
    568:572:void <init>(neureka.Neureka$Settings) -> <init>
    574:574:java.lang.Class getDefaultDataTypeClass() -> getDefaultDataTypeClass
    577:579:void setDefaultDataTypeClass(java.lang.Class) -> setDefaultDataTypeClass
    581:581:boolean getIsAutoConvertingExternalDataToJVMTypes() -> getIsAutoConvertingExternalDataToJVMTypes
    584:586:void setIsAutoConvertingExternalDataToJVMTypes(boolean) -> setIsAutoConvertingExternalDataToJVMTypes
    589:590:java.lang.String toString() -> toString
neureka.Neureka$Settings$Debug -> neureka.Neureka$Settings$Debug:
    boolean _isKeepingDerivativeTargetPayloads -> a
    neureka.Neureka$Settings this$1 -> b
    340:342:void <init>(neureka.Neureka$Settings) -> <init>
    359:359:boolean isKeepingDerivativeTargetPayloads() -> isKeepingDerivativeTargetPayloads
    377:379:void setIsKeepingDerivativeTargetPayloads(boolean) -> setIsKeepingDerivativeTargetPayloads
    382:383:java.lang.String toString() -> toString
neureka.Neureka$Settings$Indexing -> neureka.Neureka$Settings$Indexing:
    boolean _isUsingArrayBasedIndexing -> a
    neureka.Neureka$Settings this$1 -> b
    503:505:void <init>(neureka.Neureka$Settings) -> <init>
    507:507:boolean isUsingArrayBasedIndexing() -> isUsingArrayBasedIndexing
    510:512:void setIsUsingArrayBasedIndexing(boolean) -> setIsUsingArrayBasedIndexing
    515:516:java.lang.String toString() -> toString
neureka.Neureka$Settings$NDim -> neureka.Neureka$Settings$NDim:
    boolean _isOnlyUsingDefaultNDConfiguration -> a
    neureka.Neureka$Settings this$1 -> b
    544:551:void <init>(neureka.Neureka$Settings) -> <init>
    553:553:boolean isOnlyUsingDefaultNDConfiguration() -> isOnlyUsingDefaultNDConfiguration
    556:558:void setIsOnlyUsingDefaultNDConfiguration(boolean) -> setIsOnlyUsingDefaultNDConfiguration
    561:562:java.lang.String toString() -> toString
neureka.Neureka$Settings$View -> neureka.Neureka$Settings$View:
    neureka.view.TsrStringSettings _settings -> a
    526:528:void <init>(neureka.Neureka$Settings) -> <init>
    530:530:void tensors(java.lang.Object) -> tensors
    532:532:neureka.view.TsrStringSettings getTensorSettings() -> getTensorSettings
    534:534:void tensors(java.util.function.Consumer) -> tensors
    537:538:java.lang.String toString() -> toString
    527:527:java.lang.Boolean lambda$new$0(neureka.Neureka$Settings) -> a
neureka.Neureka$Utility -> neureka.Neureka$Utility:
    598:598:void <init>() -> <init>
    609:621:java.lang.String readResource(java.lang.String) -> readResource
    632:648:boolean isPresent(java.lang.String) -> isPresent
neureka.Tsr -> neureka.Tsr:
    neureka.devices.Device _CPU -> a
    int _flags -> b
    int _version -> c
    boolean $assertionsDisabled -> d
    209:209:neureka.Tsr newInstance() -> newInstance
    162:220:void <init>() -> <init>
    229:229:neureka.Tsr of(java.lang.Object[]) -> of
    233:305:neureka.Tsr _of(java.lang.Object[]) -> a
    325:325:neureka.Tsr of(java.util.List,java.lang.Object) -> of
    338:340:neureka.Tsr of(java.util.List,java.lang.String) -> of
    353:357:neureka.Tsr of(java.util.List,java.util.List) -> of
    372:375:neureka.Tsr of(int[],java.util.List) -> of
    389:410:neureka.Tsr of(java.util.List) -> of
    419:419:neureka.Tsr ofShape(java.util.List) -> ofShape
    428:429:neureka.Tsr ofShape(java.lang.Number[]) -> ofShape
    162:437:void <init>(java.util.List) -> <init>
    454:454:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice of(java.lang.Class) -> of
    465:465:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice ofDoubles() -> ofDoubles
    476:476:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice ofFloats() -> ofFloats
    487:487:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice ofInts() -> ofInts
    498:498:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice ofShorts() -> ofShorts
    509:509:neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice ofBytes() -> ofBytes
    515:515:neureka.Tsr of(double) -> of
    162:517:void <init>(double) -> <init>
    525:525:neureka.Tsr of(float[]) -> of
    162:527:void <init>(float[]) -> <init>
    535:535:neureka.Tsr of(double[]) -> of
    162:537:void <init>(double[]) -> <init>
    545:545:neureka.Tsr of(byte[]) -> of
    162:547:void <init>(byte[]) -> <init>
    555:555:neureka.Tsr of(int[]) -> of
    162:557:void <init>(int[],int[]) -> <init>
    565:565:neureka.Tsr of(long[]) -> of
    162:567:void <init>(int[],long[]) -> <init>
    575:575:neureka.Tsr of(short[]) -> of
    162:577:void <init>(int[],short[]) -> <init>
    579:579:neureka.Tsr of(java.lang.Class,int[],java.lang.String) -> of
    587:587:neureka.Tsr of(boolean[]) -> of
    162:589:void <init>(int[],boolean[]) -> <init>
    162:597:void <init>(java.lang.Class,int[],java.lang.String) -> <init>
    599:599:neureka.Tsr ofShape(int[]) -> ofShape
    162:601:void <init>(int[]) -> <init>
    603:603:neureka.Tsr of(int[],double) -> of
    162:605:void <init>(int[],double) -> <init>
    607:607:neureka.Tsr of(int[],double[]) -> of
    162:609:void <init>(int[],double[]) -> <init>
    611:611:neureka.Tsr of(neureka.dtype.DataType,int[]) -> of
    162:618:void <init>(int[],neureka.dtype.DataType) -> <init>
    620:620:neureka.Tsr of(java.lang.Class,int[],java.lang.Object) -> of
    622:622:neureka.Tsr of(java.lang.Class,java.util.List,java.lang.Object) -> of
    162:629:void <init>(int[],java.lang.Class,java.lang.Object) -> <init>
    632:634:neureka.Tsr of(java.lang.Class,java.util.List,java.util.List) -> of
    652:652:neureka.Tsr of(neureka.dtype.DataType,int[],java.lang.Object) -> of
    162:654:void <init>(int[],neureka.dtype.DataType,java.lang.Object) -> <init>
    657:660:neureka.Tsr of(neureka.dtype.DataType,java.util.List,java.util.List) -> of
    668:669:void _constructAndAllocate(int[],boolean) -> a
    672:678:int[] _intArray(java.lang.Object[]) -> b
    703:705:neureka.Tsr of(neureka.dtype.DataType,java.util.List,neureka.ndim.Initializer) -> of
    726:726:neureka.Tsr of(neureka.dtype.DataType,int[],neureka.ndim.Initializer) -> of
    162:740:void <init>(int[],neureka.dtype.DataType,neureka.ndim.Initializer) -> <init>
    3750:3753:void _constructFromInitializer(int[],neureka.dtype.DataType,neureka.ndim.Initializer):750:753 -> <init>
    3750:3753:void <init>(int[],neureka.dtype.DataType,neureka.ndim.Initializer):739 -> <init>
    782:792:neureka.Tsr of(java.lang.String,java.util.List) -> of
    816:816:neureka.Tsr of(java.lang.String,neureka.Tsr) -> of
    837:837:neureka.Tsr of(java.lang.String,neureka.Tsr[]) -> of
    865:865:neureka.Tsr of(java.lang.String,boolean,neureka.Tsr[]) -> of
    890:891:neureka.Tsr _constructFunctional(neureka.Tsr,neureka.Tsr[],java.lang.String,boolean) -> a
    918:920:neureka.Tsr setRqsGradient(boolean) -> setRqsGradient
    932:932:boolean rqsGradient() -> rqsGradient
    935:939:void _setRqsGradient(boolean) -> _setRqsGradient
    959:1001:neureka.Tsr setIsOutsourced(boolean) -> setIsOutsourced
    1010:1010:boolean isOutsourced() -> isOutsourced
    1013:1017:void _setIsOutsourced(boolean) -> _setIsOutsourced
    1043:1089:neureka.Tsr setIsVirtual(boolean) -> setIsVirtual
    1105:1105:boolean isVirtual() -> isVirtual
    1115:1119:void _setIsVirtual(boolean) -> _setIsVirtual
    1144:1156:neureka.Tsr setGradientApplyRequested(boolean) -> setGradientApplyRequested
    1174:1174:boolean gradientApplyRequested() -> gradientApplyRequested
    1191:1191:boolean isDeleted() -> isDeleted
    1206:1220:neureka.Tsr delete() -> delete
    1246:1246:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    1266:1287:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
    1303:1318:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    1328:1328:neureka.Tsr to(neureka.devices.Device) -> to
    1347:1347:boolean isEmpty() -> isEmpty
    1356:1356:boolean isUndefined() -> isUndefined
    1365:1366:boolean isSlice() -> isSlice
    1378:1379:int sliceCount() -> sliceCount
    1389:1390:boolean isSliceParent() -> isSliceParent
    1403:1403:boolean belongsToGraph() -> belongsToGraph
    1415:1415:boolean isLeave() -> isLeave
    1427:1427:boolean isBranch() -> isBranch
    1435:1435:boolean hasGradient() -> hasGradient
    1446:1446:neureka.Tsr getGradient() -> getGradient
    1452:1453:neureka.devices.Device getDevice() -> getDevice
    1459:1459:neureka.autograd.GraphNode getGraphNode() -> getGraphNode
    1464:1464:neureka.framing.NDFrame frame() -> frame
    1490:1502:neureka.Tsr incrementVersionBecauseOf(neureka.backend.api.ExecutionCall) -> incrementVersionBecauseOf
    1526:1536:neureka.Tsr _become(neureka.Tsr) -> _become
    1556:1557:java.util.Iterator iterator() -> iterator
    1599:1607:neureka.Tsr backward(neureka.Tsr) -> backward
    1626:1627:neureka.Tsr backward(double) -> backward
    1645:1646:neureka.Tsr backward() -> backward
    1661:1683:void applyGradient() -> applyGradient
    1694:1694:neureka.Tsr detach() -> detach
    1722:1723:neureka.Tsr label(java.lang.String[][]) -> label
    1747:1748:neureka.Tsr label(java.lang.String,java.lang.String[][]) -> label
    1760:1775:void _label(java.lang.String,java.lang.String[][]) -> a
    1795:1797:neureka.Tsr label(java.util.List) -> label
    1819:1821:neureka.Tsr label(java.lang.String,java.util.List) -> label
    1842:1843:neureka.Tsr label(java.util.Map) -> label
    1848:1849:neureka.Tsr label(java.lang.String,java.util.Map) -> label
    1881:1881:neureka.Tsr plus(neureka.Tsr) -> plus
    1885:1885:neureka.Tsr plusAssign(neureka.Tsr) -> plusAssign
    1898:1898:neureka.Tsr plus(double) -> plus
    1917:1917:neureka.Tsr minus(neureka.Tsr) -> minus
    1921:1924:neureka.Tsr minus(java.lang.Object) -> minus
    1929:1929:neureka.Tsr minusAssign(neureka.Tsr) -> minusAssign
    1933:1933:neureka.Tsr negative() -> negative
    1954:1954:neureka.Tsr multiply(neureka.Tsr) -> multiply
    1958:1961:neureka.Tsr multiply(java.lang.Object) -> multiply
    1982:1982:neureka.Tsr times(neureka.Tsr) -> times
    1984:1984:neureka.Tsr times(java.lang.Object) -> times
    1987:1987:neureka.Tsr timesAssign(neureka.Tsr) -> timesAssign
    1990:1990:neureka.Tsr multiply(double) -> multiply
    2009:2009:neureka.Tsr div(neureka.Tsr) -> div
    2013:2013:neureka.Tsr div(double) -> div
    2017:2017:neureka.Tsr divAssign(neureka.Tsr) -> divAssign
    2037:2037:neureka.Tsr mod(neureka.Tsr) -> mod
    2041:2041:neureka.Tsr mod(int) -> mod
    2045:2045:neureka.Tsr rem(int) -> rem
    2049:2049:neureka.Tsr modAssign(neureka.Tsr) -> modAssign
    2069:2069:neureka.Tsr power(neureka.Tsr) -> power
    2073:2073:neureka.Tsr power(double) -> power
    2080:2080:neureka.Tsr xor(neureka.Tsr) -> xor
    2084:2084:neureka.Tsr xor(double) -> xor
    2101:2104:neureka.Tsr T() -> T
    2116:2120:neureka.Tsr mean() -> mean
    2131:2145:neureka.Tsr convDot(neureka.Tsr) -> convDot
    2158:2160:neureka.Tsr dot(neureka.Tsr) -> dot
    2172:2178:neureka.Tsr matMul(neureka.Tsr) -> matMul
    2191:2191:neureka.Tsr dimtrim() -> dimtrim
    2203:2207:boolean isCase(neureka.Tsr) -> isCase
    2219:2219:boolean contains(neureka.Tsr) -> contains
    2241:2241:java.lang.Object getAt(int[]) -> getAt
    2252:2253:neureka.Tsr getAt(java.lang.Object[]) -> getAt
    2264:2264:neureka.Tsr getAt(int) -> getAt
    2273:2273:java.lang.Object getValueAt(int) -> getValueAt
    2285:2285:java.lang.Object getValueAt(int[]) -> getValueAt
    2299:2300:neureka.Tsr setAt(int,java.lang.Object) -> setAt
    2304:2304:neureka.Tsr getAt(double) -> getAt
    2308:2308:neureka.Tsr getAt(java.math.BigDecimal) -> getAt
    2313:2315:neureka.Tsr getAt(java.util.Map) -> getAt
    2324:2331:neureka.Tsr shallowCopy() -> shallowCopy
    2336:2343:neureka.Tsr clone() -> clone
    2356:2391:neureka.Tsr getAt(java.lang.Object) -> getAt
    2411:2411:neureka.fluent.slicing.SliceBuilder slice() -> slice
    2427:2505:neureka.Tsr _sliceOf(int[],int[],int[]) -> a
    2526:2528:neureka.Tsr putAt(java.util.List,neureka.Tsr) -> putAt
    2542:2544:neureka.Tsr putAt(java.util.Map,neureka.Tsr) -> putAt
    2548:2553:void _putAtCheckFor(neureka.Tsr) -> a
    2557:2576:neureka.Tsr _putAt(neureka.Tsr,neureka.Tsr) -> a
    2588:2603:java.lang.Object getDataAt(int) -> getDataAt
    2615:2617:neureka.Tsr setDataAt(int,java.lang.Object) -> setDataAt
    2630:2633:neureka.Tsr setValueAt(int,java.lang.Object) -> setValueAt
    2637:2646:void _setDataAt(int,java.lang.Object) -> a
    2690:2725:neureka.Tsr setValue(java.lang.Object) -> setValue
    4667:4676:void _setValue32(float[]):2667:2676 -> setValue
    4667:4676:neureka.Tsr setValue(java.lang.Object):2690 -> setValue
    5652:5661:void _setValue64(double[]):2652:2661 -> setValue
    5652:5661:neureka.Tsr setValue(java.lang.Object):2691 -> setValue
    2729:2737:java.lang.Object getValue() -> getValue
    2751:2760:neureka.Tsr mapTo(java.lang.Class,java.util.function.Function) -> mapTo
    2834:2850:neureka.Tsr addToGradient(neureka.Tsr) -> addToGradient
    2873:2883:neureka.Tsr asType(java.lang.Class) -> asType
    2909:2920:neureka.Tsr toType(java.lang.Class) -> toType
    2924:2931:java.lang.Object getValueAs(java.lang.Class) -> getValueAs
    5942:5956:double[] _value64():2942:2956 -> getValueAs
    5942:5956:java.lang.Object getValueAs(java.lang.Class):2924 -> getValueAs
    5960:5970:float[] _value32():2960:2970 -> getValueAs
    5960:5970:java.lang.Object getValueAs(java.lang.Class):2925 -> getValueAs
    2935:2938:java.lang.Object getDataAs(java.lang.Class) -> getDataAs
    2976:2976:java.lang.String toString(java.lang.String) -> toString
    2980:2980:java.lang.String toString(neureka.view.TsrStringSettings) -> toString
    2984:2986:java.lang.String toString(java.util.function.Consumer) -> toString
    2992:2992:java.lang.String _toString(java.lang.String) -> _toString
    2998:2999:java.lang.String toString() -> toString
    3002:3002:int getVersion() -> getVersion
    3013:3015:neureka.fluent.building.states.IterByOrIterFromOrAll like(neureka.Tsr) -> like
    3019:3022:neureka.Tsr ofRandom(java.lang.Class,int[]) -> ofRandom
    144:144:java.lang.Object setValueAt(int,java.lang.Object) -> setValueAt
    144:144:java.lang.Object setDataAt(int,java.lang.Object) -> setDataAt
    144:144:java.lang.Object setIsVirtual(boolean) -> setIsVirtual
    144:144:java.lang.Object clone() -> clone
    2919:2919:void lambda$toType$36(java.lang.Class,neureka.Tsr) -> a
    2844:2849:void lambda$addToGradient$35(neureka.Tsr,neureka.devices.Device) -> a
    2838:2839:void lambda$addToGradient$34(neureka.Tsr,neureka.Tsr) -> b
    2761:2821:neureka.Tsr lambda$mapTo$33(java.lang.Class,java.util.function.Function) -> a
    2815:2815:java.lang.Object lambda$mapTo$32(java.util.function.Function,byte[],java.lang.Integer) -> a
    2812:2812:java.lang.Object lambda$mapTo$31(java.util.function.Function,short[],java.lang.Integer) -> a
    2809:2809:java.lang.Object lambda$mapTo$30(java.util.function.Function,float[],java.lang.Integer) -> a
    2806:2806:java.lang.Object lambda$mapTo$29(java.util.function.Function,double[],java.lang.Integer) -> a
    2803:2803:java.lang.Object lambda$mapTo$28(java.util.function.Function,int[],java.lang.Integer) -> a
    2787:2787:java.lang.Number lambda$mapTo$27(java.util.function.Function,byte[],java.lang.Integer) -> b
    2784:2784:java.lang.Number lambda$mapTo$26(java.util.function.Function,short[],java.lang.Integer) -> b
    2781:2781:java.lang.Number lambda$mapTo$25(java.util.function.Function,float[],java.lang.Integer) -> b
    2778:2778:java.lang.Number lambda$mapTo$24(java.util.function.Function,double[],java.lang.Integer) -> b
    2775:2775:java.lang.Number lambda$mapTo$23(java.util.function.Function,int[],java.lang.Integer) -> b
    2204:2204:void lambda$isCase$22(neureka.Tsr,boolean[],neureka.framing.Relation) -> a
    2205:2206:void lambda$isCase$21(neureka.Tsr,boolean[],java.lang.Object) -> a
    1669:1681:void lambda$applyGradient$20(neureka.Tsr) -> b
    1604:1604:void lambda$backward$19(neureka.Tsr,neureka.autograd.GraphNode) -> a
    1213:1213:void lambda$delete$18(neureka.devices.Device) -> a
    1207:1212:void lambda$delete$17(neureka.autograd.GraphNode) -> a
    1068:1070:void lambda$setIsVirtual$16(neureka.Tsr) -> c
    967:995:void lambda$setIsOutsourced$15(neureka.devices.Device) -> b
    979:979:void lambda$setIsOutsourced$14(neureka.Tsr) -> d
    983:993:void lambda$setIsOutsourced$13(neureka.Tsr,neureka.devices.Device) -> b
    792:792:neureka.Tsr[] lambda$of$12(int) -> a
    792:792:neureka.Tsr lambda$of$11(java.lang.Object) -> a
    785:785:neureka.Tsr[] lambda$of$10(int) -> b
    782:782:boolean lambda$of$9(java.lang.Object) -> b
    705:705:int lambda$of$8(java.lang.Integer) -> a
    659:659:int lambda$of$7(java.lang.Integer) -> b
    634:634:int lambda$of$6(java.lang.Integer) -> c
    622:622:int lambda$of$5(java.lang.Integer) -> d
    436:436:java.util.List lambda$new$4(java.lang.Object) -> c
    409:409:int lambda$of$3(java.lang.Integer) -> e
    405:405:java.lang.Object lambda$of$2(java.lang.Object) -> d
    391:392:boolean lambda$of$1(java.lang.Object) -> e
    392:392:boolean lambda$of$0(java.lang.Object) -> f
    144:149:void <clinit>() -> <clinit>
neureka.Tsr$1 -> neureka.Tsr$1:
    int _count -> a
    int _size -> b
    neureka.ndim.iterators.NDIterator val$_ndi -> c
    neureka.Tsr this$0 -> d
    1558:1560:void <init>(neureka.Tsr,neureka.ndim.iterators.NDIterator) -> <init>
    1563:1563:boolean hasNext() -> hasNext
    1567:1570:java.lang.Object next() -> next
neureka.Tsr$IO -> neureka.Tsr$IO:
    3032:3032:void <init>() -> <init>
    3035:3037:double getFrom(neureka.Tsr,int) -> getFrom
    3041:3042:double getFrom(neureka.Tsr,int[]) -> getFrom
    3046:3048:void setInto(neureka.Tsr,int,double) -> setInto
    3051:3053:void setInto(neureka.Tsr,int[],double) -> setInto
    3056:3058:void addInto(neureka.Tsr,int,double) -> addInto
    3061:3063:void addInto(neureka.Tsr,int[],double) -> addInto
    3066:3070:neureka.Tsr addInto(neureka.Tsr,neureka.Tsr) -> addInto
    3075:3077:void subInto(neureka.Tsr,int,double) -> subInto
    3080:3082:void subInto(neureka.Tsr,int[],double) -> subInto
    3085:3097:void subInto(neureka.Tsr,neureka.Tsr) -> subInto
    3100:3102:void mulInto(neureka.Tsr,int,double) -> mulInto
    3105:3107:void mulInto(neureka.Tsr,int[],double) -> mulInto
neureka.autograd.ADAgent -> neureka.autograd.ADAgent:
    56:56:neureka.autograd.DefaultADAgent of(neureka.Tsr) -> of
    neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    neureka.Tsr derivative() -> derivative
    boolean hasForward() -> hasForward
    boolean hasBackward() -> hasBackward
    java.lang.String toString() -> toString
neureka.autograd.DefaultADAgent -> neureka.autograd.DefaultADAgent:
    neureka.autograd.DefaultADAgent$ADAction _forward -> a
    neureka.autograd.DefaultADAgent$ADAction _backward -> b
    37:37:neureka.autograd.DefaultADAgent ofDerivative(neureka.Tsr) -> ofDerivative
    43:53:void <init>(neureka.Tsr) -> <init>
    56:56:neureka.autograd.DefaultADAgent setForward(neureka.autograd.DefaultADAgent$ADAction) -> setForward
    58:58:neureka.autograd.DefaultADAgent setBackward(neureka.autograd.DefaultADAgent$ADAction) -> setBackward
    67:68:neureka.autograd.DefaultADAgent withArgs(java.util.List) -> withArgs
    72:72:neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    75:75:neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    79:80:neureka.Tsr derivative() -> derivative
    84:84:boolean hasForward() -> hasForward
    87:87:boolean hasBackward() -> hasBackward
    103:106:java.lang.String toString() -> toString
    105:105:java.lang.String lambda$toString$2(neureka.calculus.args.Arg) -> a
    48:48:neureka.Tsr lambda$new$1(neureka.autograd.GraphNode,neureka.Tsr) -> a
    43:43:neureka.Tsr lambda$new$0(neureka.autograd.GraphNode,neureka.Tsr) -> b
neureka.autograd.DefaultADAgent$ADAction -> neureka.autograd.DefaultADAgent$ADAction:
    neureka.Tsr execute(neureka.autograd.GraphNode,neureka.Tsr) -> execute
neureka.autograd.GraphLock -> neureka.autograd.GraphLock:
    neureka.calculus.Function _owner -> a
    boolean _isLocked -> b
    22:28:void <init>(neureka.calculus.Function) -> <init>
    34:34:void release() -> release
    41:41:java.lang.String toString() -> toString
    48:48:boolean isLocked() -> isLocked
neureka.autograd.GraphNode -> neureka.autograd.GraphNode:
    org.slf4j.Logger _LOG -> a
    int _mode -> b
    boolean _allows_forward -> c
    boolean _allows_backward -> d
    boolean _reliesOnJustInTimeProp -> e
    neureka.autograd.PendingError _pendingError -> f
    boolean _isUsedAsDerivative -> g
    neureka.calculus.Function _function -> h
    neureka.autograd.GraphNode[] _parents -> i
    java.lang.ref.WeakReference _payload -> j
    int _payloadReferenceVersion -> k
    java.util.TreeMap _targetsToAgents -> l
    neureka.autograd.GraphLock _lock -> m
    java.util.List _children -> n
    long _nodeID -> o
    boolean $assertionsDisabled -> p
    132:258:void <init>(neureka.calculus.Function,java.lang.Object,java.util.function.Supplier) -> <init>
    270:387:void _construct(neureka.Tsr,neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.autograd.GraphLock) -> a
    404:425:int _modeOf(neureka.backend.api.ExecutionCall) -> a
    436:452:void _migrateAndOrApplyError(neureka.Tsr,java.util.function.Consumer) -> a
    460:460:boolean usesAD() -> usesAD
    467:467:boolean usesForwardAD() -> usesForwardAD
    474:474:boolean usesReverseAD() -> usesReverseAD
    483:483:boolean isCacheable() -> isCacheable
    489:490:void obtainLocking(neureka.autograd.GraphLock) -> obtainLocking
    497:497:boolean isLeave() -> isLeave
    500:504:boolean isGraphLeave() -> isGraphLeave
    510:510:boolean isVirtual() -> isVirtual
    516:519:void _attachChild(neureka.autograd.GraphNode) -> a
    530:530:neureka.Tsr getPayload() -> getPayload
    537:554:void _setPayload(neureka.Tsr) -> a
    558:560:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    571:573:neureka.autograd.PendingError getAndRemovePendingError() -> getAndRemovePendingError
    586:602:void backward(neureka.Tsr) -> backward
    620:641:void _backward(neureka.Tsr,java.util.Set,boolean) -> a
    653:661:void _carryPendingBackPropToGradients(java.util.Set) -> a
    677:679:void backwardJIT(neureka.Tsr) -> backwardJIT
    682:707:void _backwardJIT(neureka.Tsr,neureka.autograd.GraphNode) -> a
    719:723:void _deleteDerivativesRecursively() -> a
    731:740:int _numberOfReverseModeADChildren() -> b
    749:758:void put(neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> put
    767:768:java.util.List get(neureka.autograd.GraphNode) -> get
    779:780:boolean has(neureka.autograd.GraphNode) -> has
    789:789:int size() -> size
    795:799:void forEachDerivative(java.util.function.BiConsumer) -> forEachDerivative
    805:809:void forEachBackward(neureka.Tsr,java.util.function.BiConsumer) -> forEachBackward
    815:817:void forEachTarget(java.util.function.Consumer) -> forEachTarget
    823:831:void forEachTargetAgentPair(java.util.function.BiConsumer) -> forEachTargetAgentPair
    837:837:boolean hasDerivatives() -> hasDerivatives
    867:867:int getMode() -> getMode
    881:881:boolean isReliesOnJustInTimeProp() -> isReliesOnJustInTimeProp
    883:883:neureka.autograd.PendingError getPendingError() -> getPendingError
    885:885:boolean isUsedAsDerivative() -> isUsedAsDerivative
    887:887:neureka.calculus.Function getFunction() -> getFunction
    889:889:neureka.autograd.GraphNode[] getParents() -> getParents
    891:891:int getPayloadReferenceVersion() -> getPayloadReferenceVersion
    893:893:neureka.autograd.GraphLock getLock() -> getLock
    895:895:java.util.List getChildren() -> getChildren
    900:900:long getNodeID() -> getNodeID
    906:911:java.lang.String type() -> type
    915:915:java.lang.String toString() -> toString
    922:964:java.lang.String toString(java.lang.String) -> toString
    994:1007:java.lang.String _toString(java.lang.String,boolean,java.lang.String) -> a
    965:978:void lambda$toString$17(neureka.view.TsrStringSettings) -> a
    942:955:void lambda$toString$16(neureka.view.TsrStringSettings) -> b
    925:925:java.lang.String lambda$toString$15(neureka.Tsr) -> b
    827:827:void lambda$forEachTargetAgentPair$14(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> a
    828:828:void lambda$forEachTargetAgentPair$13(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    816:816:void lambda$forEachTarget$12(java.util.function.Consumer,neureka.autograd.GraphNode,java.util.List) -> a
    807:808:void lambda$forEachBackward$11(java.util.function.BiConsumer,neureka.Tsr,neureka.autograd.GraphNode,java.util.List) -> a
    797:797:void lambda$forEachDerivative$10(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> b
    797:797:void lambda$forEachDerivative$9(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> b
    749:749:int lambda$put$8(neureka.autograd.GraphNode,neureka.autograd.GraphNode) -> a
    704:704:void lambda$_backwardJIT$7(neureka.autograd.GraphNode,neureka.autograd.GraphNode,neureka.Tsr) -> a
    684:689:void lambda$_backwardJIT$6(neureka.autograd.GraphNode,neureka.Tsr) -> a
    654:654:void lambda$_carryPendingBackPropToGradients$5(java.util.Set,neureka.autograd.GraphNode) -> a
    638:638:void lambda$_backward$4(java.util.Set,neureka.autograd.GraphNode,neureka.Tsr) -> a
    592:599:void lambda$backward$3(neureka.autograd.GraphNode) -> b
    589:589:void lambda$backward$2(java.util.Set,neureka.autograd.GraphNode) -> b
    542:552:void lambda$_setPayload$1() -> c
    341:360:void lambda$_construct$0(neureka.Tsr,neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    74:76:void <clinit>() -> <clinit>
neureka.autograd.JITProp -> neureka.autograd.JITProp:
    java.util.Set _finished -> a
    java.util.Set _pending -> b
    16:20:void <init>(java.util.Set) -> <init>
    27:30:void addPending(java.util.Set) -> addPending
    37:46:void noteFinished(neureka.autograd.GraphNode) -> noteFinished
    49:49:int finishedCount() -> finishedCount
    53:53:int pendingCount() -> pendingCount
    66:76:void execute() -> execute
    82:82:boolean isDone() -> isDone
    90:92:java.lang.String toString() -> toString
    98:99:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    68:73:void lambda$execute$0(neureka.autograd.GraphNode) -> a
neureka.autograd.PendingError -> neureka.autograd.PendingError:
    int _toBeReceived -> a
    neureka.Tsr _accumulatedError -> b
    12:15:void <init>(neureka.Tsr,int) -> <init>
    18:22:void accumulate(neureka.Tsr) -> accumulate
    25:25:boolean isFullyAccumulated() -> isFullyAccumulated
    29:29:java.lang.String toString() -> toString
    33:33:int getToBeReceived() -> getToBeReceived
    37:37:neureka.Tsr getAccumulatedError() -> getAccumulatedError
neureka.backend.api.Algorithm -> neureka.backend.api.Algorithm:
    69:69:neureka.backend.standard.algorithms.FunAlgorithm withName(java.lang.String) -> withName
    java.lang.String getName() -> getName
    neureka.backend.api.Algorithm setImplementationFor(java.lang.Class,neureka.backend.api.ImplementationFor) -> setImplementationFor
    neureka.backend.api.ImplementationFor getImplementationFor(java.lang.Class) -> getImplementationFor
    122:122:neureka.backend.api.ImplementationFor getImplementationFor(neureka.devices.Device) -> getImplementationFor
neureka.backend.api.BackendContext -> neureka.backend.api.BackendContext:
    org.slf4j.Logger log -> a
    neureka.backend.api.Extensions extensions -> b
    java.util.Map _lookup -> c
    java.util.List _operations -> d
    int _size -> e
    neureka.calculus.FunctionCache _functionCache -> f
    neureka.calculus.Functions _getAutogradFunction -> g
    neureka.calculus.Functions _getFunction -> h
    boolean $assertionsDisabled -> i
    80:80:neureka.backend.api.BackendContext$Runner runner() -> runner
    91:91:java.util.Map getOperationLookupMap() -> getOperationLookupMap
    102:102:java.util.List getOperations() -> getOperations
    107:107:int size() -> size
    112:112:neureka.calculus.FunctionCache getFunctionCache() -> getFunctionCache
    121:122:neureka.calculus.Functions getFunction() -> getFunction
    132:133:neureka.calculus.Functions getAutogradFunction() -> getAutogradFunction
    41:145:void <init>() -> <init>
    156:177:neureka.backend.api.BackendContext addOperation(neureka.backend.api.Operation) -> addOperation
    185:185:boolean hasOperation(neureka.backend.api.Operation) -> hasOperation
    193:193:boolean hasOperation(java.lang.String) -> hasOperation
    204:204:neureka.backend.api.Operation getOperation(int) -> getOperation
    214:214:neureka.backend.api.Operation getOperation(java.lang.String) -> getOperation
    225:229:neureka.backend.api.BackendContext clone() -> clone
    233:233:java.lang.String toString() -> toString
    240:240:boolean has(java.lang.Class) -> has
    248:248:neureka.backend.api.BackendExtension get(java.lang.Class) -> get
    255:255:java.util.List getExtensions() -> getExtensions
    263:264:neureka.backend.api.BackendContext set(neureka.backend.api.BackendExtension) -> set
    37:37:java.lang.Object clone() -> clone
    37:37:org.slf4j.Logger access$100() -> a
    37:39:void <clinit>() -> <clinit>
neureka.backend.api.BackendContext$Runner -> neureka.backend.api.BackendContext$Runner:
    neureka.backend.api.BackendContext originalContext -> a
    neureka.backend.api.BackendContext visitedContext -> b
    285:289:void <init>(neureka.backend.api.BackendContext,neureka.backend.api.BackendContext) -> <init>
    301:304:neureka.backend.api.BackendContext$Runner run(java.lang.Runnable) -> run
    321:324:java.lang.Object runAndGet(java.util.function.Supplier) -> runAndGet
    343:343:java.lang.Object call(java.util.function.Supplier) -> call
    362:362:java.lang.Object invoke(java.util.function.Supplier) -> invoke
    280:280:void <init>(neureka.backend.api.BackendContext,neureka.backend.api.BackendContext,byte) -> <init>
neureka.backend.api.BackendExtension -> neureka.backend.api.BackendExtension:
    neureka.backend.api.BackendExtension$DeviceOption find(java.lang.String) -> find
    void dispose() -> dispose
neureka.backend.api.BackendExtension$DeviceOption -> neureka.backend.api.BackendExtension$DeviceOption:
    neureka.devices.Device _device -> a
    double _confidence -> b
    42:45:void <init>(neureka.devices.Device,double) -> <init>
    50:50:neureka.devices.Device device() -> device
    55:55:double confidence() -> confidence
neureka.backend.api.Call -> neureka.backend.api.Call:
    neureka.Tsr[] _tensors -> _tensors
    java.lang.Object _device -> _device
    neureka.calculus.args.Args _arguments -> _arguments
    24:24:neureka.backend.api.Call$Builder to(neureka.devices.Device) -> to
    39:46:void <init>(neureka.Tsr[],java.lang.Object,java.util.List) -> <init>
    48:48:java.lang.Object getDevice() -> getDevice
    53:53:neureka.Tsr[] getTensors() -> getTensors
    56:61:void mutateTensors(int[]) -> mutateTensors
    65:65:neureka.devices.Device getDeviceFor(java.lang.Class) -> getDeviceFor
    69:69:java.util.List allMetaArgs() -> allMetaArgs
    73:73:neureka.calculus.args.Arg get(java.lang.Class) -> get
    77:77:java.lang.Object getValOf(java.lang.Class) -> getValOf
    81:81:int getDerivativeIndex() -> getDerivativeIndex
    85:102:neureka.Tsr getTsrOfType(java.lang.Class,int) -> getTsrOfType
    105:105:neureka.backend.api.Call$Validator validate() -> validate
    69:69:neureka.calculus.args.Arg lambda$allMetaArgs$0(neureka.calculus.args.Arg) -> a
neureka.backend.api.Call$Builder -> neureka.backend.api.Call$Builder:
    neureka.devices.Device _device -> a
    neureka.Tsr[] _tensors -> b
    neureka.calculus.args.Args _arguments -> c
    111:113:void <init>(neureka.devices.Device) -> <init>
    117:118:neureka.backend.api.Call$Builder with(neureka.Tsr[]) -> with
    122:123:neureka.backend.api.Call$Builder andArgs(java.util.List) -> andArgs
    127:127:neureka.backend.api.Call$Builder andArgs(neureka.calculus.args.Arg[]) -> andArgs
    131:131:neureka.backend.api.Call get() -> get
    107:107:void <init>(neureka.devices.Device,byte) -> <init>
neureka.backend.api.Call$DeviceCondition -> neureka.backend.api.Call$DeviceCondition:
    boolean check(neureka.devices.Device) -> check
neureka.backend.api.Call$OperationCondition -> neureka.backend.api.Call$OperationCondition:
    boolean check(neureka.backend.api.Operation) -> check
neureka.backend.api.Call$TensorCompare -> neureka.backend.api.Call$TensorCompare:
    boolean check(neureka.Tsr,neureka.Tsr) -> check
neureka.backend.api.Call$TensorCondition -> neureka.backend.api.Call$TensorCondition:
    boolean check(neureka.Tsr) -> check
neureka.backend.api.Call$TensorsCondition -> neureka.backend.api.Call$TensorsCondition:
    boolean check(neureka.Tsr[]) -> check
neureka.backend.api.Call$Validator -> neureka.backend.api.Call$Validator:
    boolean _isValid -> a
    neureka.backend.api.Call this$0 -> b
    144:146:void <init>(neureka.backend.api.Call) -> <init>
    149:149:boolean isValid() -> isValid
    161:161:float basicSuitability() -> basicSuitability
    165:165:float suitabilityIfValid(float) -> suitabilityIfValid
    168:168:neureka.backend.api.Call$Validator$Estimator getEstimator() -> getEstimator
    171:172:neureka.backend.api.Call$Validator first(neureka.backend.api.Call$TensorCondition) -> first
    176:177:neureka.backend.api.Call$Validator last(neureka.backend.api.Call$TensorCondition) -> last
    181:182:neureka.backend.api.Call$Validator tensors(neureka.backend.api.Call$TensorsCondition) -> tensors
    187:188:neureka.backend.api.Call$Validator any(neureka.backend.api.Call$TensorCondition) -> any
    193:195:boolean _anyMatch(neureka.backend.api.Call$TensorCondition) -> a
    200:201:neureka.backend.api.Call$Validator anyNotNull(neureka.backend.api.Call$TensorCondition) -> anyNotNull
    1206:1209:boolean _anyNotNullMatch(neureka.backend.api.Call$TensorCondition):206:209 -> anyNotNull
    1206:1209:neureka.backend.api.Call$Validator anyNotNull(neureka.backend.api.Call$TensorCondition):200 -> anyNotNull
    214:215:neureka.backend.api.Call$Validator all(neureka.backend.api.Call$TensorCondition) -> all
    219:221:boolean _allMatch(neureka.backend.api.Call$TensorCondition) -> b
    226:227:neureka.backend.api.Call$Validator allNotNull(neureka.backend.api.Call$TensorCondition) -> allNotNull
    1232:1235:boolean _allNotNullMatch(neureka.backend.api.Call$TensorCondition):232:235 -> allNotNull
    1232:1235:neureka.backend.api.Call$Validator allNotNull(neureka.backend.api.Call$TensorCondition):226 -> allNotNull
    240:241:neureka.backend.api.Call$Validator all(neureka.backend.api.Call$TensorCompare) -> all
    245:251:boolean _allMatch(neureka.backend.api.Call$TensorCompare) -> a
    144:144:boolean access$100(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCondition) -> a
    144:144:boolean access$200(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCondition) -> b
    144:144:boolean access$300(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCompare) -> a
neureka.backend.api.Call$Validator$Estimator -> neureka.backend.api.Call$Validator$Estimator:
    float _estimation -> a
    neureka.backend.api.Call$Validator this$1 -> b
    258:260:void <init>(neureka.backend.api.Call$Validator,boolean) -> <init>
    263:266:void _mod(float) -> a
    268:268:neureka.backend.api.Call$Validator$Estimator goodIfAll(neureka.backend.api.Call$TensorCondition) -> goodIfAll
    270:270:neureka.backend.api.Call$Validator$Estimator badIfAll(neureka.backend.api.Call$TensorCondition) -> badIfAll
    272:272:neureka.backend.api.Call$Validator$Estimator goodIfAnyNonNull(neureka.backend.api.Call$TensorCondition) -> goodIfAnyNonNull
    274:274:neureka.backend.api.Call$Validator$Estimator goodIfAny(neureka.backend.api.Call$TensorCondition) -> goodIfAny
    276:276:neureka.backend.api.Call$Validator$Estimator badIfAnyNonNull(neureka.backend.api.Call$TensorCondition) -> badIfAnyNonNull
    278:278:neureka.backend.api.Call$Validator$Estimator badIfAny(neureka.backend.api.Call$TensorCondition) -> badIfAny
    280:280:neureka.backend.api.Call$Validator$Estimator goodIfAll(neureka.backend.api.Call$TensorCompare) -> goodIfAll
    282:282:neureka.backend.api.Call$Validator$Estimator badIfAll(neureka.backend.api.Call$TensorCompare) -> badIfAll
    284:284:float getEstimation() -> getEstimation
    276:276:boolean lambda$badIfAnyNonNull$1(neureka.backend.api.Call$TensorCondition,neureka.Tsr) -> a
    272:272:boolean lambda$goodIfAnyNonNull$0(neureka.backend.api.Call$TensorCondition,neureka.Tsr) -> b
neureka.backend.api.ExecutionCall -> neureka.backend.api.ExecutionCall:
    org.slf4j.Logger _LOG -> a
    neureka.backend.api.Operation _operation -> b
    neureka.backend.api.Algorithm _algorithm -> c
    boolean $assertionsDisabled -> d
    83:106:void <init>(neureka.devices.Device,neureka.backend.api.Operation,neureka.Tsr[],neureka.backend.api.Algorithm,java.util.List) -> <init>
    109:109:neureka.backend.api.ExecutionCall$Builder of(neureka.Tsr[]) -> of
    121:121:neureka.backend.api.ExecutionCall setMetaArg(neureka.calculus.args.Arg) -> setMetaArg
    124:135:java.lang.String toString() -> toString
    139:139:neureka.backend.api.Operation getOperation() -> getOperation
    141:141:int getJ() -> getJ
    144:148:neureka.backend.api.ExecutionCall withTensors(neureka.Tsr[]) -> withTensors
    153:154:neureka.backend.api.ExecutionCall forDeviceType(java.lang.Class) -> forDeviceType
    168:175:neureka.backend.api.Algorithm getAlgorithm() -> getAlgorithm
    185:188:boolean allowsForward() -> allowsForward
    198:201:boolean allowsBackward() -> allowsBackward
    209:214:neureka.autograd.ADAgent getADAgentFrom(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> getADAgentFrom
    65:65:void <init>(neureka.devices.Device,neureka.backend.api.Operation,neureka.Tsr[],neureka.backend.api.Algorithm,java.util.List,byte) -> <init>
    65:67:void <clinit>() -> <clinit>
neureka.backend.api.ExecutionCall$Builder -> neureka.backend.api.ExecutionCall$Builder:
    neureka.backend.api.Operation _operation -> a
    neureka.Tsr[] _tensors -> b
    neureka.backend.api.Algorithm _algorithm -> c
    java.util.List _arguments -> d
    222:228:void <init>(neureka.Tsr[]) -> <init>
    231:231:neureka.backend.api.ExecutionCall on(neureka.devices.Device) -> on
    241:242:neureka.backend.api.ExecutionCall$Builder running(neureka.backend.api.Operation) -> running
    246:247:neureka.backend.api.ExecutionCall$Builder algorithm(neureka.backend.api.Algorithm) -> algorithm
    251:252:neureka.backend.api.ExecutionCall$Builder andArgs(java.util.List) -> andArgs
    256:256:neureka.backend.api.ExecutionCall$Builder andArgs(neureka.calculus.args.Arg[]) -> andArgs
    217:217:void <init>(neureka.Tsr[],byte) -> <init>
neureka.backend.api.Extensions -> neureka.backend.api.Extensions:
    9:9:void <init>() -> <init>
    13:13:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    18:18:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
neureka.backend.api.ImplementationFor -> neureka.backend.api.ImplementationFor:
    void run(neureka.backend.api.ExecutionCall) -> run
    72:73:neureka.Tsr runAndGetFirstTensor(neureka.backend.api.ExecutionCall) -> runAndGetFirstTensor
neureka.backend.api.Operation -> neureka.backend.api.Operation:
    65:65:neureka.backend.api.operations.OperationBuilder builder() -> builder
    neureka.backend.api.Algorithm[] getAllAlgorithms() -> getAllAlgorithms
    neureka.backend.api.Algorithm getAlgorithmFor(neureka.backend.api.ExecutionCall) -> getAlgorithmFor
    java.lang.String getFunction() -> getFunction
    neureka.backend.api.Operation setAlgorithm(java.lang.Class,neureka.backend.api.Algorithm) -> setAlgorithm
    130:130:neureka.backend.api.Operation setAlgorithm(neureka.backend.api.Algorithm) -> setAlgorithm
    neureka.backend.api.Algorithm getAlgorithm(java.lang.Class) -> getAlgorithm
    boolean supportsAlgorithm(java.lang.Class) -> supportsAlgorithm
    java.lang.String stringify(java.lang.String[]) -> stringify
    java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    java.lang.String getOperator() -> getOperator
    int getArity() -> getArity
    boolean isOperator() -> isOperator
    boolean isIndexer() -> isIndexer
    boolean isDifferentiable() -> isDifferentiable
    boolean isInline() -> isInline
    boolean supports(java.lang.Class) -> supports
    double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.api.Operation$DefaultOperatorCreator -> neureka.backend.api.Operation$DefaultOperatorCreator:
    java.lang.Object create(neureka.Tsr[],int) -> create
neureka.backend.api.Operation$PrimaryNDAConsumer -> neureka.backend.api.Operation$PrimaryNDAConsumer:
    double execute(int[]) -> execute
neureka.backend.api.Operation$PrimaryNDIConsumer -> neureka.backend.api.Operation$PrimaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$ScalarOperatorCreator -> neureka.backend.api.Operation$ScalarOperatorCreator:
    java.lang.Object create(neureka.Tsr[],double,int) -> create
neureka.backend.api.Operation$SecondaryNDAConsumer -> neureka.backend.api.Operation$SecondaryNDAConsumer:
    double execute(int[],int[]) -> execute
neureka.backend.api.Operation$SecondaryNDIConsumer -> neureka.backend.api.Operation$SecondaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$TertiaryNDAConsumer -> neureka.backend.api.Operation$TertiaryNDAConsumer:
    double execute(int[],int[],int[]) -> execute
neureka.backend.api.Operation$TertiaryNDIConsumer -> neureka.backend.api.Operation$TertiaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$Utility -> neureka.backend.api.Operation$Utility:
    263:263:void <init>() -> <init>
    266:272:neureka.Tsr[] subset(neureka.Tsr[],int,int,int) -> subset
    276:278:neureka.Tsr[] without(neureka.Tsr[],int) -> without
    282:294:neureka.Tsr[] offsetted(neureka.Tsr[],int) -> offsetted
neureka.backend.api.algorithms.AbstractBaseAlgorithm -> neureka.backend.api.algorithms.AbstractBaseAlgorithm:
    java.lang.String _name -> a
    java.util.Map _implementations -> _implementations
    27:29:void <init>(java.lang.String) -> <init>
    39:39:java.lang.String getName() -> getName
    43:47:neureka.backend.api.Algorithm setImplementationFor(java.lang.Class,neureka.backend.api.ImplementationFor) -> setImplementationFor
    52:58:neureka.backend.api.ImplementationFor getImplementationFor(java.lang.Class) -> getImplementationFor
    63:65:java.lang.String toString() -> toString
neureka.backend.api.algorithms.AbstractFunctionalAlgorithm -> neureka.backend.api.algorithms.AbstractFunctionalAlgorithm:
    org.slf4j.Logger _LOG -> a
    neureka.backend.api.algorithms.fun.SuitabilityPredicate _isSuitableFor -> b
    neureka.backend.api.algorithms.fun.ForwardADPredicate _canPerformForwardADFor -> c
    neureka.backend.api.algorithms.fun.BackwardADPredicate _canPerformBackwardADFor -> d
    neureka.backend.api.algorithms.fun.ADAgentSupplier _supplyADAgentFor -> e
    neureka.backend.api.algorithms.fun.ExecutionDispatcher _handleInsteadOfDevice -> f
    neureka.backend.api.algorithms.fun.ExecutionPreparation _instantiateNewTensorsForExecutionIn -> g
    boolean _isFullyBuilt -> h
    55:58:void <init>(java.lang.String) -> <init>
    68:69:float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
    79:80:boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
    90:91:boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
    106:107:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    132:133:neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
    142:143:neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
    149:163:neureka.backend.api.Algorithm buildFunAlgorithm() -> buildFunAlgorithm
    167:173:void _checkReadiness() -> a
    186:196:java.lang.Object _checked(java.lang.Object,java.lang.Object,java.lang.Class) -> a
    208:209:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setIsSuitableFor(neureka.backend.api.algorithms.fun.SuitabilityPredicate) -> setIsSuitableFor
    220:221:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCanPerformForwardADFor(neureka.backend.api.algorithms.fun.ForwardADPredicate) -> setCanPerformForwardADFor
    231:232:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCanPerformBackwardADFor(neureka.backend.api.algorithms.fun.BackwardADPredicate) -> setCanPerformBackwardADFor
    242:243:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setSupplyADAgentFor(neureka.backend.api.algorithms.fun.ADAgentSupplier) -> setSupplyADAgentFor
    264:265:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setExecutionDispatcher(neureka.backend.api.algorithms.fun.ExecutionDispatcher) -> setExecutionDispatcher
    281:282:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCallPreparation(neureka.backend.api.algorithms.fun.ExecutionPreparation) -> setCallPreparation
    39:39:void <clinit>() -> <clinit>
neureka.backend.api.algorithms.FallbackAlgorithm -> neureka.backend.api.algorithms.FallbackAlgorithm:
    org.slf4j.Logger _LOG -> a
    32:95:void <init>(java.lang.String,int,neureka.backend.api.Operation) -> <init>
    99:107:float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
    111:111:boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
    114:114:boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
    119:129:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    134:134:neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
    140:154:neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
    190:198:java.lang.Object _tryExecute(java.lang.reflect.Method,java.lang.Object[],int) -> a
    204:229:java.lang.reflect.Method _findMethod(java.lang.String,java.lang.Class) -> a
    178:185:void lambda$_tryExecute$9(neureka.backend.api.ExecutionCall,java.lang.reflect.Method,int,int) -> a
    129:129:neureka.Tsr lambda$supplyADAgentFor$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    128:128:neureka.Tsr lambda$supplyADAgentFor$7(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    124:124:neureka.Tsr lambda$supplyADAgentFor$6(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    123:123:neureka.Tsr lambda$supplyADAgentFor$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    39:92:void lambda$new$4(neureka.backend.api.Operation,neureka.backend.api.ExecutionCall) -> a
    1158:1187:void _tryExecute(neureka.backend.api.ExecutionCall,java.lang.Class):158:187 -> a
    1158:1187:void lambda$new$4(neureka.backend.api.Operation,neureka.backend.api.ExecutionCall):91 -> a
    80:87:void lambda$new$3(neureka.backend.api.ExecutionCall,int,int) -> a
    64:70:void lambda$new$2(double[],neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,int) -> a
    53:53:java.lang.Class lambda$new$1(neureka.Tsr) -> a
    49:49:boolean lambda$new$0(neureka.Tsr) -> b
    28:28:void <clinit>() -> <clinit>
neureka.backend.api.algorithms.fun.ADAgentSupplier -> neureka.backend.api.algorithms.fun.ADAgentSupplier:
    neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
neureka.backend.api.algorithms.fun.BackwardADPredicate -> neureka.backend.api.algorithms.fun.BackwardADPredicate:
    boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
neureka.backend.api.algorithms.fun.ExecutionDispatcher -> neureka.backend.api.algorithms.fun.ExecutionDispatcher:
    neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
neureka.backend.api.algorithms.fun.ExecutionPreparation -> neureka.backend.api.algorithms.fun.ExecutionPreparation:
    neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
neureka.backend.api.algorithms.fun.ForwardADPredicate -> neureka.backend.api.algorithms.fun.ForwardADPredicate:
    boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
neureka.backend.api.algorithms.fun.SuitabilityPredicate -> neureka.backend.api.algorithms.fun.SuitabilityPredicate:
    float PERFECT -> PERFECT
    float EXCELLENT -> EXCELLENT
    float VERY_GOOD -> VERY_GOOD
    float GOOD -> GOOD
    float OKAY -> OKAY
    float NOT_GOOD -> NOT_GOOD
    float BAD -> BAD
    float TERRIBLE -> TERRIBLE
    float UNSUITABLE -> UNSUITABLE
    float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
neureka.backend.api.implementations.AbstractImplementationFor -> neureka.backend.api.implementations.AbstractImplementationFor:
    neureka.backend.api.ImplementationFor _lambda -> a
    9:15:void <init>(neureka.backend.api.ImplementationFor,int) -> <init>
    21:22:void run(neureka.backend.api.ExecutionCall) -> run
neureka.backend.api.operations.AbstractOperation -> neureka.backend.api.operations.AbstractOperation:
    org.slf4j.Logger _LOG -> a
    java.lang.String _function -> _function
    java.lang.String _operator -> _operator
    int _arity -> _arity
    boolean _isIndexer -> _isIndexer
    boolean _isDifferentiable -> _isDifferentiable
    boolean _isInline -> _isInline
    boolean _isOperator -> _isOperator
    java.util.Map _algorithms -> b
    neureka.backend.api.Algorithm _defaultAlgorithm -> c
    82:112:void <init>(neureka.backend.api.operations.OperationBuilder) -> <init>
    118:118:neureka.backend.api.Algorithm[] getAllAlgorithms() -> getAllAlgorithms
    135:145:neureka.backend.api.Algorithm getAlgorithm(java.lang.Class) -> getAlgorithm
    158:158:boolean supportsAlgorithm(java.lang.Class) -> supportsAlgorithm
    174:175:neureka.backend.api.Operation setAlgorithm(java.lang.Class,neureka.backend.api.Algorithm) -> setAlgorithm
    182:207:neureka.backend.api.Algorithm getAlgorithmFor(neureka.backend.api.ExecutionCall) -> getAlgorithmFor
    214:214:boolean supports(java.lang.Class) -> supports
    219:219:boolean isOperator() -> isOperator
    224:224:java.lang.String getFunction() -> getFunction
    229:229:java.lang.String getOperator() -> getOperator
    234:234:int getArity() -> getArity
    239:239:boolean isIndexer() -> isIndexer
    244:244:boolean isDifferentiable() -> isDifferentiable
    249:249:boolean isInline() -> isInline
    253:253:neureka.backend.api.Algorithm getDefaultAlgorithm() -> getDefaultAlgorithm
    258:260:java.lang.String toString() -> toString
    140:140:neureka.backend.api.Algorithm lambda$getAlgorithm$1(java.util.Map$Entry) -> a
    139:139:boolean lambda$getAlgorithm$0(java.lang.Class,java.util.Map$Entry) -> a
    26:26:void <clinit>() -> <clinit>
neureka.backend.api.operations.OperationBuilder -> neureka.backend.api.operations.OperationBuilder:
    neureka.backend.api.operations.OperationBuilder$Stringifier _stringifier -> a
    neureka.backend.api.operations.OperationBuilder$Derivator _derivator -> b
    java.lang.String _function -> c
    java.lang.String _operator -> d
    java.lang.Integer _arity -> e
    java.lang.Boolean _isOperator -> f
    java.lang.Boolean _isIndexer -> g
    java.lang.Boolean _isDifferentiable -> h
    java.lang.Boolean _isInline -> i
    boolean _disposed -> j
    17:55:void <init>() -> <init>
    67:67:neureka.backend.api.operations.OperationBuilder$Stringifier getStringifier() -> getStringifier
    69:69:neureka.backend.api.operations.OperationBuilder$Derivator getDerivator() -> getDerivator
    71:71:java.lang.String getFunction() -> getFunction
    73:73:java.lang.String getOperator() -> getOperator
    75:75:java.lang.Integer getArity() -> getArity
    77:77:java.lang.Boolean getIsOperator() -> getIsOperator
    79:79:java.lang.Boolean getIsIndexer() -> getIsIndexer
    81:81:java.lang.Boolean getIsDifferentiable() -> getIsDifferentiable
    83:83:java.lang.Boolean getIsInline() -> getIsInline
    86:87:neureka.backend.api.operations.OperationBuilder setStringifier(neureka.backend.api.operations.OperationBuilder$Stringifier) -> setStringifier
    91:92:neureka.backend.api.operations.OperationBuilder setDerivator(neureka.backend.api.operations.OperationBuilder$Derivator) -> setDerivator
    96:97:neureka.backend.api.operations.OperationBuilder setFunction(java.lang.String) -> setFunction
    101:102:neureka.backend.api.operations.OperationBuilder setOperator(java.lang.String) -> setOperator
    106:107:neureka.backend.api.operations.OperationBuilder setArity(java.lang.Integer) -> setArity
    111:112:neureka.backend.api.operations.OperationBuilder setIsOperator(java.lang.Boolean) -> setIsOperator
    116:117:neureka.backend.api.operations.OperationBuilder setIsIndexer(java.lang.Boolean) -> setIsIndexer
    121:122:neureka.backend.api.operations.OperationBuilder setIsDifferentiable(java.lang.Boolean) -> setIsDifferentiable
    126:127:neureka.backend.api.operations.OperationBuilder setIsInline(java.lang.Boolean) -> setIsInline
    130:130:void dispose() -> dispose
    146:151:neureka.backend.api.Operation build() -> build
    1133:1141:java.util.List _listOfMissingProperties():133:141 -> build
    1133:1141:neureka.backend.api.Operation build():147 -> build
    17:17:neureka.backend.api.operations.OperationBuilder$Stringifier access$000(neureka.backend.api.operations.OperationBuilder) -> a
    17:17:neureka.backend.api.operations.OperationBuilder$Derivator access$100(neureka.backend.api.operations.OperationBuilder) -> b
neureka.backend.api.operations.OperationBuilder$1 -> neureka.backend.api.operations.OperationBuilder$1:
    neureka.backend.api.operations.OperationBuilder this$0 -> a
    151:151:void <init>(neureka.backend.api.operations.OperationBuilder,neureka.backend.api.operations.OperationBuilder) -> <init>
    154:154:java.lang.String stringify(java.lang.String[]) -> stringify
    159:159:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    164:164:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    169:169:java.lang.String toString() -> toString
neureka.backend.api.operations.OperationBuilder$Derivator -> neureka.backend.api.operations.OperationBuilder$Derivator:
    java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
neureka.backend.api.operations.OperationBuilder$Stringifier -> neureka.backend.api.operations.OperationBuilder$Stringifier:
    java.lang.String stringify(java.lang.String[]) -> stringify
neureka.backend.standard.algorithms.Activation -> neureka.backend.standard.algorithms.Activation:
    23:56:void <init>() -> <init>
    59:59:java.lang.String getKernelSource() -> getKernelSource
    68:81:void activate(neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> activate
    90:104:void activate(neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> activate
    39:53:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    31:34:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    33:33:boolean lambda$new$3(neureka.Tsr,neureka.Tsr) -> a
    29:29:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> c
    25:27:float lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    26:26:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.algorithms.Broadcast -> neureka.backend.standard.algorithms.Broadcast:
    boolean $assertionsDisabled -> a
    21:101:void <init>(neureka.calculus.RecursiveExecutor) -> <init>
    104:104:java.lang.String getKernelSource() -> getKernelSource
    113:202:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> broadcast
    212:297:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> broadcast
    73:98:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    57:68:neureka.Tsr lambda$new$4(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    65:65:neureka.Tsr lambda$new$3(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    48:53:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    25:44:float lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    27:27:boolean lambda$new$0(neureka.Tsr) -> a
    17:17:void <clinit>() -> <clinit>
neureka.backend.standard.algorithms.Convolution -> neureka.backend.standard.algorithms.Convolution:
    16:22:void <init>() -> <init>
    26:26:java.lang.String getKernelSource() -> getKernelSource
    35:37:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> convolve
    1115:1198:void _deConvolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer):115:198 -> convolve
    1115:1198:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer):36 -> convolve
    45:108:void _convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> _convolve
    209:211:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> convolve
    1220:1286:void _convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):220:286 -> convolve
    1220:1286:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):209 -> convolve
    1294:1374:void _deConvolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):294:374 -> convolve
    1294:1374:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):210 -> convolve
    18:20:float lambda$new$1(neureka.backend.api.ExecutionCall) -> a
    19:19:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.algorithms.FunAlgorithm -> neureka.backend.standard.algorithms.FunAlgorithm:
    7:7:void <init>(java.lang.String) -> <init>
neureka.backend.standard.algorithms.Operator -> neureka.backend.standard.algorithms.Operator:
    20:53:void <init>(neureka.calculus.RecursiveExecutor) -> <init>
    56:56:java.lang.String getKernelSource() -> getKernelSource
    66:87:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$SecondaryNDIConsumer) -> operate
    97:112:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$PrimaryNDAConsumer) -> operate
    36:50:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    33:33:neureka.Tsr lambda$new$6(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    32:32:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    23:28:float lambda$new$3(neureka.backend.api.ExecutionCall) -> d
    27:27:boolean lambda$new$2(neureka.Tsr) -> a
    26:26:boolean lambda$new$1(int,java.util.List,neureka.Tsr) -> a
    24:24:java.lang.Integer lambda$new$0(java.lang.Integer,java.lang.Integer) -> a
neureka.backend.standard.algorithms.Scalarization -> neureka.backend.standard.algorithms.Scalarization:
    boolean $assertionsDisabled -> a
    17:54:void <init>() -> <init>
    58:58:java.lang.String getKernelSource() -> getKernelSource
    68:80:void scalarize(neureka.Tsr,int,int,neureka.backend.api.Operation$PrimaryNDIConsumer) -> scalarize
    88:99:void scalarize(neureka.Tsr,int,int,neureka.backend.api.Operation$PrimaryNDAConsumer) -> scalarize
    37:51:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    21:33:float lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    25:31:boolean lambda$new$3(neureka.Tsr[]) -> a
    22:22:boolean lambda$new$2(neureka.Tsr) -> a
    19:19:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    18:18:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    14:14:void <clinit>() -> <clinit>
neureka.backend.standard.implementations.CLImplementation -> neureka.backend.standard.implementations.CLImplementation:
    java.util.function.Function _aliasSwapper -> a
    java.util.function.Function asAdvanced -> b
    java.lang.String _source -> c
    java.lang.String _name -> d
    boolean isSimple -> e
    20:56:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String) -> <init>
    20:87:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    1121:1149:java.util.Map _getParsedKernelsFromTemplate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String):121:149 -> <init>
    1121:1149:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String):76 -> <init>
    90:90:boolean isSimpleSource() -> isSimpleSource
    94:94:neureka.backend.standard.implementations.CLImplementation$SourceBuilder fromSource() -> fromSource
    98:98:neureka.backend.standard.implementations.CLImplementation$Compiler compiler() -> compiler
    102:102:java.lang.String getSource() -> getSource
    106:106:java.lang.String getName() -> getName
    127:137:void lambda$_getParsedKernelsFromTemplate$2(java.lang.String[],java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String) -> a
    37:40:java.lang.String lambda$new$1(java.lang.String) -> a
    22:32:java.lang.String lambda$new$0(java.lang.String) -> b
    17:17:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,byte) -> <init>
    17:17:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte) -> <init>
neureka.backend.standard.implementations.CLImplementation$Compiler -> neureka.backend.standard.implementations.CLImplementation$Compiler:
    neureka.backend.api.ImplementationFor lambda -> a
    int arity -> b
    java.lang.String kernelSource -> c
    java.lang.String activationSource -> d
    java.lang.String differentiationSource -> e
    java.lang.String type -> f
    179:179:void <init>() -> <init>
    181:181:neureka.backend.standard.implementations.CLImplementation$Compiler execution(neureka.backend.api.ImplementationFor) -> execution
    182:182:neureka.backend.standard.implementations.CLImplementation$Compiler arity(int) -> arity
    183:183:neureka.backend.standard.implementations.CLImplementation$Compiler kernelSource(java.lang.String) -> kernelSource
    184:184:neureka.backend.standard.implementations.CLImplementation$Compiler activationSource(java.lang.String) -> activationSource
    185:185:neureka.backend.standard.implementations.CLImplementation$Compiler differentiationSource(java.lang.String) -> differentiationSource
    186:186:neureka.backend.standard.implementations.CLImplementation$Compiler kernelPostfix(java.lang.String) -> kernelPostfix
    188:191:neureka.backend.standard.implementations.CLImplementation build() -> build
neureka.backend.standard.implementations.CLImplementation$Parser -> neureka.backend.standard.implementations.CLImplementation$a:
    void apply(java.lang.String,java.lang.String,java.lang.String) -> apply
neureka.backend.standard.implementations.CLImplementation$SourceBuilder -> neureka.backend.standard.implementations.CLImplementation$SourceBuilder:
    neureka.backend.api.ImplementationFor lambda -> a
    int arity -> b
    java.lang.String kernelName -> c
    java.lang.String kernelSource -> d
    162:162:void <init>() -> <init>
    164:164:neureka.backend.standard.implementations.CLImplementation$SourceBuilder lambda(neureka.backend.api.ImplementationFor) -> lambda
    165:165:neureka.backend.standard.implementations.CLImplementation$SourceBuilder arity(int) -> arity
    166:166:neureka.backend.standard.implementations.CLImplementation$SourceBuilder kernelName(java.lang.String) -> kernelName
    167:167:neureka.backend.standard.implementations.CLImplementation$SourceBuilder kernelSource(java.lang.String) -> kernelSource
    168:168:neureka.backend.standard.implementations.CLImplementation build() -> build
neureka.backend.standard.implementations.CPUImplementation -> neureka.backend.standard.implementations.CPUImplementation:
    18:18:neureka.backend.standard.implementations.CPUImplementation$AndImplementation withArity(int) -> withArity
    20:20:void <init>(neureka.backend.api.ImplementationFor,int) -> <init>
    18:18:neureka.backend.standard.implementations.CPUImplementation lambda$withArity$0(int,neureka.backend.api.ImplementationFor) -> a
neureka.backend.standard.implementations.CPUImplementation$AndImplementation -> neureka.backend.standard.implementations.CPUImplementation$AndImplementation:
    neureka.backend.standard.implementations.CPUImplementation andImplementation(neureka.backend.api.ImplementationFor) -> andImplementation
neureka.backend.standard.operations.ConvUtil -> neureka.backend.standard.operations.ConvUtil:
    neureka.backend.standard.algorithms.Convolution conv -> a
    boolean $assertionsDisabled -> b
    15:15:void <init>() -> <init>
    20:121:neureka.backend.standard.algorithms.Convolution createDeconvolutionFor(java.lang.String) -> createDeconvolutionFor
    125:126:neureka.backend.standard.algorithms.Convolution getConv() -> getConv
    104:118:neureka.backend.api.ExecutionCall lambda$createDeconvolutionFor$6(neureka.backend.api.ExecutionCall) -> a
    69:99:neureka.Tsr lambda$createDeconvolutionFor$5(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    37:62:neureka.autograd.ADAgent lambda$createDeconvolutionFor$4(java.lang.String,neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    63:63:neureka.Tsr lambda$createDeconvolutionFor$3(neureka.calculus.Function,neureka.Tsr,int[],neureka.autograd.GraphNode,neureka.Tsr) -> a
    60:60:neureka.Tsr lambda$createDeconvolutionFor$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    24:31:boolean lambda$createDeconvolutionFor$1(neureka.backend.api.ExecutionCall) -> b
    21:21:boolean lambda$createDeconvolutionFor$0(neureka.backend.api.ExecutionCall) -> c
    15:17:void <clinit>() -> <clinit>
neureka.backend.standard.operations.JunctionUtil -> neureka.backend.standard.operations.JunctionUtil:
    org.slf4j.Logger _LOG -> a
    14:14:void <init>() -> <init>
    24:63:neureka.Tsr forConvolution(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forConvolution
    71:105:neureka.Tsr forMultiplications(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forMultiplications
    114:181:neureka.Tsr forDivisionsOrModuli(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forDivisionsOrModuli
    189:189:neureka.Tsr forAdditions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forAdditions
    197:197:neureka.Tsr forSubtractions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forSubtractions
    206:237:neureka.Tsr _forAdditionsOrSubtractions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor,boolean) -> a
    244:253:neureka.Tsr newTsrLike(neureka.Tsr,double) -> newTsrLike
    17:17:void <clinit>() -> <clinit>
neureka.backend.standard.operations.function.Absolute -> neureka.backend.standard.operations.function.Absolute:
    neureka.backend.api.Operation$DefaultOperatorCreator _activationCreator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _activationXCreator -> b
    20:102:void <init>() -> <init>
    106:108:java.lang.String stringify(java.lang.String[]) -> stringify
    113:113:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    118:121:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    126:127:double calculate(double,boolean) -> calculate
    89:97:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    60:70:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    71:74:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    65:68:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Cosinus -> neureka.backend.standard.operations.function.Cosinus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:103:void <init>() -> <init>
    107:109:java.lang.String stringify(java.lang.String[]) -> stringify
    114:114:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    119:122:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    127:128:double calculate(double,boolean) -> calculate
    90:98:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    61:71:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    72:75:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    66:69:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Gaussian -> neureka.backend.standard.operations.function.Gaussian:
    24:165:void <init>() -> <init>
    169:171:java.lang.String stringify(java.lang.String[]) -> stringify
    176:176:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    181:184:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    189:190:double calculate(double,boolean) -> calculate
    152:160:void lambda$new$13(neureka.backend.api.ExecutionCall) -> a
    111:121:void lambda$new$12(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    122:125:void lambda$new$11(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    116:119:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    84:98:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    79:79:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    69:74:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> c
    66:66:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> d
    53:57:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    58:59:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    55:55:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    38:42:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    43:44:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    40:40:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Identity -> neureka.backend.standard.operations.function.Identity:
    25:225:void <init>() -> <init>
    229:231:java.lang.String stringify(java.lang.String[]) -> stringify
    236:236:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    241:244:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    249:250:double calculate(double,boolean) -> calculate
    209:218:void lambda$new$23(neureka.backend.api.ExecutionCall) -> a
    183:196:void lambda$new$22(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    189:192:void lambda$new$21(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    156:170:neureka.backend.api.ExecutionCall lambda$new$20(neureka.backend.api.ExecutionCall) -> b
    151:151:neureka.autograd.ADAgent lambda$new$19(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    141:146:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> c
    138:138:boolean lambda$new$17(neureka.backend.api.ExecutionCall) -> d
    134:135:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$16(neureka.Tsr[],double,int) -> a
    135:135:double lambda$new$15(double,neureka.ndim.iterators.NDIterator) -> a
    134:134:double lambda$new$14(double,neureka.ndim.iterators.NDIterator) -> b
    116:126:void lambda$new$13(neureka.backend.api.ExecutionCall) -> e
    87:97:void lambda$new$12(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    98:101:void lambda$new$11(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    92:95:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    69:74:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> f
    64:64:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    54:59:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> g
    51:51:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> h
    45:47:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    47:47:double lambda$new$4(int[],int[],int[]) -> a
    46:46:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> a
    38:40:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    40:40:double lambda$new$1(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    39:39:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.function.Logarithm -> neureka.backend.standard.operations.function.Logarithm:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:104:void <init>() -> <init>
    108:110:java.lang.String stringify(java.lang.String[]) -> stringify
    115:116:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    121:124:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    129:130:double calculate(double,boolean) -> calculate
    90:98:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    61:71:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    72:75:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    66:69:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Quadratic -> neureka.backend.standard.operations.function.Quadratic:
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorNDI -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorNDX -> b
    20:111:void <init>() -> <init>
    115:117:java.lang.String stringify(java.lang.String[]) -> stringify
    122:122:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    127:130:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    135:136:double calculate(double,boolean) -> calculate
    98:106:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    69:79:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    80:83:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    74:77:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    57:57:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    33:39:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    39:39:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    36:37:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:28:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    28:28:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:26:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.ReLU -> neureka.backend.standard.operations.function.ReLU:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:122:void <init>() -> <init>
    126:128:java.lang.String stringify(java.lang.String[]) -> stringify
    133:133:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    138:141:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    147:154:double calculate(double,boolean) -> calculate
    109:117:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    80:90:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    91:94:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    85:88:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    68:68:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    38:45:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    46:47:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    41:42:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:29:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    30:31:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:26:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sigmoid -> neureka.backend.standard.operations.function.Sigmoid:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:106:void <init>() -> <init>
    110:112:java.lang.String stringify(java.lang.String[]) -> stringify
    117:117:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    122:125:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    130:133:double calculate(double,boolean) -> calculate
    93:101:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    64:74:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    75:78:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    69:72:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    51:51:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    29:31:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    31:31:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    30:30:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sinus -> neureka.backend.standard.operations.function.Sinus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    22:138:void <init>() -> <init>
    142:144:java.lang.String stringify(java.lang.String[]) -> stringify
    149:149:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    154:157:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    162:163:double calculate(double,boolean) -> calculate
    125:133:void lambda$new$13(neureka.backend.api.ExecutionCall) -> a
    96:106:void lambda$new$12(neureka.backend.api.ExecutionCall) -> b
    107:110:void lambda$new$11(neureka.backend.api.ExecutionCall,int,int) -> a
    101:104:void lambda$new$10(neureka.backend.api.ExecutionCall,int,int) -> b
    69:83:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    64:64:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    54:59:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> d
    51:51:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> e
    31:33:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    33:33:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    32:32:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    24:26:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    26:26:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:25:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Softplus -> neureka.backend.standard.operations.function.Softplus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    21:127:void <init>() -> <init>
    131:133:java.lang.String stringify(java.lang.String[]) -> stringify
    138:138:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    143:146:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    151:152:double calculate(double,boolean) -> calculate
    114:122:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    65:75:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    76:79:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    70:73:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    51:51:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    30:32:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    32:32:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    31:31:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    23:25:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    25:25:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    24:24:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Tanh -> neureka.backend.standard.operations.function.Tanh:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:127:void <init>() -> <init>
    131:133:java.lang.String stringify(java.lang.String[]) -> stringify
    138:138:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    143:146:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    151:155:double calculate(double,boolean) -> calculate
    110:118:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    82:92:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    93:96:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    87:90:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    70:70:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    40:47:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    48:49:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    43:44:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    23:30:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    31:32:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    26:27:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.indexer.Product -> neureka.backend.standard.operations.indexer.Product:
    29:298:void <init>() -> <init>
    304:308:java.lang.String stringify(java.lang.String[]) -> stringify
    313:313:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    319:339:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    345:364:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    281:289:void lambda$new$39(neureka.backend.api.ExecutionCall) -> a
    251:262:void lambda$new$38(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    263:266:void lambda$new$37(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    257:260:void lambda$new$36(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    223:237:neureka.backend.api.ExecutionCall lambda$new$35(neureka.backend.api.ExecutionCall) -> b
    220:220:neureka.Tsr lambda$new$34(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    181:215:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    215:215:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    214:214:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    208:208:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    207:207:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    195:195:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    194:194:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    186:186:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    185:185:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    177:177:boolean lambda$new$24(neureka.backend.api.ExecutionCall) -> c
    176:176:boolean lambda$new$23(neureka.backend.api.ExecutionCall) -> d
    170:172:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$22(neureka.Tsr[],int) -> a
    172:172:double lambda$new$21(double[],neureka.Tsr[],int[],int[],int[]) -> a
    171:171:double lambda$new$20(double[],neureka.Tsr[],int[],int[],int[]) -> b
    163:165:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$19(neureka.Tsr[],int) -> b
    165:165:double lambda$new$18(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    164:164:double lambda$new$17(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    143:152:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    108:121:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    122:128:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    113:119:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    79:94:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    94:94:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    93:93:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    84:84:neureka.Tsr lambda$new$9(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    83:83:neureka.Tsr lambda$new$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    75:75:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> f
    74:74:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> g
    61:66:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    67:68:double lambda$new$4(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    64:64:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    46:51:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    52:53:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    49:49:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.indexer.Summation -> neureka.backend.standard.operations.indexer.Summation:
    29:286:void <init>() -> <init>
    290:294:java.lang.String stringify(java.lang.String[]) -> stringify
    299:299:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    304:306:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    311:322:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    328:335:double _calculate(double[],neureka.calculus.Function[]) -> a
    269:280:void lambda$new$39(neureka.backend.api.ExecutionCall) -> a
    240:250:void lambda$new$38(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    251:254:void lambda$new$37(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    245:248:void lambda$new$36(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    213:227:neureka.backend.api.ExecutionCall lambda$new$35(neureka.backend.api.ExecutionCall) -> b
    210:210:neureka.Tsr lambda$new$34(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    171:205:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    205:205:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    204:204:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    198:198:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    197:197:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    185:185:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    184:184:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    176:176:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    175:175:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    167:167:boolean lambda$new$24(neureka.backend.api.ExecutionCall) -> c
    166:166:boolean lambda$new$23(neureka.backend.api.ExecutionCall) -> d
    160:162:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$22(neureka.Tsr[],int) -> a
    162:162:double lambda$new$21(double[],neureka.Tsr[],int[],int[],int[]) -> a
    161:161:double lambda$new$20(double[],neureka.Tsr[],int[],int[],int[]) -> b
    153:155:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$19(neureka.Tsr[],int) -> b
    155:155:double lambda$new$18(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    154:154:double lambda$new$17(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    132:141:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    97:110:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    111:117:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    102:108:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    67:82:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    82:82:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    81:81:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    72:72:neureka.Tsr lambda$new$9(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    71:71:neureka.Tsr lambda$new$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    63:63:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> f
    62:62:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> g
    55:58:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    58:58:double lambda$new$4(int[],int[],int[]) -> a
    57:57:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    46:49:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    49:49:double lambda$new$1(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    48:48:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.linear.MatMul -> neureka.backend.standard.operations.linear.MatMul:
    org.slf4j.Logger _LOG -> a
    29:198:void <init>() -> <init>
    222:229:java.lang.String stringify(java.lang.String[]) -> stringify
    234:234:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    239:239:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    152:164:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    115:124:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    86:101:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    1207:1218:void _autoClone(neureka.Tsr[]):207:218 -> c
    1207:1218:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall):100 -> c
    73:81:neureka.Tsr lambda$new$8(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    55:63:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    64:67:neureka.Tsr lambda$new$6(int,neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    51:51:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> d
    50:50:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> e
    43:48:float lambda$new$3(neureka.backend.api.ExecutionCall) -> f
    47:47:boolean lambda$new$2(neureka.Tsr) -> a
    46:46:boolean lambda$new$1(neureka.Tsr) -> b
    44:44:boolean lambda$new$0(neureka.Tsr) -> c
    25:25:void <clinit>() -> <clinit>
neureka.backend.standard.operations.linear.SimpleMatMul -> neureka.backend.standard.operations.linear.SimpleMatMul:
    3:3:void <init>() -> <init>
    14:24:void execute(double[],int[],double[],int[],double[],int[]) -> execute
    29:36:void execute(double[],double[],double[],int,int,int) -> execute
neureka.backend.standard.operations.linear.XConv -> neureka.backend.standard.operations.linear.XConv:
    20:119:void <init>() -> <init>
    124:131:java.lang.String stringify(java.lang.String[]) -> stringify
    136:136:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    141:141:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    104:113:void lambda$new$9(neureka.backend.api.ExecutionCall) -> a
    69:82:void lambda$new$8(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    83:87:void lambda$new$7(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    74:78:void lambda$new$6(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    46:51:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    52:53:double lambda$new$4(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    49:49:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    33:38:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    39:40:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    36:36:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.linear.XConvLeft -> neureka.backend.standard.operations.linear.XConvLeft:
    12:23:void <init>() -> <init>
    27:34:java.lang.String stringify(java.lang.String[]) -> stringify
    39:39:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    44:44:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.linear.XConvRight -> neureka.backend.standard.operations.linear.XConvRight:
    12:23:void <init>() -> <init>
    27:34:java.lang.String stringify(java.lang.String[]) -> stringify
    39:39:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    44:44:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Addition -> neureka.backend.standard.operations.operator.Addition:
    neureka.backend.api.Operation$DefaultOperatorCreator _broadcastCreator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _broadcastCreatorX -> b
    neureka.backend.standard.algorithms.Broadcast _broadcast -> c
    boolean $assertionsDisabled -> d
    48:331:void <init>() -> <init>
    336:343:java.lang.String stringify(java.lang.String[]) -> stringify
    348:353:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    358:371:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    377:389:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    350:350:neureka.calculus.Function lambda$asDerivative$34(int,neureka.calculus.Function) -> a
    349:349:boolean lambda$asDerivative$33(int,neureka.calculus.Function) -> b
    310:326:void lambda$new$32(neureka.backend.api.ExecutionCall) -> a
    271:297:void lambda$new$31(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    290:293:void lambda$new$30(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    284:287:void lambda$new$29(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    257:261:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$28(neureka.Tsr[],double,int) -> a
    261:261:double lambda$new$27(int[]) -> a
    259:259:double lambda$new$26(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    249:252:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$25(neureka.Tsr[],double,int) -> b
    252:252:double lambda$new$24(neureka.ndim.iterators.NDIterator) -> a
    250:250:double lambda$new$23(double[],double,neureka.ndim.iterators.NDIterator) -> a
    244:244:neureka.Tsr lambda$new$22(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    224:233:void lambda$new$21(neureka.backend.api.ExecutionCall) -> b
    193:211:void lambda$new$20(neureka.backend.api.ExecutionCall) -> c
    205:208:void lambda$new$19(neureka.backend.api.ExecutionCall,int,int) -> a
    199:202:void lambda$new$18(neureka.backend.api.ExecutionCall,int,int) -> b
    166:176:void lambda$new$17(neureka.backend.api.ExecutionCall) -> d
    130:144:void lambda$new$16(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    145:151:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    136:142:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    110:115:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$13(neureka.Tsr[],int) -> a
    115:115:double lambda$new$12(int[]) -> b
    114:114:double lambda$new$11(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    102:105:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$10(neureka.Tsr[],int) -> b
    105:105:double lambda$new$9(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    104:104:double lambda$new$8(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    53:64:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    66:76:neureka.Tsr lambda$new$6(neureka.devices.Device,neureka.Tsr,neureka.Tsr[],int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    49:49:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> e
    48:48:neureka.Tsr lambda$new$4(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    39:44:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$3(neureka.Tsr[],int) -> c
    44:44:double lambda$static$2(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    31:34:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$1(neureka.Tsr[],int) -> d
    34:34:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    27:37:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.AdditionConv -> neureka.backend.standard.operations.operator.AdditionConv:
    18:78:void <init>() -> <init>
    82:89:java.lang.String stringify(java.lang.String[]) -> stringify
    94:94:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    99:99:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    68:73:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    45:61:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    61:61:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    60:60:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    50:50:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    49:49:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    34:39:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.AdditionLeftConv -> neureka.backend.standard.operations.operator.AdditionLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.AdditionRightConv -> neureka.backend.standard.operations.operator.AdditionRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Division -> neureka.backend.standard.operations.operator.Division:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    64:374:void <init>() -> <init>
    379:386:java.lang.String stringify(java.lang.String[]) -> stringify
    391:391:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    395:416:java.lang.String _asDerivative(neureka.calculus.Function[],int,int) -> a
    422:440:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    446:467:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    360:369:void lambda$new$44(neureka.backend.api.ExecutionCall) -> a
    322:340:void lambda$new$43(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    334:337:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    328:331:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    311:311:neureka.Tsr lambda$new$40(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    309:309:neureka.autograd.ADAgent lambda$new$39(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    306:306:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> b
    305:305:boolean lambda$new$37(neureka.backend.api.ExecutionCall) -> c
    304:304:float lambda$new$36(neureka.backend.api.ExecutionCall) -> d
    293:299:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$35(neureka.Tsr[],double,int) -> a
    299:299:double lambda$new$34(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    298:298:double lambda$new$33(double,int[]) -> a
    296:296:double lambda$new$32(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    282:287:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$31(neureka.Tsr[],double,int) -> b
    287:287:double lambda$new$30(double,double[],neureka.ndim.iterators.NDIterator) -> a
    286:286:double lambda$new$29(double,neureka.ndim.iterators.NDIterator) -> a
    284:284:double lambda$new$28(double[],double,neureka.ndim.iterators.NDIterator) -> a
    262:271:void lambda$new$27(neureka.backend.api.ExecutionCall) -> e
    228:238:void lambda$new$26(neureka.backend.api.ExecutionCall) -> f
    239:242:void lambda$new$25(neureka.backend.api.ExecutionCall,int,int) -> a
    233:236:void lambda$new$24(neureka.backend.api.ExecutionCall,int,int) -> b
    199:214:neureka.autograd.ADAgent lambda$new$23(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    214:214:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    213:213:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    204:204:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    203:203:neureka.Tsr lambda$new$19(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    189:194:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> g
    187:187:boolean lambda$new$17(neureka.backend.api.ExecutionCall) -> h
    167:176:void lambda$new$16(neureka.backend.api.ExecutionCall) -> i
    126:139:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    140:146:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    131:137:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    113:113:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    96:101:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    102:105:double lambda$new$10(int,double[],neureka.Tsr[],double[],int[]) -> a
    99:99:double lambda$new$9(double[],neureka.Tsr[],double[],int[]) -> a
    80:85:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    86:89:double lambda$new$7(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    83:83:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    46:53:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    54:57:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    51:51:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    30:35:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    36:39:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    33:33:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    28:44:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.DivisionConv -> neureka.backend.standard.operations.operator.DivisionConv:
    18:75:void <init>() -> <init>
    79:86:java.lang.String stringify(java.lang.String[]) -> stringify
    91:91:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    96:96:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    68:70:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    45:61:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    61:61:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    60:60:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    50:50:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    49:49:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    34:39:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.DivisionLeftConv -> neureka.backend.standard.operations.operator.DivisionLeftConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.DivisionRightConv -> neureka.backend.standard.operations.operator.DivisionRightConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Modulo -> neureka.backend.standard.operations.operator.Modulo:
    29:389:void <init>() -> <init>
    395:403:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    410:417:java.lang.String stringify(java.lang.String[]) -> stringify
    422:422:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    427:437:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    374:383:void lambda$new$44(neureka.backend.api.ExecutionCall) -> a
    337:355:void lambda$new$43(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    349:352:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    343:346:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    324:324:neureka.autograd.ADAgent lambda$new$40(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    314:319:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> b
    311:311:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> c
    310:310:float lambda$new$37(neureka.backend.api.ExecutionCall) -> d
    299:305:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$36(neureka.Tsr[],double,int) -> a
    305:305:double lambda$new$35(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    304:304:double lambda$new$34(double,int[]) -> a
    302:302:double lambda$new$33(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    288:293:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$32(neureka.Tsr[],double,int) -> b
    293:293:double lambda$new$31(double,double[],neureka.ndim.iterators.NDIterator) -> a
    292:292:double lambda$new$30(double,neureka.ndim.iterators.NDIterator) -> a
    290:290:double lambda$new$29(double[],double,neureka.ndim.iterators.NDIterator) -> a
    268:277:void lambda$new$28(neureka.backend.api.ExecutionCall) -> e
    233:243:void lambda$new$27(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    244:247:void lambda$new$26(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    238:241:void lambda$new$25(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    204:219:neureka.autograd.ADAgent lambda$new$24(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    219:219:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    218:218:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    209:209:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    208:208:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    193:198:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> f
    190:190:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> g
    189:189:neureka.Tsr lambda$new$17(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    173:180:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$16(neureka.Tsr[],int) -> a
    181:184:double lambda$new$15(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    178:178:double lambda$new$14(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    153:158:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$13(neureka.Tsr[],int) -> b
    159:165:double lambda$new$12(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    156:156:double lambda$new$11(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    131:140:void lambda$new$10(neureka.backend.api.ExecutionCall) -> h
    91:104:void lambda$new$9(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    105:111:void lambda$new$8(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    96:102:void lambda$new$7(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    79:79:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    60:66:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    67:70:double lambda$new$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    64:64:double lambda$new$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    45:49:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    50:53:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    47:47:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.operator.Multiplication -> neureka.backend.standard.operations.operator.Multiplication:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    neureka.backend.api.Operation$DefaultOperatorCreator xBCCreator -> xBCCreator
    neureka.backend.api.Operation$DefaultOperatorCreator xBCCreatorX -> xBCCreatorX
    73:371:void <init>() -> <init>
    377:384:java.lang.String stringify(java.lang.String[]) -> stringify
    389:401:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    406:425:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    431:449:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    392:397:java.lang.String lambda$asDerivative$49(int,neureka.calculus.Function[],neureka.calculus.Function) -> a
    395:395:boolean lambda$asDerivative$48(neureka.calculus.Function,neureka.calculus.Function) -> a
    390:390:boolean lambda$asDerivative$47(int,neureka.calculus.Function) -> a
    350:365:void lambda$new$46(neureka.backend.api.ExecutionCall) -> a
    313:337:void lambda$new$45(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    330:333:void lambda$new$44(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    324:327:void lambda$new$43(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    302:302:neureka.Tsr lambda$new$42(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    300:300:boolean lambda$new$41(neureka.backend.api.ExecutionCall) -> b
    299:299:boolean lambda$new$40(neureka.backend.api.ExecutionCall) -> c
    289:294:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$39(neureka.Tsr[],double,int) -> a
    294:294:double lambda$new$38(double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    293:293:double lambda$new$37(double,int[]) -> a
    291:291:double lambda$new$36(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    279:283:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$35(neureka.Tsr[],double,int) -> b
    283:283:double lambda$new$34(double[],neureka.ndim.iterators.NDIterator) -> a
    282:282:double lambda$new$33(double,neureka.ndim.iterators.NDIterator) -> a
    280:280:double lambda$new$32(double[],double,neureka.ndim.iterators.NDIterator) -> a
    256:265:void lambda$new$31(neureka.backend.api.ExecutionCall) -> d
    227:237:void lambda$new$30(neureka.backend.api.ExecutionCall) -> e
    238:241:void lambda$new$29(neureka.backend.api.ExecutionCall,int,int) -> a
    232:235:void lambda$new$28(neureka.backend.api.ExecutionCall,int,int) -> b
    197:212:neureka.autograd.ADAgent lambda$new$27(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    212:212:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    211:211:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    202:202:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    201:201:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    193:193:boolean lambda$new$22(neureka.backend.api.ExecutionCall) -> f
    192:192:boolean lambda$new$21(neureka.backend.api.ExecutionCall) -> g
    172:181:void lambda$new$20(neureka.backend.api.ExecutionCall) -> h
    137:150:void lambda$new$19(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    151:157:void lambda$new$18(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    142:148:void lambda$new$17(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    125:125:neureka.autograd.ADAgent lambda$new$16(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    106:115:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$15(neureka.Tsr[],int) -> a
    116:117:double lambda$new$14(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    113:113:double lambda$new$13(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    89:96:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$12(neureka.Tsr[],int) -> b
    97:98:double lambda$new$11(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    94:94:double lambda$new$10(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    64:68:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$9(neureka.Tsr[],int) -> c
    68:68:double lambda$static$8(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    57:59:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$7(neureka.Tsr[],int) -> d
    59:59:double lambda$static$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    41:48:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> e
    49:50:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    46:46:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> b
    33:36:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> f
    36:36:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    35:35:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    31:62:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.MultiplicationLeftConv -> neureka.backend.standard.operations.operator.MultiplicationLeftConv:
    22:129:void <init>() -> <init>
    133:133:java.lang.String stringify(java.lang.String[]) -> stringify
    138:138:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    143:143:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    115:124:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    86:96:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    97:100:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    91:94:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    70:72:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> c
    48:63:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    63:63:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    62:62:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    52:52:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    37:42:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> d
    34:34:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> e
    33:33:neureka.Tsr lambda$new$0(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
neureka.backend.standard.operations.operator.MultiplicationRightConv -> neureka.backend.standard.operations.operator.MultiplicationRightConv:
    23:131:void <init>() -> <init>
    135:135:java.lang.String stringify(java.lang.String[]) -> stringify
    140:140:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    145:145:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    116:125:void lambda$new$12(neureka.backend.api.ExecutionCall) -> a
    87:97:void lambda$new$11(neureka.backend.api.ExecutionCall) -> b
    98:101:void lambda$new$10(neureka.backend.api.ExecutionCall,int,int) -> a
    92:95:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> b
    71:74:neureka.backend.api.ExecutionCall lambda$new$8(neureka.backend.api.ExecutionCall) -> c
    49:64:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    64:64:neureka.Tsr lambda$new$6(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    63:63:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    54:54:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    53:53:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    38:43:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> d
    35:35:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> e
    34:34:neureka.Tsr lambda$new$0(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
neureka.backend.standard.operations.operator.Power -> neureka.backend.standard.operations.operator.Power:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    78:468:void <init>() -> <init>
    477:482:java.lang.String stringify(java.lang.String[]) -> stringify
    487:516:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    521:547:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    553:578:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    490:490:java.lang.String lambda$asDerivative$45(neureka.calculus.Function[],int) -> a
    452:461:void lambda$new$44(neureka.backend.api.ExecutionCall) -> a
    415:433:void lambda$new$43(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    427:430:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    421:424:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    404:404:neureka.Tsr lambda$new$40(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    402:402:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> b
    401:401:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> c
    400:400:float lambda$new$37(neureka.backend.api.ExecutionCall) -> d
    390:395:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$36(neureka.Tsr[],double,int) -> a
    395:395:double lambda$new$35(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    394:394:double lambda$new$34(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    392:392:double lambda$new$33(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> b
    380:384:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$32(neureka.Tsr[],double,int) -> b
    384:384:double lambda$new$31(double[],double,neureka.ndim.iterators.NDIterator) -> a
    383:383:double lambda$new$30(double,double[],neureka.ndim.iterators.NDIterator) -> a
    381:381:double lambda$new$29(double[],double,neureka.ndim.iterators.NDIterator) -> b
    360:369:void lambda$new$28(neureka.backend.api.ExecutionCall) -> e
    325:335:void lambda$new$27(neureka.backend.api.ExecutionCall) -> f
    336:339:void lambda$new$26(neureka.backend.api.ExecutionCall,int,int) -> a
    330:333:void lambda$new$25(neureka.backend.api.ExecutionCall,int,int) -> b
    296:311:neureka.autograd.ADAgent lambda$new$24(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    311:311:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    310:310:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    301:301:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    300:300:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    292:292:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> g
    291:291:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> h
    270:281:void lambda$new$17(neureka.backend.api.ExecutionCall) -> i
    228:241:void lambda$new$16(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    242:248:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    233:239:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    217:217:neureka.autograd.ADAgent lambda$new$13(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    136:211:neureka.Tsr lambda$new$12(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    117:124:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    126:129:double lambda$new$10(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int,int[]) -> a
    122:122:double lambda$new$9(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    94:99:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    101:110:double lambda$new$7(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    97:97:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    57:64:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    65:70:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    62:62:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    34:38:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    39:49:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    36:36:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    32:55:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.PowerConv -> neureka.backend.standard.operations.operator.PowerConv:
    18:77:void <init>() -> <init>
    81:88:java.lang.String stringify(java.lang.String[]) -> stringify
    93:93:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    98:98:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    69:72:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    46:62:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    62:62:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    61:61:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    51:51:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    50:50:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    35:40:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    32:32:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.PowerLeftConv -> neureka.backend.standard.operations.operator.PowerLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.PowerRightConv -> neureka.backend.standard.operations.operator.PowerRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Subtraction -> neureka.backend.standard.operations.operator.Subtraction:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    boolean $assertionsDisabled -> c
    68:358:void <init>() -> <init>
    364:371:java.lang.String stringify(java.lang.String[]) -> stringify
    376:381:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    386:403:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    409:425:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    379:379:neureka.calculus.Function lambda$asDerivative$40(int,neureka.calculus.Function) -> a
    378:378:boolean lambda$asDerivative$39(int,neureka.calculus.Function) -> b
    344:353:void lambda$new$38(neureka.backend.api.ExecutionCall) -> a
    313:331:void lambda$new$37(neureka.backend.api.ExecutionCall) -> b
    325:328:void lambda$new$36(neureka.backend.api.ExecutionCall,int,int) -> a
    319:322:void lambda$new$35(neureka.backend.api.ExecutionCall,int,int) -> b
    273:284:neureka.autograd.ADAgent lambda$new$34(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    286:296:neureka.Tsr lambda$new$33(neureka.devices.Device,neureka.Tsr,neureka.Tsr[],int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    269:269:boolean lambda$new$32(neureka.backend.api.ExecutionCall) -> c
    250:259:void lambda$new$31(neureka.backend.api.ExecutionCall) -> d
    206:231:void lambda$new$30(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    224:227:void lambda$new$29(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    218:221:void lambda$new$28(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    195:195:neureka.Tsr lambda$new$27(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    193:193:neureka.autograd.ADAgent lambda$new$26(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    190:190:float lambda$new$25(neureka.backend.api.ExecutionCall) -> e
    183:186:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$24(neureka.Tsr[],double,int) -> a
    186:186:double lambda$new$23(int[]) -> a
    186:186:double lambda$new$22(int[]) -> b
    185:185:double lambda$new$21(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    176:178:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$20(neureka.Tsr[],double,int) -> b
    178:178:double lambda$new$19(neureka.ndim.iterators.NDIterator) -> a
    178:178:double lambda$new$18(neureka.ndim.iterators.NDIterator) -> b
    177:177:double lambda$new$17(double[],double,neureka.ndim.iterators.NDIterator) -> a
    156:165:void lambda$new$16(neureka.backend.api.ExecutionCall) -> f
    115:128:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    129:135:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    120:126:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    104:104:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    92:98:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    98:98:double lambda$new$10(int,int[]) -> a
    97:97:double lambda$new$9(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    84:88:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    88:88:double lambda$new$7(int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    87:87:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    49:58:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    58:58:double lambda$static$4(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int,int[],int[],int[]) -> a
    54:54:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    32:39:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    39:39:double lambda$static$1(double[],double[],int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    35:35:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    28:47:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.SubtractionConv -> neureka.backend.standard.operations.operator.SubtractionConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.SubtractionLeftConv -> neureka.backend.standard.operations.operator.SubtractionLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.SubtractionRightConv -> neureka.backend.standard.operations.operator.SubtractionRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.other.CopyLeft -> neureka.backend.standard.operations.other.CopyLeft:
    23:187:void <init>() -> <init>
    192:197:java.lang.String stringify(java.lang.String[]) -> stringify
    202:202:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    207:207:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    179:184:void lambda$new$18(neureka.backend.api.ExecutionCall) -> a
    168:173:void lambda$new$17(neureka.backend.api.ExecutionCall) -> b
    147:153:neureka.backend.api.ExecutionCall lambda$new$16(neureka.backend.api.ExecutionCall) -> c
    141:141:neureka.autograd.ADAgent lambda$new$15(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    138:138:boolean lambda$new$14(neureka.backend.api.ExecutionCall) -> d
    137:137:boolean lambda$new$13(neureka.backend.api.ExecutionCall) -> e
    121:130:void lambda$new$12(neureka.backend.api.ExecutionCall) -> f
    90:108:void lambda$new$11(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    102:105:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    96:99:void lambda$new$9(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    76:78:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$8(neureka.Tsr[],double,int) -> a
    77:77:double lambda$new$7(double[],neureka.Tsr[],double,int[]) -> a
    69:71:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$6(neureka.Tsr[],double,int) -> b
    70:70:double lambda$new$5(double[],double,neureka.ndim.iterators.NDIterator) -> a
    54:62:neureka.backend.api.ExecutionCall lambda$new$4(neureka.backend.api.ExecutionCall) -> g
    48:48:neureka.autograd.ADAgent lambda$new$3(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    45:45:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> h
    44:44:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> i
    38:41:float lambda$new$0(neureka.backend.api.ExecutionCall) -> j
neureka.backend.standard.operations.other.CopyRight -> neureka.backend.standard.operations.other.CopyRight:
    21:95:void <init>() -> <init>
    99:106:java.lang.String stringify(java.lang.String[]) -> stringify
    111:111:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    116:116:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    80:92:void lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    61:74:void lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    42:48:neureka.backend.api.ExecutionCall lambda$new$3(neureka.backend.api.ExecutionCall) -> c
    37:37:neureka.autograd.ADAgent lambda$new$2(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    34:34:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    33:33:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> e
neureka.backend.standard.operations.other.DimFit -> neureka.backend.standard.operations.other.DimFit:
    boolean $assertionsDisabled -> a
    22:115:void <init>() -> <init>
    120:124:java.lang.String stringify(java.lang.String[]) -> stringify
    129:129:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    134:134:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    108:108:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    58:95:neureka.Tsr lambda$new$4(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    44:50:neureka.autograd.ADAgent lambda$new$3(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    37:37:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    36:36:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    35:35:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    17:17:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.DimTrim -> neureka.backend.standard.operations.other.DimTrim:
    boolean $assertionsDisabled -> a
    27:86:void <init>() -> <init>
    89:128:neureka.Tsr _pad(neureka.Tsr,int[],boolean) -> a
    133:162:neureka.Tsr _trim(neureka.Tsr,int[],boolean) -> b
    168:172:java.lang.String stringify(java.lang.String[]) -> stringify
    177:177:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    182:182:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    157:157:int lambda$_trim$17(java.lang.Integer) -> a
    156:156:int lambda$_trim$16(java.lang.Integer) -> b
    155:155:int lambda$_trim$15(java.lang.Integer) -> c
    154:154:int lambda$_trim$14(java.lang.Integer) -> d
    153:153:int lambda$_trim$13(java.lang.Integer) -> e
    125:125:int lambda$_pad$12(java.lang.Integer) -> f
    124:124:int lambda$_pad$11(java.lang.Integer) -> g
    123:123:int lambda$_pad$10(java.lang.Integer) -> h
    122:122:int lambda$_pad$9(java.lang.Integer) -> i
    121:121:int lambda$_pad$8(java.lang.Integer) -> j
    83:83:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    66:79:neureka.Tsr lambda$new$6(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    47:60:neureka.autograd.ADAgent lambda$new$5(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    60:60:neureka.Tsr lambda$new$4(int,int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    56:58:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    43:43:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    42:42:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    41:41:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    22:22:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.Randomization -> neureka.backend.standard.operations.other.Randomization:
    24:119:void <init>() -> <init>
    123:127:java.lang.String stringify(java.lang.String[]) -> stringify
    132:132:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    137:137:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    90:104:void lambda$new$10(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    105:111:void lambda$new$9(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,int,int) -> a
    95:101:void lambda$new$8(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,int,int) -> b
    75:78:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    70:70:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    58:65:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    55:55:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    46:46:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$3(neureka.Tsr[],double,int) -> a
    47:51:double lambda$new$2(double,int[]) -> a
    36:36:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$1(neureka.Tsr[],double,int) -> b
    37:42:double lambda$new$0(double,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.other.Reshape -> neureka.backend.standard.operations.other.Reshape:
    boolean $assertionsDisabled -> a
    28:79:void <init>() -> <init>
    83:92:neureka.Tsr reshaped(neureka.Tsr,int[],boolean) -> reshaped
    98:127:void makeFit(neureka.Tsr[],boolean) -> makeFit
    132:146:int[] invert(int[]) -> invert
    151:179:java.lang.String stringify(java.lang.String[]) -> stringify
    184:184:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    190:190:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    155:157:java.lang.Boolean lambda$stringify$8(java.lang.String) -> a
    71:71:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    59:68:neureka.Tsr lambda$new$6(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    48:53:neureka.autograd.ADAgent lambda$new$5(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    53:53:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    52:52:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> b
    43:43:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    42:42:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    41:41:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    23:23:void <clinit>() -> <clinit>
neureka.calculus.CalcUtil -> neureka.calculus.CalcUtil:
    org.slf4j.Logger _LOG -> a
    boolean $assertionsDisabled -> b
    31:31:void <init>() -> <init>
    40:40:neureka.Tsr defaultRecursiveExecution(neureka.calculus.Function,neureka.backend.api.ExecutionCall) -> defaultRecursiveExecution
    49:56:neureka.Tsr executeFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor) -> executeFor
    1068:1102:neureka.Tsr _deepActivation(neureka.backend.api.ExecutionCall,neureka.calculus.Function[],neureka.backend.api.Operation,boolean,boolean,neureka.calculus.RecursiveExecutor):68:102 -> executeFor
    1068:1102:neureka.Tsr executeFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor):54 -> executeFor
    118:132:int _indexOfFoundDerivative(neureka.Tsr[]) -> a
    142:246:neureka.Tsr _deepDerivative(neureka.backend.api.ExecutionCall,neureka.calculus.Function[],neureka.backend.api.Operation,neureka.calculus.RecursiveExecutor) -> a
    253:295:void recursiveExecution(neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor) -> recursiveExecution
    321:377:neureka.Tsr _recursiveReductionOf(neureka.backend.api.ExecutionCall,java.util.function.Consumer,neureka.calculus.RecursiveExecutor) -> a
    388:413:neureka.Tsr[] srcActivation(neureka.Tsr[],int,int,int,neureka.calculus.Function[]) -> srcActivation
    361:361:neureka.Tsr lambda$_recursiveReductionOf$6(java.util.function.Consumer,neureka.calculus.RecursiveExecutor,neureka.backend.api.ExecutionCall) -> a
    343:343:void lambda$_recursiveReductionOf$5(neureka.Tsr) -> a
    337:341:void lambda$_recursiveReductionOf$4(neureka.devices.Device,neureka.Tsr) -> a
    263:292:void lambda$recursiveExecution$3(neureka.backend.api.ExecutionCall) -> a
    143:226:neureka.Tsr lambda$_deepDerivative$2(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation,neureka.calculus.Function[],neureka.calculus.RecursiveExecutor) -> a
    86:86:java.lang.String[] lambda$_deepActivation$1(int) -> a
    86:86:java.lang.String lambda$_deepActivation$0(int) -> b
    31:33:void <clinit>() -> <clinit>
neureka.calculus.CallExecutor -> neureka.calculus.CallExecutor:
    neureka.Tsr execute(neureka.backend.api.ExecutionCall) -> execute
neureka.calculus.Function -> neureka.calculus.Function:
    81:81:neureka.calculus.Function of(java.lang.String) -> of
    95:95:neureka.calculus.Function of(java.lang.String,boolean) -> of
    neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    boolean isDoingAD() -> isDoingAD
    boolean isFlat() -> isFlat
    neureka.backend.api.Operation getOperation() -> getOperation
    boolean dependsOn(int) -> dependsOn
    neureka.calculus.Function getDerivative(int) -> getDerivative
    java.util.List getSubFunctions() -> getSubFunctions
    136:141:java.util.List getAllFunctions() -> getAllFunctions
    145:151:int numberOfArgs() -> numberOfArgs
    156:156:double call(double) -> call
    157:157:double invoke(double) -> invoke
    double call(double[],int) -> call
    162:162:double invoke(double[],int) -> invoke
    165:165:double call(double[]) -> call
    166:166:double invoke(double[]) -> invoke
    double derive(double[],int,int) -> derive
    double derive(double[],int) -> derive
    175:175:neureka.Tsr call(neureka.backend.api.Call$Builder) -> call
    176:176:neureka.Tsr invoke(neureka.backend.api.Call$Builder) -> invoke
    178:182:neureka.Tsr execute(neureka.backend.api.Call) -> execute
    191:191:neureka.calculus.Function$CallOptions callWith(neureka.calculus.args.Arg[]) -> callWith
    194:194:neureka.calculus.Function$CallOptions callWith(neureka.calculus.args.Args) -> callWith
    201:201:neureka.Tsr call(neureka.calculus.args.Args,neureka.Tsr[]) -> call
    202:202:neureka.Tsr invoke(neureka.calculus.args.Args,neureka.Tsr[]) -> invoke
    neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    205:205:neureka.Tsr execute(neureka.Tsr[]) -> execute
    206:206:neureka.Tsr execute(neureka.Tsr[],int) -> execute
    207:207:neureka.Tsr executeDerive(neureka.Tsr[],int,int) -> executeDerive
    208:208:neureka.Tsr executeDerive(neureka.Tsr[],int) -> executeDerive
    212:212:neureka.Tsr call(neureka.Tsr) -> call
    213:213:neureka.Tsr invoke(neureka.Tsr) -> invoke
    215:215:neureka.Tsr call(java.util.List) -> call
    216:216:neureka.Tsr invoke(java.util.List) -> invoke
    220:220:neureka.Tsr call(neureka.Tsr[],int) -> call
    221:221:neureka.Tsr invoke(neureka.Tsr[],int) -> invoke
    223:223:neureka.Tsr call(neureka.Tsr[]) -> call
    224:224:neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    228:228:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    229:229:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    233:233:neureka.Tsr derive(java.util.List,int,int) -> derive
    234:234:neureka.Tsr derive(java.util.List,int) -> derive
    java.lang.String toString() -> toString
    148:148:neureka.calculus.implementations.FunctionInput lambda$numberOfArgs$1(neureka.calculus.Function) -> a
    147:147:boolean lambda$numberOfArgs$0(neureka.calculus.Function) -> b
neureka.calculus.Function$1 -> neureka.calculus.Function$1:
    neureka.calculus.args.Args val$arguments -> a
    neureka.calculus.Function this$0 -> b
    194:194:void <init>(neureka.calculus.Function,neureka.calculus.args.Args) -> <init>
    195:195:neureka.Tsr call(neureka.Tsr[]) -> call
    196:196:neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    197:197:neureka.Tsr execute(neureka.Tsr[]) -> execute
neureka.calculus.Function$CallOptions -> neureka.calculus.Function$CallOptions:
    neureka.Tsr call(neureka.Tsr[]) -> call
    neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    neureka.Tsr execute(neureka.Tsr[]) -> execute
neureka.calculus.FunctionCache -> neureka.calculus.FunctionCache:
    org.slf4j.Logger _log -> a
    java.util.Map _functionCache -> b
    43:47:void <init>() -> <init>
    50:59:void put(neureka.calculus.Function) -> put
    62:63:neureka.calculus.Function get(java.lang.String,boolean) -> get
    67:68:boolean has(java.lang.String,boolean) -> has
    72:72:java.lang.String toString() -> toString
neureka.calculus.Functions -> neureka.calculus.Functions:
    neureka.calculus.Function dimTrim -> a
    neureka.calculus.Function idy -> b
    neureka.calculus.Function conv -> c
    neureka.calculus.Function plus -> d
    neureka.calculus.Function plusAssign -> e
    neureka.calculus.Function minus -> f
    neureka.calculus.Function minusAssign -> g
    neureka.calculus.Function div -> h
    neureka.calculus.Function divAssign -> i
    neureka.calculus.Function pow -> j
    neureka.calculus.Function powAssign -> k
    neureka.calculus.Function mul -> l
    neureka.calculus.Function mulAssign -> m
    neureka.calculus.Function add -> n
    neureka.calculus.Function addAssign -> o
    neureka.calculus.Function mod -> p
    neureka.calculus.Function modAssign -> q
    neureka.calculus.Function neg -> r
    neureka.calculus.Function matMul -> s
    29:49:void <init>(boolean) -> <init>
    52:52:neureka.calculus.Function getDimTrim() -> getDimTrim
    54:54:neureka.calculus.Function getIdy() -> getIdy
    56:56:neureka.calculus.Function getConv() -> getConv
    58:58:neureka.calculus.Function getPlus() -> getPlus
    60:60:neureka.calculus.Function getPlusAssign() -> getPlusAssign
    62:62:neureka.calculus.Function getMinus() -> getMinus
    64:64:neureka.calculus.Function getMinusAssign() -> getMinusAssign
    66:66:neureka.calculus.Function getDiv() -> getDiv
    68:68:neureka.calculus.Function getDivAssign() -> getDivAssign
    70:70:neureka.calculus.Function getPow() -> getPow
    72:72:neureka.calculus.Function getPowAssign() -> getPowAssign
    74:74:neureka.calculus.Function getMul() -> getMul
    76:76:neureka.calculus.Function getMulAssign() -> getMulAssign
    78:78:neureka.calculus.Function getAdd() -> getAdd
    80:80:neureka.calculus.Function getAddAssign() -> getAddAssign
    82:82:neureka.calculus.Function getMod() -> getMod
    84:84:neureka.calculus.Function getModAssign() -> getModAssign
    86:86:neureka.calculus.Function getNeg() -> getNeg
    89:89:neureka.calculus.Function dimTrim() -> dimTrim
    93:93:neureka.calculus.Function idy() -> idy
    97:97:neureka.calculus.Function conv() -> conv
    101:101:neureka.calculus.Function plus() -> plus
    105:105:neureka.calculus.Function plusAssign() -> plusAssign
    109:109:neureka.calculus.Function minus() -> minus
    113:113:neureka.calculus.Function minusAssign() -> minusAssign
    117:117:neureka.calculus.Function div() -> div
    121:121:neureka.calculus.Function divAssign() -> divAssign
    125:125:neureka.calculus.Function pow() -> pow
    129:129:neureka.calculus.Function powAssign() -> powAssign
    133:133:neureka.calculus.Function mul() -> mul
    137:137:neureka.calculus.Function mulAssign() -> mulAssign
    141:141:neureka.calculus.Function add() -> add
    145:145:neureka.calculus.Function addAssign() -> addAssign
    149:149:neureka.calculus.Function mod() -> mod
    153:153:neureka.calculus.Function modAssign() -> modAssign
    157:157:neureka.calculus.Function neg() -> neg
    160:160:neureka.calculus.Function matMul() -> matMul
    164:173:java.lang.String toString() -> toString
    167:169:java.lang.String lambda$toString$0(java.lang.reflect.Field) -> a
neureka.calculus.RecursiveExecutor -> neureka.calculus.RecursiveExecutor:
    neureka.Tsr execute(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> execute
neureka.calculus.args.Arg -> neureka.calculus.args.Arg:
    java.lang.Object _value -> a
    11:11:void <init>(java.lang.Object) -> <init>
    13:13:java.lang.Object get() -> get
    17:17:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    69:70:java.lang.String toString() -> toString
neureka.calculus.args.Arg$DerivIdx -> neureka.calculus.args.Arg$DerivIdx:
    37:37:neureka.calculus.args.Arg$DerivIdx of(int) -> of
    38:38:void <init>(int) -> <init>
neureka.calculus.args.Arg$Derivative -> neureka.calculus.args.Arg$Derivative:
    22:22:neureka.calculus.args.Arg$Derivative of(neureka.Tsr) -> of
    23:23:void <init>(neureka.Tsr) -> <init>
neureka.calculus.args.Arg$Ends -> neureka.calculus.args.Arg$Ends:
    42:42:neureka.calculus.args.Arg$Ends of(int[]) -> of
    43:43:void <init>(int[]) -> <init>
neureka.calculus.args.Arg$MinRank -> neureka.calculus.args.Arg$MinRank:
    63:63:neureka.calculus.args.Arg$MinRank of(int) -> of
    64:64:void <init>(int) -> <init>
neureka.calculus.args.Arg$TargetDevice -> neureka.calculus.args.Arg$TargetDevice:
    47:47:neureka.calculus.args.Arg$TargetDevice of(neureka.devices.Device) -> of
    48:48:void <init>(neureka.devices.Device) -> <init>
neureka.calculus.args.Arg$VarIdx -> neureka.calculus.args.Arg$VarIdx:
    58:58:neureka.calculus.args.Arg$VarIdx of(int) -> of
    59:59:void <init>(int) -> <init>
neureka.calculus.args.Args -> neureka.calculus.args.Args:
    6:6:void <init>() -> <init>
    9:13:neureka.calculus.args.Args of(neureka.calculus.args.Arg[]) -> of
    17:18:java.lang.Object valOf(java.lang.Class) -> valOf
    23:23:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    28:28:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
neureka.calculus.assembly.FunctionBuilder -> neureka.calculus.assembly.FunctionBuilder:
    org.slf4j.Logger _LOG -> a
    java.util.regex.Pattern _variablePattern -> b
    java.util.regex.Pattern _inputPattern -> c
    java.util.regex.Pattern _constantPattern -> d
    java.util.regex.Pattern _reshapePattern -> e
    neureka.backend.api.BackendContext _context -> f
    boolean $assertionsDisabled -> g
    44:44:void <init>(neureka.backend.api.BackendContext) -> <init>
    54:62:neureka.calculus.Function build(neureka.backend.api.Operation,int,boolean) -> build
    72:87:neureka.calculus.Function build(java.lang.String,boolean) -> build
    98:205:neureka.calculus.Function _build(java.lang.String,boolean) -> a
    210:245:neureka.calculus.Function _buildFunction(java.lang.String,boolean) -> b
    254:307:neureka.calculus.Function _buildOperators(java.util.List,java.util.List,boolean) -> a
    311:323:java.util.List _groupAccordingToArity(int,java.util.List,java.lang.String) -> a
    314:314:int lambda$_groupAccordingToArity$2(int) -> a
    59:59:java.lang.String lambda$build$1(int) -> b
    57:57:int lambda$build$0(int) -> c
    27:36:void <clinit>() -> <clinit>
neureka.calculus.assembly.ParseUtil -> neureka.calculus.assembly.ParseUtil:
    boolean $assertionsDisabled -> a
    15:15:void <init>() -> <init>
    19:23:int numberOfOperationsWithin(java.util.List) -> numberOfOperationsWithin
    28:36:java.lang.String parsedOperation(java.lang.String,int) -> parsedOperation
    41:68:java.lang.String findComponentIn(java.lang.String,int) -> findComponentIn
    1073:1076:boolean _isOperationComponent(java.lang.String,int,int):73:76 -> findComponentIn
    1073:1076:java.lang.String findComponentIn(java.lang.String,int):63 -> findComponentIn
    81:104:java.util.List findParametersIn(java.lang.String,int) -> findParametersIn
    109:111:boolean isAnOperation(java.lang.String) -> isAnOperation
    121:128:java.lang.String groupBy(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> groupBy
    133:133:boolean isForbiddenChar(char) -> a
    139:178:java.lang.String cleanedHeadAndTail(java.lang.String) -> cleanedHeadAndTail
    183:236:java.lang.String unpackAndCorrect(java.lang.String) -> unpackAndCorrect
    247:257:java.lang.String assumptionBasedOn(java.lang.String) -> assumptionBasedOn
    269:303:double similarity(java.lang.String,java.lang.String) -> similarity
    15:15:void <clinit>() -> <clinit>
neureka.calculus.implementations.FunctionConstant -> neureka.calculus.implementations.FunctionConstant:
    double _value -> a
    24:24:void <init>() -> <init>
    28:28:double value() -> value
    33:33:boolean isFlat() -> isFlat
    36:36:boolean isDoingAD() -> isDoingAD
    39:39:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    42:42:boolean dependsOn(int) -> dependsOn
    45:45:neureka.calculus.Function getDerivative(int) -> getDerivative
    48:48:java.util.List getSubFunctions() -> getSubFunctions
    53:66:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    72:72:double call(double[],int) -> call
    75:75:double derive(double[],int) -> derive
    78:78:double derive(double[],int,int) -> derive
    84:87:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    93:93:java.lang.String toString() -> toString
    24:24:neureka.backend.api.Operation getOperation() -> getOperation
neureka.calculus.implementations.FunctionInput -> neureka.calculus.implementations.FunctionInput:
    int _index -> a
    31:31:void <init>() -> <init>
    37:37:boolean providesGradient() -> providesGradient
    42:42:boolean isFlat() -> isFlat
    45:45:boolean isDoingAD() -> isDoingAD
    48:48:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    51:51:boolean dependsOn(int) -> dependsOn
    54:54:neureka.calculus.Function getDerivative(int) -> getDerivative
    57:57:java.util.List getSubFunctions() -> getSubFunctions
    64:81:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    104:107:double call(double[],int) -> call
    111:111:double derive(double[],int) -> derive
    115:118:double derive(double[],int,int) -> derive
    125:130:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    1086:1097:neureka.Tsr _extract(neureka.Tsr):86:97 -> execute
    1086:1097:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):130 -> execute
    136:136:java.lang.String toString() -> toString
    138:138:int index() -> index
    31:31:neureka.backend.api.Operation getOperation() -> getOperation
neureka.calculus.implementations.FunctionNode -> neureka.calculus.implementations.FunctionNode:
    neureka.backend.api.Operation _operation -> a
    boolean _isFlat -> b
    boolean _isDoingAD -> c
    neureka.calculus.Function[] _src -> d
    44:64:void <init>(neureka.backend.api.Operation,java.util.List,boolean) -> <init>
    70:70:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    78:81:java.lang.String toString() -> toString
    87:88:boolean dependsOn(int) -> dependsOn
    92:92:neureka.calculus.Function getDerivative(int) -> getDerivative
    95:95:java.util.List getSubFunctions() -> getSubFunctions
    102:102:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    1201:1219:neureka.Tsr preprocess(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):201:219 -> execute
    1201:1219:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):102 -> execute
    1225:1234:neureka.Tsr commit(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):225:234 -> execute
    1225:1234:neureka.Tsr preprocess(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):215 -> execute
    1225:1234:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):102 -> execute
    133:136:neureka.Tsr _execute(neureka.backend.api.ExecutionCall) -> a
    176:176:double call(double[],int) -> call
    181:181:double derive(double[],int,int) -> derive
    186:186:double derive(double[],int) -> derive
    189:189:neureka.backend.api.Operation getOperation() -> getOperation
    191:191:boolean isFlat() -> isFlat
    193:193:boolean isDoingAD() -> isDoingAD
    242:246:void attachGraph(neureka.Tsr[],neureka.calculus.Function,neureka.autograd.GraphLock) -> a
    244:244:neureka.Tsr lambda$attachGraph$4(neureka.Tsr) -> a
    106:125:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args) -> a
    2148:2152:neureka.devices.Device _deviceFor(neureka.Tsr[]):148:152 -> a
    2148:2152:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args):109 -> a
    2157:2169:boolean _shareGuestDevice(neureka.Tsr[]):157:169 -> a
    2157:2169:neureka.devices.Device _deviceFor(neureka.Tsr[]):150 -> a
    2157:2169:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args):109 -> a
    122:122:neureka.Tsr lambda$execute$2(neureka.backend.api.ExecutionCall) -> b
    81:81:java.lang.String[] lambda$toString$1(int) -> a
    80:80:java.lang.String lambda$toString$0(neureka.calculus.Function) -> a
    27:27:void <clinit>() -> <clinit>
neureka.calculus.implementations.FunctionVariable -> neureka.calculus.implementations.FunctionVariable:
    boolean _providesGradient -> a
    27:29:void <init>() -> <init>
    31:31:boolean providesGradient() -> providesGradient
    34:34:boolean isFlat() -> isFlat
    37:37:boolean isDoingAD() -> isDoingAD
    40:40:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    43:43:boolean dependsOn(int) -> dependsOn
    46:46:neureka.calculus.Function getDerivative(int) -> getDerivative
    49:49:java.util.List getSubFunctions() -> getSubFunctions
    55:56:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    61:66:double call(double[],int) -> call
    70:70:double derive(double[],int) -> derive
    74:75:double derive(double[],int,int) -> derive
    81:99:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    106:106:java.lang.String toString() -> toString
    27:27:neureka.backend.api.Operation getOperation() -> getOperation
neureka.common.composition.AbstractComponentOwner -> neureka.common.composition.AbstractComponentOwner:
    neureka.common.composition.Component[] _components -> a
    74:79:void <init>() -> <init>
    81:81:java.lang.Object _this() -> _this
    84:85:void _setComps(neureka.common.composition.Component[]) -> a
    88:121:void _addOrRemoveComp(neureka.common.composition.Component,boolean) -> a
    124:138:void _remove(neureka.common.composition.Component) -> a
    141:158:void _add(neureka.common.composition.Component) -> b
    173:180:int _orderOf(neureka.common.composition.Component) -> c
    195:207:void _transferFrom(neureka.common.composition.AbstractComponentOwner) -> _transferFrom
    213:213:void _deleteComponents() -> _deleteComponents
    227:232:neureka.common.composition.Component get(java.lang.Class) -> get
    246:256:java.util.List getAll(java.lang.Class) -> getAll
    269:272:java.lang.Object remove(java.lang.Class) -> remove
    282:282:boolean has(java.lang.Class) -> has
    296:304:java.lang.Object set(neureka.common.composition.Component) -> set
    308:309:void _set(neureka.common.composition.Component) -> _set
    neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
    352:357:boolean forComponent(java.lang.Class,java.util.function.Consumer) -> forComponent
    74:74:void access$000(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component) -> a
    74:74:void access$100(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component) -> b
neureka.common.composition.AbstractComponentOwner$1 -> neureka.common.composition.AbstractComponentOwner$1:
    neureka.common.composition.Component val$component -> a
    boolean[] val$changeExecuted -> b
    neureka.common.composition.AbstractComponentOwner this$0 -> c
    92:92:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component,boolean[]) -> <init>
    93:93:java.lang.Object getOldOwner() -> getOldOwner
    94:94:java.lang.Object getNewOwner() -> getNewOwner
    96:98:boolean executeChange() -> executeChange
neureka.common.composition.AbstractComponentOwner$2 -> neureka.common.composition.AbstractComponentOwner$2:
    neureka.common.composition.Component val$component -> a
    boolean[] val$changeExecuted -> b
    neureka.common.composition.AbstractComponentOwner this$0 -> c
    108:108:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component,boolean[]) -> <init>
    109:109:java.lang.Object getOldOwner() -> getOldOwner
    110:110:java.lang.Object getNewOwner() -> getNewOwner
    112:114:boolean executeChange() -> executeChange
neureka.common.composition.AbstractComponentOwner$3 -> neureka.common.composition.AbstractComponentOwner$3:
    neureka.common.composition.AbstractComponentOwner val$other -> a
    neureka.common.composition.AbstractComponentOwner this$0 -> b
    199:199:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.AbstractComponentOwner) -> <init>
    200:200:java.lang.Object getOldOwner() -> getOldOwner
    201:201:java.lang.Object getNewOwner() -> getNewOwner
    202:202:boolean executeChange() -> executeChange
neureka.common.composition.Component -> neureka.common.composition.Component:
    boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.common.composition.Component$IsBeing -> neureka.common.composition.Component$IsBeing:
    neureka.common.composition.Component$IsBeing REMOVED -> REMOVED
    neureka.common.composition.Component$IsBeing ADDED -> ADDED
    neureka.common.composition.Component$IsBeing REPLACED -> REPLACED
    neureka.common.composition.Component$IsBeing UPDATED -> UPDATED
    neureka.common.composition.Component$IsBeing[] $VALUES -> a
    21:21:neureka.common.composition.Component$IsBeing[] values() -> values
    21:21:neureka.common.composition.Component$IsBeing valueOf(java.lang.String) -> valueOf
    21:21:void <init>(java.lang.String,int) -> <init>
    21:21:void <clinit>() -> <clinit>
neureka.common.composition.Component$OwnerChangeRequest -> neureka.common.composition.Component$OwnerChangeRequest:
    java.lang.Object getOldOwner() -> getOldOwner
    java.lang.Object getNewOwner() -> getNewOwner
    boolean executeChange() -> executeChange
    65:68:neureka.common.composition.Component$IsBeing type() -> type
neureka.common.utility.DataConverter -> neureka.common.utility.DataConverter:
    org.slf4j.Logger _LOG -> a
    java.util.Map _converters -> b
    neureka.common.utility.DataConverter _instance -> c
    96:96:neureka.common.utility.DataConverter instance() -> instance
    104:170:void <init>() -> <init>
    186:200:void _set(java.lang.Class,java.lang.Class,neureka.common.utility.DataConverter$Conversion) -> a
    213:237:java.lang.Object convert(java.lang.Object,java.lang.Class) -> convert
    149:149:long[] lambda$new$5(java.util.List) -> a
    149:149:long lambda$new$4(java.lang.Object) -> a
    148:148:double[] lambda$new$3(java.util.List) -> b
    148:148:double lambda$new$2(java.lang.Object) -> b
    147:147:int[] lambda$new$1(java.util.List) -> c
    147:147:int lambda$new$0(java.lang.Object) -> c
    62:89:void <clinit>() -> <clinit>
neureka.common.utility.DataConverter$Conversion -> neureka.common.utility.DataConverter$a:
    java.lang.Object go(java.lang.Object) -> go
neureka.common.utility.DataConverter$ForTensor -> neureka.common.utility.DataConverter$ForTensor:
    neureka.ndim.config.NDConfiguration$IndexToIndexFunction _access -> a
    int _size -> b
    251:254:void <init>(neureka.Tsr) -> <init>
    257:261:float[] toFloatArray(java.util.function.Function) -> toFloatArray
    265:269:byte[] toByteArray(java.util.function.Function) -> toByteArray
    273:277:long[] toLongArray(java.util.function.Function) -> toLongArray
    281:285:int[] toIntArray(java.util.function.Function) -> toIntArray
    289:293:double[] toDoubleArray(java.util.function.Function) -> toDoubleArray
    297:301:short[] toShortArray(java.util.function.Function) -> toShortArray
    305:309:java.lang.Object[] toObjectArray(java.util.function.Function) -> toObjectArray
    308:308:void lambda$toObjectArray$6(java.lang.Object[],java.util.function.Function,int) -> a
    300:300:void lambda$toShortArray$5(short[],java.util.function.Function,int) -> a
    292:292:void lambda$toDoubleArray$4(double[],java.util.function.Function,int) -> a
    284:284:void lambda$toIntArray$3(int[],java.util.function.Function,int) -> a
    276:276:void lambda$toLongArray$2(long[],java.util.function.Function,int) -> a
    268:268:void lambda$toByteArray$1(byte[],java.util.function.Function,int) -> a
    260:260:void lambda$toFloatArray$0(float[],java.util.function.Function,int) -> a
neureka.common.utility.DataConverter$Utility -> neureka.common.utility.DataConverter$Utility:
    319:319:void <init>() -> <init>
    323:327:float[] objFloatsToPrimFloats(java.lang.Float[]) -> objFloatsToPrimFloats
    332:336:double[] objDoublesToPrimDoubles(java.lang.Double[]) -> objDoublesToPrimDoubles
    341:345:int[] objIntsToPrimInts(java.lang.Integer[]) -> objIntsToPrimInts
    350:354:long[] objLongsToPrimLongs(java.lang.Long[]) -> objLongsToPrimLongs
    359:363:short[] objShortsToPrimShorts(java.lang.Short[]) -> objShortsToPrimShorts
    368:372:byte[] objBytesToPrimBytes(java.lang.Byte[]) -> objBytesToPrimBytes
    377:381:boolean[] objBooleansToPrimBooleans(java.lang.Boolean[]) -> objBooleansToPrimBooleans
    386:390:char[] objCharsToPrimChars(java.lang.Character[]) -> objCharsToPrimChars
    395:395:double[] newSeededDoubleArray(java.lang.String,int) -> newSeededDoubleArray
    400:400:double[] newSeededDoubleArray(long,int) -> newSeededDoubleArray
    405:405:double[] seededDoubleArray(double[],java.lang.String) -> seededDoubleArray
    410:413:double[] seededDoubleArray(double[],long) -> seededDoubleArray
    418:418:float[] newSeededFloatArray(java.lang.String,int) -> newSeededFloatArray
    423:423:float[] newSeededFloatArray(long,int) -> newSeededFloatArray
    428:428:float[] seededFloatArray(float[],java.lang.String) -> seededFloatArray
    433:436:float[] seededFloatArray(float[],long) -> seededFloatArray
    441:441:int[] seededIntArray(int[],java.lang.String) -> seededIntArray
    446:449:int[] seededIntArray(int[],long) -> seededIntArray
    454:454:short[] seededShortArray(short[],java.lang.String) -> seededShortArray
    459:462:short[] seededShortArray(short[],long) -> seededShortArray
    467:467:byte[] seededByteArray(byte[],java.lang.String) -> seededByteArray
    472:475:byte[] seededByteArray(byte[],long) -> seededByteArray
    480:480:long[] seededLongArray(long[],java.lang.String) -> seededLongArray
    485:488:long[] seededLongArray(long[],long) -> seededLongArray
    493:493:boolean[] seededBooleanArray(boolean[],java.lang.String) -> seededBooleanArray
    498:501:boolean[] seededBooleanArray(boolean[],long) -> seededBooleanArray
    506:506:char[] seededCharacterArray(char[],java.lang.String) -> seededCharacterArray
    511:514:char[] seededCharacterArray(char[],long) -> seededCharacterArray
    520:523:long _longStringHash(java.lang.String) -> a
    528:531:short[] byteToShort(byte[]) -> byteToShort
    536:539:java.math.BigInteger[] byteToBigInteger(byte[]) -> byteToBigInteger
    544:547:float[] doubleToFloat(double[]) -> doubleToFloat
    552:555:byte[] doubleToByte(double[]) -> doubleToByte
    560:563:short[] doubleToShort(double[]) -> doubleToShort
    568:571:long[] doubleToLong(double[]) -> doubleToLong
    576:579:double[] floatToDouble(float[]) -> floatToDouble
    584:587:byte[] floatToByte(float[]) -> floatToByte
    592:595:short[] floatToShort(float[]) -> floatToShort
    600:603:long[] floatToLong(float[]) -> floatToLong
    608:611:double[] shortToDouble(short[]) -> shortToDouble
    616:619:double[] byteToDouble(byte[]) -> byteToDouble
    624:627:float[] byteToFloat(byte[]) -> byteToFloat
    632:635:float[] shortToFloat(short[]) -> shortToFloat
    640:643:int[] byteToInt(byte[]) -> byteToInt
    648:651:int[] shortToInt(short[]) -> shortToInt
    656:659:byte[] shortToByte(short[]) -> shortToByte
    664:667:long[] byteToLong(byte[]) -> byteToLong
    672:675:long[] shortToLong(short[]) -> shortToLong
    680:683:java.math.BigInteger[] shortToBigInteger(short[]) -> shortToBigInteger
    688:691:float[] intToFloat(int[]) -> intToFloat
    696:699:int[] floatToInt(float[]) -> floatToInt
    704:707:java.math.BigInteger[] floatToBigInteger(float[]) -> floatToBigInteger
    712:715:int[] doubleToInt(double[]) -> doubleToInt
    720:723:java.math.BigInteger[] doubleToBigInteger(double[]) -> doubleToBigInteger
    728:731:double[] intToDouble(int[]) -> intToDouble
    736:739:long[] intToLong(int[]) -> intToLong
    744:747:short[] intToShort(int[]) -> intToShort
    752:755:byte[] intToByte(int[]) -> intToByte
    760:763:java.math.BigInteger[] intToBigInteger(int[]) -> intToBigInteger
    768:771:byte[] longToByte(long[]) -> longToByte
    776:779:short[] longToShort(long[]) -> longToShort
    784:787:int[] longToInt(long[]) -> longToInt
    792:795:float[] longToFloat(long[]) -> longToFloat
    800:803:double[] longToDouble(long[]) -> longToDouble
    808:811:java.math.BigInteger[] longToBigInteger(long[]) -> longToBigInteger
    816:823:double[] objectsToDoubles(java.lang.Object[],int) -> objectsToDoubles
    828:833:float[] objectsToFloats(java.lang.Object[],int) -> objectsToFloats
    838:843:short[] objectsToShorts(java.lang.Object[],int) -> objectsToShorts
    848:853:byte[] objectsToBytes(java.lang.Object[],int) -> objectsToBytes
    858:863:long[] objectsToLongs(java.lang.Object[],int) -> objectsToLongs
    868:873:int[] objectsToInts(java.lang.Object[],int) -> objectsToInts
neureka.common.utility.ListReader -> neureka.common.utility.ListReader:
    java.lang.Class _type -> a
    java.util.List _readers -> b
    int _size -> c
    26:53:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function) -> <init>
    1058:1070:java.lang.Class _findType(java.util.List):58:70 -> <init>
    1058:1070:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function):43 -> <init>
    1074:1082:int _findSize(java.util.List,int):74:82 -> <init>
    1074:1082:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function):44 -> <init>
    55:55:java.lang.Class getType() -> getType
    82:82:java.lang.Integer lambda$_findSize$10(neureka.common.utility.ListReader) -> a
    79:79:boolean lambda$_findSize$9(int,java.lang.Integer) -> a
    76:76:boolean lambda$_findSize$8(int,java.lang.Integer) -> b
    74:74:java.util.stream.Stream lambda$_findSize$7(java.util.List) -> a
    74:74:java.lang.Integer lambda$_findSize$6(neureka.common.utility.ListReader) -> b
    66:66:boolean lambda$_findType$5(java.lang.Class,java.lang.Class) -> a
    60:60:boolean lambda$_findType$4(java.lang.Class,java.lang.Class) -> b
    58:58:java.util.stream.Stream lambda$_findType$3(java.util.List) -> b
    58:58:java.lang.Class lambda$_findType$2(neureka.common.utility.ListReader) -> c
    40:40:neureka.common.utility.ListReader lambda$new$1(int,java.util.List,java.util.List,java.util.function.Function,java.lang.Object) -> a
    33:33:boolean lambda$new$0(java.lang.Object) -> a
    1086:1089:boolean _isLeave(java.lang.Object):86:89 -> a
    1086:1089:boolean lambda$new$0(java.lang.Object):33 -> a
neureka.common.utility.Messages -> neureka.common.utility.Messages:
    20:20:void <init>() -> <init>
    20:20:java.lang.String access$000(java.lang.String,java.lang.Object[]) -> a
    1203:1203:java.lang.String _format(java.lang.String,java.lang.Object[]):203:203 -> a
    1203:1203:java.lang.String access$000(java.lang.String,java.lang.Object[]):20 -> a
neureka.common.utility.Messages$Devices -> neureka.common.utility.Messages$Devices:
    172:172:void <init>() -> <init>
    175:177:java.lang.String couldNotFindSuitableAlgorithmFor(java.lang.Class) -> couldNotFindSuitableAlgorithmFor
    185:188:java.lang.String couldNotFindSuitableImplementationFor(neureka.backend.api.Algorithm,java.lang.Class) -> couldNotFindSuitableImplementationFor
neureka.common.utility.Messages$OpenCL -> neureka.common.utility.Messages$OpenCL:
    27:27:void <init>() -> <init>
    30:34:java.lang.String clContextCreationFailed() -> clContextCreationFailed
    39:41:java.lang.String clContextCouldNotFindAnyDevices() -> clContextCouldNotFindAnyDevices
    70:105:neureka.common.utility.Messages$OpenCL$Tips findTip() -> findTip
neureka.common.utility.Messages$OpenCL$Tips -> neureka.common.utility.Messages$OpenCL$Tips:
    neureka.common.utility.Messages$OpenCL$Tips UBUNTU -> UBUNTU
    neureka.common.utility.Messages$OpenCL$Tips FEDORA -> FEDORA
    neureka.common.utility.Messages$OpenCL$Tips WINDOWS -> WINDOWS
    neureka.common.utility.Messages$OpenCL$Tips UNKNOWN -> UNKNOWN
    java.lang.String HOW_TO_INSTALL_OPENCL -> HOW_TO_INSTALL_OPENCL
    java.lang.String HOW_TO_INSTALL_OPENCL_DRIVERS -> a
    neureka.common.utility.Messages$OpenCL$Tips[] $VALUES -> b
    108:108:neureka.common.utility.Messages$OpenCL$Tips[] values() -> values
    108:108:neureka.common.utility.Messages$OpenCL$Tips valueOf(java.lang.String) -> valueOf
    129:132:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    135:137:java.lang.String bootstrapTip() -> bootstrapTip
    108:108:java.lang.String access$100(neureka.common.utility.Messages$OpenCL$Tips) -> a
    108:121:void <clinit>() -> <clinit>
neureka.common.utility.Messages$Operations -> neureka.common.utility.Messages$Operations:
    148:148:void <init>() -> <init>
    151:152:java.lang.String illegalStateFor(java.lang.String) -> illegalStateFor
    159:161:java.lang.String loaded(neureka.backend.api.Operation) -> loaded
neureka.common.utility.SettingsLoader -> neureka.common.utility.SettingsLoader:
    org.slf4j.Logger _LOG -> a
    java.lang.String _settings_source -> b
    java.lang.String _setup_source -> c
    55:55:void <init>() -> <init>
    62:99:void loadProperties(neureka.Neureka) -> loadProperties
    158:165:java.lang.Object tryGroovyClosureOn(java.lang.Object,java.lang.Object) -> tryGroovyClosureOn
    170:189:void tryGroovyScriptsOn(neureka.Neureka,java.util.function.Consumer) -> tryGroovyScriptsOn
    94:94:void lambda$loadProperties$23(neureka.Neureka$Settings,java.lang.Boolean) -> a
    93:93:void lambda$loadProperties$22(neureka.Neureka$Settings,java.lang.Class) -> a
    92:92:void lambda$loadProperties$21(neureka.Neureka$Settings,java.lang.Boolean) -> b
    91:91:void lambda$loadProperties$20(neureka.Neureka$Settings,java.lang.Boolean) -> c
    90:90:void lambda$loadProperties$19(neureka.Neureka$Settings,java.lang.String) -> a
    89:89:void lambda$loadProperties$18(neureka.Neureka$Settings,java.lang.String) -> b
    88:88:void lambda$loadProperties$17(neureka.Neureka$Settings,java.lang.String) -> c
    87:87:void lambda$loadProperties$16(neureka.Neureka$Settings,java.lang.Boolean) -> d
    86:86:void lambda$loadProperties$15(neureka.Neureka$Settings,java.lang.Boolean) -> e
    85:85:void lambda$loadProperties$14(neureka.Neureka$Settings,java.lang.Boolean) -> f
    84:84:void lambda$loadProperties$13(neureka.Neureka$Settings,java.lang.Boolean) -> g
    83:83:void lambda$loadProperties$12(neureka.Neureka$Settings,java.lang.Boolean) -> h
    82:82:void lambda$loadProperties$11(neureka.Neureka$Settings,java.lang.Integer) -> a
    81:81:void lambda$loadProperties$10(neureka.Neureka$Settings,java.lang.Boolean) -> i
    80:80:void lambda$loadProperties$9(neureka.Neureka$Settings,java.lang.Boolean) -> j
    79:79:void lambda$loadProperties$8(neureka.Neureka$Settings,java.lang.Boolean) -> k
    78:78:void lambda$loadProperties$7(neureka.Neureka$Settings,java.lang.Boolean) -> l
    77:77:void lambda$loadProperties$6(neureka.Neureka$Settings,java.lang.Integer) -> b
    76:76:void lambda$loadProperties$5(neureka.Neureka$Settings,java.lang.Boolean) -> m
    75:75:void lambda$loadProperties$4(neureka.Neureka$Settings,java.lang.Boolean) -> n
    74:74:void lambda$loadProperties$3(neureka.Neureka$Settings,java.lang.Boolean) -> o
    73:73:void lambda$loadProperties$2(neureka.Neureka$Settings,java.lang.Boolean) -> p
    72:72:void lambda$loadProperties$1(neureka.Neureka$Settings,java.lang.Boolean) -> q
    71:71:void lambda$loadProperties$0(neureka.Neureka$Settings,java.lang.Boolean) -> r
    55:55:org.slf4j.Logger access$000() -> a
    57:57:void <clinit>() -> <clinit>
neureka.common.utility.SettingsLoader$TypeChecker -> neureka.common.utility.SettingsLoader$a:
    java.util.Properties _properties -> a
    105:105:void <init>(java.util.Properties) -> <init>
    108:145:neureka.common.utility.SettingsLoader$TypeChecker checkAndAssign(java.lang.String,java.lang.Class,java.util.function.Consumer) -> a
neureka.devices.AbstractBaseDevice -> neureka.devices.AbstractBaseDevice:
    47:47:void <init>() -> <init>
    51:53:int size() -> size
    62:62:boolean isEmpty() -> isEmpty
    65:65:boolean contains(neureka.Tsr) -> contains
    68:68:java.util.Iterator iterator() -> iterator
    71:71:java.util.Spliterator spliterator() -> spliterator
neureka.devices.AbstractDevice -> neureka.devices.AbstractDevice:
    neureka.devices.DeviceCleaner _CLEANER -> a
    org.slf4j.Logger _log -> _log
    67:67:void <init>() -> <init>
    boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    85:102:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    107:108:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    111:111:void _cleaning(java.lang.Object,java.lang.Runnable) -> _cleaning
    124:127:neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    132:133:neureka.devices.Storage store(neureka.Tsr) -> store
    63:63:void <clinit>() -> <clinit>
neureka.devices.CustomDeviceCleaner -> neureka.devices.a:
    java.lang.ref.ReferenceQueue _referenceQueue -> a
    int _registered -> b
    java.util.List list -> c
    14:20:void <init>() -> <init>
    37:42:void register(java.lang.Object,java.lang.Runnable) -> a
    46:59:void run() -> run
    63:63:java.lang.String toString() -> toString
neureka.devices.CustomDeviceCleaner$ReferenceWithCleanup -> neureka.devices.a$a:
    java.lang.Runnable _action -> a
    27:29:void <init>(java.lang.Object,java.lang.Runnable,java.lang.ref.ReferenceQueue) -> <init>
    31:32:void cleanup() -> a
neureka.devices.Device -> neureka.devices.Device:
    82:82:neureka.devices.Device find(java.lang.String[]) -> find
    94:126:neureka.devices.Device find(java.lang.Class,java.lang.String[]) -> find
    void dispose() -> dispose
    neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    boolean has(neureka.Tsr) -> has
    neureka.devices.Device free(neureka.Tsr) -> free
    neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    neureka.devices.Device updateNDConf(neureka.Tsr) -> updateNDConf
    java.lang.Object valueFor(neureka.Tsr) -> valueFor
    java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    java.util.Collection getTensors() -> getTensors
    neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    227:236:neureka.calculus.Function optimizedFunctionOf(neureka.calculus.Function,java.lang.String) -> optimizedFunctionOf
    255:260:neureka.devices.Device$In use(neureka.Tsr,neureka.Tsr[]) -> use
    107:107:double lambda$find$0(java.lang.String,java.lang.String) -> a
neureka.devices.Device$1 -> neureka.devices.Device$1:
    java.util.List val$tensors -> a
    neureka.devices.Device val$thisDevice -> b
    260:260:void <init>(neureka.devices.Device,java.util.List,neureka.devices.Device) -> <init>
    263:269:java.lang.Object in(java.util.function.Supplier) -> in
neureka.devices.Device$In -> neureka.devices.Device$In:
    java.lang.Object in(java.util.function.Supplier) -> in
neureka.devices.DeviceCleaner -> neureka.devices.b:
    void register(java.lang.Object,java.lang.Runnable) -> a
neureka.devices.Storage -> neureka.devices.Storage:
    neureka.devices.Storage store(neureka.Tsr) -> store
    neureka.devices.Storage restore(neureka.Tsr) -> restore
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(neureka.Tsr) -> contains
neureka.devices.file.FileDevice -> neureka.devices.file.FileDevice:
    org.slf4j.Logger _LOG -> a
    java.util.Map _DEVICES -> b
    java.util.Map _stored -> c
    java.lang.String _directory -> d
    java.util.List _loadable -> e
    java.util.List _loaded -> f
    boolean $assertionsDisabled -> g
    55:59:neureka.devices.file.FileDevice at(java.lang.String) -> at
    44:65:void <init>(java.lang.String) -> <init>
    72:96:void _updateFolderView() -> a
    98:98:neureka.Tsr load(java.lang.String) -> load
    101:112:neureka.Tsr load(java.lang.String,java.util.Map) -> load
    116:116:neureka.devices.file.FileHead fileHeadOf(neureka.Tsr) -> fileHeadOf
    121:123:void dispose() -> dispose
    127:135:neureka.devices.Device restore(neureka.Tsr) -> restore
    141:156:neureka.devices.Device store(neureka.Tsr) -> store
    161:161:neureka.devices.file.FileDevice store(neureka.Tsr,java.lang.String) -> store
    168:184:neureka.devices.file.FileDevice store(neureka.Tsr,java.lang.String,java.util.Map) -> store
    188:188:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    192:192:boolean has(neureka.Tsr) -> has
    198:207:neureka.devices.Device free(neureka.Tsr) -> free
    212:212:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    217:217:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    222:222:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    227:227:neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    232:232:neureka.devices.Device updateNDConf(neureka.Tsr) -> updateNDConf
    237:237:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    242:242:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    247:247:java.util.Collection getTensors() -> getTensors
    252:252:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    257:265:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    270:270:java.lang.String toString() -> toString
    274:274:java.lang.String getDirectory() -> getDirectory
    278:278:java.util.List getLoadable() -> getLoadable
    282:282:java.util.List getLoaded() -> getLoaded
    38:38:neureka.devices.Storage restore(neureka.Tsr) -> restore
    38:38:neureka.devices.Storage store(neureka.Tsr) -> store
    91:95:void lambda$_updateFolderView$0(java.lang.String) -> a
    38:42:void <clinit>() -> <clinit>
neureka.devices.file.FileHead -> neureka.devices.file.FileHead:
    neureka.devices.file.heads.util.HeadFactory FACTORY -> FACTORY
    neureka.Tsr load() -> load
    java.lang.Object free() -> free
    int getValueSize() -> getValueSize
    int getDataSize() -> getDataSize
    int getTotalSize() -> getTotalSize
    java.lang.String getLocation() -> getLocation
    java.lang.String getFileName() -> getFileName
    neureka.dtype.DataType getDataType() -> getDataType
    int[] getShape() -> getShape
    java.lang.String extension() -> extension
    13:13:void <clinit>() -> <clinit>
neureka.devices.file.heads.AbstractFileHead -> neureka.devices.file.heads.AbstractFileHead:
    org.slf4j.Logger _LOG -> _LOG
    java.lang.String _fileName -> _fileName
    int _size -> _size
    23:46:void <init>(java.lang.String) -> <init>
    49:49:int size() -> size
    53:53:boolean isEmpty() -> isEmpty
    57:57:boolean contains(neureka.Tsr) -> contains
    java.lang.Object _loadData() -> _loadData
    65:72:java.io.File _loadFile() -> _loadFile
    77:89:java.io.FileInputStream _loadFileInputStream() -> _loadFileInputStream
    95:101:java.lang.Object free() -> free
    106:106:java.lang.String getLocation() -> getLocation
    111:112:java.lang.String getFileName() -> getFileName
    118:124:neureka.devices.Storage restore(neureka.Tsr) -> restore
neureka.devices.file.heads.CSVHead -> neureka.devices.file.heads.CSVHead:
    java.lang.String _tensorName -> a
    java.lang.String _delimiter -> b
    boolean _firstRowIsLabels -> c
    java.lang.String[] _colLabels -> d
    boolean _firstColIsIndex -> e
    java.lang.String[] _rowLabels -> f
    java.lang.Integer _numberOfRows -> g
    java.lang.Integer _numberOfColumns -> h
    java.lang.Integer _numberOfBytes -> i
    java.lang.ref.WeakReference _rawData -> j
    boolean $assertionsDisabled -> k
    37:85:void <init>(neureka.Tsr,java.lang.String) -> <init>
    37:101:void <init>(java.lang.String,java.util.Map) -> <init>
    104:176:java.lang.String[] _lazyLoad() -> a
    180:183:void _parseTensorNameFromFileName() -> b
    187:187:neureka.devices.Storage store(neureka.Tsr) -> store
    192:192:java.lang.Object _loadData() -> _loadData
    197:223:neureka.Tsr load() -> load
    227:228:java.lang.String getTensorName() -> getTensorName
    234:236:int getValueSize() -> getValueSize
    241:243:int getDataSize() -> getDataSize
    248:248:int getTotalSize() -> getTotalSize
    253:253:neureka.dtype.DataType getDataType() -> getDataType
    258:258:int[] getShape() -> getShape
    263:263:java.lang.String extension() -> extension
    267:267:java.lang.String getDelimiter() -> getDelimiter
    271:271:boolean isFirstRowIsLabels() -> isFirstRowIsLabels
    275:275:java.lang.String[] getColLabels() -> getColLabels
    279:279:boolean isFirstColIsIndex() -> isFirstColIsIndex
    283:283:java.lang.String[] getRowLabels() -> getRowLabels
    287:287:java.lang.Integer getNumberOfRows() -> getNumberOfRows
    291:291:java.lang.Integer getNumberOfColumns() -> getNumberOfColumns
    24:28:void <clinit>() -> <clinit>
neureka.devices.file.heads.IDXHead -> neureka.devices.file.heads.IDXHead:
    neureka.dtype.DataType _dataType -> a
    int _dataOffset -> b
    int _valueSize -> c
    int[] _shape -> d
    java.util.Map TYPE_MAP -> e
    java.util.Map CODE_MAP -> f
    boolean $assertionsDisabled -> g
    59:66:void <init>(java.lang.String) -> <init>
    1078:1101:void _loadHead():78:101 -> <init>
    1078:1101:void <init>(java.lang.String):61 -> <init>
    69:74:void <init>(neureka.Tsr,java.lang.String) -> <init>
    107:152:neureka.devices.file.heads.IDXHead store(neureka.Tsr) -> store
    157:170:java.lang.Object _loadData() -> _loadData
    176:180:neureka.Tsr load() -> load
    185:188:int getDataSize() -> getDataSize
    193:193:int getTotalSize() -> getTotalSize
    198:198:java.lang.String extension() -> extension
    203:203:neureka.dtype.DataType getDataType() -> getDataType
    207:207:int getValueSize() -> getValueSize
    211:211:int[] getShape() -> getShape
    26:26:neureka.devices.Storage store(neureka.Tsr) -> store
    26:51:void <clinit>() -> <clinit>
neureka.devices.file.heads.JPEGHead -> neureka.devices.file.heads.JPEGHead:
    int _width -> a
    int _height -> b
    boolean $assertionsDisabled -> c
    37:43:void <init>(java.lang.String) -> <init>
    1058:1088:void _loadHead():58:88 -> <init>
    1058:1088:void <init>(java.lang.String):39 -> <init>
    46:53:void <init>(neureka.Tsr,java.lang.String) -> <init>
    92:94:neureka.Tsr load() -> load
    100:120:java.lang.Object _loadData() -> _loadData
    126:126:int getValueSize() -> getValueSize
    131:131:int getDataSize() -> getDataSize
    136:136:int getTotalSize() -> getTotalSize
    141:141:neureka.dtype.DataType getDataType() -> getDataType
    146:146:int[] getShape() -> getShape
    151:151:java.lang.String extension() -> extension
    157:174:neureka.devices.Storage store(neureka.Tsr) -> store
    112:113:void lambda$_loadData$0(short[],neureka.dtype.custom.UI8,byte[],int,int) -> a
    26:30:void <clinit>() -> <clinit>
neureka.devices.file.heads.util.HeadFactory -> neureka.devices.file.heads.util.HeadFactory:
    java.util.Map _LOADERS -> a
    java.util.Map _SAVERS -> b
    28:41:void <init>() -> <init>
    44:44:boolean hasLoader(java.lang.String) -> hasLoader
    48:48:boolean hasSaver(java.lang.String) -> hasSaver
    52:52:neureka.devices.file.heads.util.HeadFactory$Loader getLoader(java.lang.String) -> getLoader
    56:56:neureka.devices.file.heads.util.HeadFactory$Saver getSaver(java.lang.String) -> getSaver
    40:40:neureka.devices.file.FileHead lambda$new$7(java.lang.String,neureka.Tsr,java.util.Map) -> a
    39:39:neureka.devices.file.FileHead lambda$new$6(java.lang.String,neureka.Tsr,java.util.Map) -> b
    38:38:neureka.devices.file.FileHead lambda$new$5(java.lang.String,neureka.Tsr,java.util.Map) -> c
    37:37:neureka.devices.file.FileHead lambda$new$4(java.lang.String,neureka.Tsr,java.util.Map) -> d
    35:35:neureka.devices.file.FileHead lambda$new$3(java.lang.String,java.util.Map) -> a
    34:34:neureka.devices.file.FileHead lambda$new$2(java.lang.String,java.util.Map) -> b
    33:33:neureka.devices.file.FileHead lambda$new$1(java.lang.String,java.util.Map) -> c
    32:32:neureka.devices.file.FileHead lambda$new$0(java.lang.String,java.util.Map) -> d
neureka.devices.file.heads.util.HeadFactory$Loader -> neureka.devices.file.heads.util.HeadFactory$Loader:
    neureka.devices.file.FileHead load(java.lang.String,java.util.Map) -> load
neureka.devices.file.heads.util.HeadFactory$Saver -> neureka.devices.file.heads.util.HeadFactory$Saver:
    neureka.devices.file.FileHead save(java.lang.String,neureka.Tsr,java.util.Map) -> save
neureka.devices.file.heads.util.NumberReader -> neureka.devices.file.heads.util.NumberReader:
    java.io.FileInputStream _fileInputStream -> a
    int _bytesRead -> b
    java.util.Map _byteMap -> c
    boolean $assertionsDisabled -> d
    13:23:void <init>(java.io.FileInputStream) -> <init>
    26:26:java.io.FileInputStream getStream() -> getStream
    30:32:java.lang.Object read(neureka.dtype.NumericType) -> read
    39:39:int bytesRead() -> bytesRead
    10:10:void <clinit>() -> <clinit>
neureka.devices.host.CPU -> neureka.devices.host.CPU:
    org.slf4j.Logger _LOG -> a
    neureka.devices.host.CPU _INSTANCE -> b
    neureka.devices.host.CPU$JVMExecutor _executor -> c
    java.util.Set _tensors -> d
    36:39:void <init>() -> <init>
    49:49:neureka.devices.host.CPU get() -> get
    58:58:neureka.devices.host.CPU$JVMExecutor getExecutor() -> getExecutor
    61:61:boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    69:75:void dispose() -> dispose
    78:78:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    81:81:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    84:84:java.lang.Number valueFor(neureka.Tsr,int) -> valueFor
    87:87:neureka.devices.host.CPU restore(neureka.Tsr) -> restore
    92:93:neureka.devices.host.CPU store(neureka.Tsr) -> store
    98:100:neureka.devices.host.CPU store(neureka.Tsr,neureka.Tsr) -> store
    104:104:boolean has(neureka.Tsr) -> has
    108:109:neureka.devices.host.CPU free(neureka.Tsr) -> free
    113:113:neureka.devices.host.CPU swap(neureka.Tsr,neureka.Tsr) -> swap
    117:117:neureka.devices.Device updateNDConf(neureka.Tsr) -> updateNDConf
    121:121:java.util.Collection getTensors() -> getTensors
    124:124:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    135:136:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    148:148:int getCoreCount() -> getCoreCount
    152:152:java.lang.String toString() -> toString
    29:29:neureka.devices.Storage store(neureka.Tsr) -> store
    29:29:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    29:29:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    29:29:neureka.devices.Device free(neureka.Tsr) -> free
    29:29:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    29:29:neureka.devices.Storage restore(neureka.Tsr) -> restore
    31:34:void <clinit>() -> <clinit>
neureka.devices.host.CPU$JVMExecutor -> neureka.devices.host.CPU$JVMExecutor:
    java.util.concurrent.ThreadPoolExecutor _pool -> a
    175:186:void <init>() -> <init>
    189:189:java.util.concurrent.ThreadPoolExecutor getPool() -> getPool
    199:222:void threaded(int,neureka.devices.host.CPU$RangeWorkload) -> threaded
    232:233:void sequential(int,neureka.devices.host.CPU$RangeWorkload) -> sequential
    209:211:void lambda$threaded$0(neureka.Neureka,neureka.devices.host.CPU$RangeWorkload,int,int) -> a
neureka.devices.host.CPU$RangeWorkload -> neureka.devices.host.CPU$RangeWorkload:
    void execute(int,int) -> execute
neureka.devices.opencl.CLContext -> neureka.devices.opencl.CLContext:
    org.slf4j.Logger _LOG -> a
    java.util.List _platforms -> b
    41:47:void <init>() -> <init>
    52:52:java.util.List getPlatforms() -> getPlatforms
    63:66:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    71:73:java.lang.String toString() -> toString
    84:107:java.util.List _findLoadAndCompileForAllPlatforms() -> a
    112:128:neureka.backend.api.BackendExtension$DeviceOption find(java.lang.String) -> find
    133:140:void dispose() -> dispose
    117:117:double lambda$find$1(java.lang.String,java.lang.String) -> a
    104:104:boolean lambda$_findLoadAndCompileForAllPlatforms$0(neureka.devices.opencl.OpenCLPlatform) -> a
    39:39:void <clinit>() -> <clinit>
neureka.devices.opencl.KernelCaller -> neureka.devices.opencl.KernelCaller:
    org.jocl.cl_command_queue _queue -> a
    org.jocl.cl_kernel _kernel -> b
    java.util.List _inputs -> c
    int _argId -> d
    boolean $assertionsDisabled -> e
    24:35:void <init>(org.jocl.cl_kernel,org.jocl.cl_command_queue) -> <init>
    44:47:neureka.devices.opencl.KernelCaller passAllOf(neureka.Tsr) -> passAllOf
    60:62:neureka.devices.opencl.KernelCaller passConfOf(neureka.Tsr) -> passConfOf
    72:75:neureka.devices.opencl.KernelCaller pass(neureka.Tsr) -> pass
    84:86:neureka.devices.opencl.KernelCaller pass(int) -> pass
    95:97:neureka.devices.opencl.KernelCaller pass(float) -> pass
    106:121:void call(int) -> call
    125:141:void call(long[],long[]) -> call
    145:151:void _releaseEvents(neureka.Tsr[]) -> a
    155:162:org.jocl.cl_event[] _getWaitList(neureka.Tsr[]) -> b
    18:18:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice -> neureka.devices.opencl.OpenCLDevice:
    org.slf4j.Logger _LOG -> a
    java.util.Map _adhocKernels -> b
    neureka.devices.opencl.OpenCLDevice$cl_ad_hoc[] _adhocKernelRingBuffer -> c
    int _ringIndex -> d
    java.util.Set _tensors -> e
    org.jocl.cl_device_id _deviceId -> f
    neureka.devices.opencl.OpenCLPlatform _platform -> g
    org.jocl.cl_command_queue _queue -> h
    boolean $assertionsDisabled -> i
    86:87:neureka.devices.opencl.OpenCLDevice newInstanceOf(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> newInstanceOf
    95:95:java.lang.String toString() -> toString
    99:99:org.jocl.cl_device_id getDeviceId() -> getDeviceId
    103:103:neureka.devices.opencl.OpenCLPlatform getPlatform() -> getPlatform
    184:235:void <init>(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> <init>
    238:238:boolean hasAdHocKernel(java.lang.String) -> hasAdHocKernel
    242:244:neureka.devices.opencl.KernelCaller getAdHocKernel(java.lang.String) -> getAdHocKernel
    263:321:neureka.devices.opencl.OpenCLDevice compileAdHocKernel(java.lang.String,java.lang.String) -> compileAdHocKernel
    333:336:java.util.Collection getTensors() -> getTensors
    341:341:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    349:352:void dispose() -> dispose
    366:378:neureka.devices.Device restore(neureka.Tsr) -> restore
    383:384:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    1388:1391:neureka.devices.Device _store(neureka.Tsr,neureka.Tsr,java.lang.Runnable):388:391 -> store
    1388:1391:neureka.devices.Device store(neureka.Tsr,neureka.Tsr):383 -> store
    396:448:void _add(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr,java.lang.Runnable) -> a
    452:478:neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config _writeNDConfig(neureka.ndim.config.NDConfiguration) -> a
    491:491:boolean has(neureka.Tsr) -> has
    495:532:void _store(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr,int) -> a
    537:542:neureka.devices.Device free(neureka.Tsr) -> free
    548:550:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    556:574:neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    580:599:neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    605:610:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    615:629:neureka.devices.Device updateNDConf(neureka.Tsr) -> updateNDConf
    634:641:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    1645:1649:void _updateInternal(neureka.Tsr,java.lang.Runnable):645:649 -> update
    1645:1649:boolean update(neureka.common.composition.Component$OwnerChangeRequest):637 -> update
    652:653:double[] value64f(neureka.Tsr) -> value64f
    658:672:double[] _value64f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> a
    677:678:float[] value32f(neureka.Tsr) -> value32f
    682:697:float[] _value32f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> b
    702:702:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    707:707:java.lang.Number valueFor(neureka.Tsr,int) -> valueFor
    711:712:double value64f(neureka.Tsr,int) -> value64f
    716:717:float value32f(neureka.Tsr,int) -> value32f
    722:730:neureka.devices.opencl.KernelCaller getKernel(neureka.backend.api.ExecutionCall) -> getKernel
    736:736:boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    771:771:java.lang.String name() -> name
    775:775:java.lang.String vendor() -> vendor
    779:779:java.lang.String version() -> version
    783:790:neureka.devices.opencl.OpenCLDevice$Type type() -> type
    794:794:int maxComputeUnits() -> maxComputeUnits
    798:798:long maxWorkItemSimensions() -> maxWorkItemSimensions
    802:802:long[] maxWorkItemSizes() -> maxWorkItemSizes
    806:806:long maxWorkGroupSize() -> maxWorkGroupSize
    810:810:long maxClockFrequenzy() -> maxClockFrequenzy
    814:814:int maxAddressBits() -> maxAddressBits
    818:818:long maxMemAllocSize() -> maxMemAllocSize
    822:822:long globalMemSize() -> globalMemSize
    826:826:int errorCorrectionSupport() -> errorCorrectionSupport
    830:830:int localMemType() -> localMemType
    834:834:long localMemSize() -> localMemSize
    838:838:long maxConstantBufferSize() -> maxConstantBufferSize
    842:842:long maxConstantBufferSizeKB() -> maxConstantBufferSizeKB
    856:856:int imageSupport() -> imageSupport
    860:860:int maxReadImageArgs() -> maxReadImageArgs
    864:864:int maxWriteImageArgs() -> maxWriteImageArgs
    868:868:long singleFPConfig() -> singleFPConfig
    872:872:long image2DMaxWidth() -> image2DMaxWidth
    876:876:long image2DMaxHeight() -> image2DMaxHeight
    880:880:long image3DMaxWidth() -> image3DMaxWidth
    884:884:long image3DMaxHeight() -> image3DMaxHeight
    888:888:long image3DMaxDepth() -> image3DMaxDepth
    892:892:int prefVecWidthChar() -> prefVecWidthChar
    896:896:int prefVecWidthShort() -> prefVecWidthShort
    900:900:int prefVecWidthInt() -> prefVecWidthInt
    904:904:int prefVecWidthLong() -> prefVecWidthLong
    908:908:int prefVecWidthFloat() -> prefVecWidthFloat
    912:912:int prefVecWidthDouble() -> prefVecWidthDouble
    80:80:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    80:80:neureka.devices.Storage restore(neureka.Tsr) -> restore
    477:477:void lambda$_writeNDConfig$6(org.jocl.cl_mem) -> a
    411:413:void lambda$_add$5(org.jocl.cl_event,org.jocl.cl_mem) -> a
    383:383:void lambda$store$4(neureka.Tsr) -> a
    335:335:void lambda$getTensors$3(java.util.Collection,java.util.Collection) -> a
    335:335:void lambda$getTensors$2(java.util.Collection,neureka.Tsr) -> a
    318:320:void lambda$compileAdHocKernel$1(org.jocl.cl_kernel,org.jocl.cl_program) -> a
    225:225:void lambda$new$0() -> a
    80:82:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice$DeviceQuery -> neureka.devices.opencl.OpenCLDevice$DeviceQuery:
    915:915:void <init>() -> <init>
    925:925:int getInt(org.jocl.cl_device_id,int) -> getInt
    937:939:int[] getInts(org.jocl.cl_device_id,int,int) -> getInts
    950:950:long getLong(org.jocl.cl_device_id,int) -> getLong
    962:964:long[] getLongs(org.jocl.cl_device_id,int,int) -> getLongs
    976:984:java.lang.String getString(org.jocl.cl_device_id,int) -> getString
    996:1004:java.lang.String getString(org.jocl.cl_platform_id,int) -> getString
    1015:1015:long getSize(org.jocl.cl_device_id,int) -> getSize
    1029:1047:long[] getSizes(org.jocl.cl_device_id,int,int) -> getSizes
neureka.devices.opencl.OpenCLDevice$Type -> neureka.devices.opencl.OpenCLDevice$Type:
    neureka.devices.opencl.OpenCLDevice$Type CPU -> CPU
    neureka.devices.opencl.OpenCLDevice$Type GPU -> GPU
    neureka.devices.opencl.OpenCLDevice$Type ACCELERATOR -> ACCELERATOR
    neureka.devices.opencl.OpenCLDevice$Type DEFAULT -> DEFAULT
    neureka.devices.opencl.OpenCLDevice$Type CUSTOM -> CUSTOM
    neureka.devices.opencl.OpenCLDevice$Type ALL -> ALL
    neureka.devices.opencl.OpenCLDevice$Type UNKNOWN -> UNKNOWN
    neureka.devices.opencl.OpenCLDevice$Type[] $VALUES -> a
    90:90:neureka.devices.opencl.OpenCLDevice$Type[] values() -> values
    90:90:neureka.devices.opencl.OpenCLDevice$Type valueOf(java.lang.String) -> valueOf
    90:90:void <init>(java.lang.String,int) -> <init>
    90:91:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice$cl_ad_hoc -> neureka.devices.opencl.OpenCLDevice$a:
    java.lang.String source -> a
    org.jocl.cl_kernel kernel -> b
    171:171:void <init>() -> <init>
    171:171:void <init>(byte) -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr -> neureka.devices.opencl.OpenCLDevice$cl_tsr:
    int fp -> a
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config config -> b
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value value -> c
    120:150:void <init>() -> <init>
    157:158:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config:
    org.jocl.cl_mem data -> data
    145:145:void <init>() -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value:
    int size -> size
    org.jocl.cl_mem data -> data
    org.jocl.cl_event event -> event
    131:133:void <init>() -> <init>
neureka.devices.opencl.OpenCLPlatform -> neureka.devices.opencl.OpenCLPlatform:
    org.slf4j.Logger _LOG -> a
    org.jocl.cl_platform_id _pid -> b
    org.jocl.cl_context _context -> c
    java.util.Map _id_device -> d
    java.util.Map _kernels -> e
    25:72:void <init>(org.jocl.cl_platform_id) -> <init>
    75:79:void recompile() -> recompile
    84:194:void _compile(org.jocl.cl_device_id[]) -> a
    197:199:java.util.List getDevices() -> getDevices
    206:206:boolean has(org.jocl.cl_device_id) -> has
    209:209:neureka.devices.opencl.OpenCLDevice get(org.jocl.cl_device_id) -> get
    213:214:void put(org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> put
    217:217:java.util.Map getKernels() -> getKernels
    221:221:org.jocl.cl_platform_id getPid() -> getPid
    225:225:org.jocl.cl_context getContext() -> getContext
    229:230:void dispose() -> dispose
    234:237:java.lang.String toString() -> toString
    198:198:void lambda$getDevices$1(java.util.List,org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> a
    145:147:void lambda$_compile$0(java.util.ArrayList,java.util.ArrayList,java.lang.String,java.lang.String) -> a
    19:19:void <clinit>() -> <clinit>
neureka.devices.opencl.utility.CLFunctionCompiler -> neureka.devices.opencl.utility.CLFunctionCompiler:
    neureka.devices.opencl.OpenCLDevice _device -> a
    neureka.calculus.Function _functionToBeOptimized -> b
    java.lang.String _functionName -> c
    int[] _argPointer -> d
    34:44:void <init>(neureka.devices.opencl.OpenCLDevice,neureka.calculus.Function,java.lang.String) -> <init>
    48:101:neureka.backend.api.Operation optimize() -> optimize
    108:204:void _adHocKernelFor(neureka.backend.api.ExecutionCall) -> a
    1228:1240:java.lang.String _readAndGetIndexMapper():228:240 -> a
    1228:1240:void _adHocKernelFor(neureka.backend.api.ExecutionCall):177 -> a
    207:218:java.lang.String _clTypeOf(neureka.Tsr) -> a
    208:210:java.lang.String lambda$_clTypeOf$19(java.lang.Class) -> a
    193:193:java.lang.String lambda$_adHocKernelFor$18(java.util.List,int,int) -> a
    185:185:java.lang.String lambda$_adHocKernelFor$17(java.util.List,int) -> a
    169:171:java.lang.String lambda$_adHocKernelFor$16(java.lang.String,java.lang.String) -> a
    157:157:java.lang.String lambda$_adHocKernelFor$15(java.util.List,int) -> b
    150:152:java.util.List lambda$_adHocKernelFor$14(int[]) -> a
    147:147:int[] lambda$_adHocKernelFor$13(neureka.Tsr) -> b
    123:131:java.lang.String lambda$_adHocKernelFor$12(neureka.Tsr) -> c
    109:109:neureka.Tsr lambda$_adHocKernelFor$11(neureka.backend.api.ExecutionCall,int) -> a
    86:94:neureka.backend.api.ExecutionCall lambda$optimize$10(neureka.backend.api.ExecutionCall) -> b
    78:80:neureka.autograd.ADAgent lambda$optimize$9(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    80:80:neureka.Tsr lambda$optimize$8(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    79:79:neureka.Tsr lambda$optimize$7(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> b
    74:74:boolean lambda$optimize$6(neureka.backend.api.ExecutionCall) -> c
    73:73:boolean lambda$optimize$5(neureka.backend.api.ExecutionCall) -> d
    72:72:float lambda$optimize$4(neureka.backend.api.ExecutionCall) -> e
    62:66:java.lang.String lambda$optimize$3(java.lang.String[]) -> a
    49:49:boolean lambda$optimize$2(neureka.calculus.Function) -> a
    41:41:int lambda$new$1(neureka.calculus.Function) -> b
    40:40:boolean lambda$new$0(neureka.calculus.Function) -> c
neureka.devices.opencl.utility.DeviceQuery -> neureka.devices.opencl.utility.DeviceQuery:
    20:20:void <init>() -> <init>
    29:188:java.lang.String query() -> query
    1276:1284:java.lang.String getString(org.jocl.cl_platform_id,int):276:284 -> query
    1276:1284:java.lang.String query():44 -> query
    200:200:int getInt(org.jocl.cl_device_id,int) -> a
    213:215:int[] getInts(org.jocl.cl_device_id,int,int) -> a
    227:227:long getLong(org.jocl.cl_device_id,int) -> b
    240:242:long[] getLongs(org.jocl.cl_device_id,int,int) -> b
    255:263:java.lang.String getString(org.jocl.cl_device_id,int) -> c
    296:296:long getSize(org.jocl.cl_device_id,int) -> d
    311:330:long[] getSizes(org.jocl.cl_device_id,int,int) -> c
neureka.devices.opencl.utility.DispatchUtility -> neureka.devices.opencl.utility.DispatchUtility:
    boolean $assertionsDisabled -> a
    7:7:void <init>() -> <init>
    12:18:void _revert(int[]) -> a
    21:23:int _productOf(int[]) -> b
    28:154:int[] parseTile(int,int[]) -> parseTile
    1184:1205:int[] _primeFactors(int):184:205 -> parseTile
    1184:1205:int[] parseTile(int,int[]):35 -> parseTile
    2164:2167:int _productOfNewDimension(int[],int,int,int):164:167 -> parseTile
    2164:2167:int[] parseTile(int,int[]):114 -> parseTile
    2176:2179:int _inversionProductOfNewDimension(int[],int[],int,int):176:179 -> parseTile
    2176:2179:int[] parseTile(int,int[]):139 -> parseTile
    219:229:int[] findBestParams(int,int,int,int,int) -> findBestParams
    235:242:int[] bestMatMulMatch(int,int,int,int) -> bestMatMulMatch
    205:205:int lambda$_primeFactors$0(java.lang.Integer) -> a
    7:7:void <clinit>() -> <clinit>
neureka.devices.opencl.utility.WeakTensorReference -> neureka.devices.opencl.utility.WeakTensorReference:
    int _hash -> a
    24:26:void <init>(java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
    29:29:int hashCode() -> hashCode
    33:37:boolean equals(java.lang.Object) -> equals
neureka.dtype.AbstractNumericType -> neureka.dtype.AbstractNumericType:
    java.util.Map _NUMERIC_TYPE_RELATIONS -> a
    21:21:void <init>() -> <init>
    45:45:java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    51:55:void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    31:41:void <clinit>() -> <clinit>
neureka.dtype.DataType -> neureka.dtype.DataType:
    java.util.Map _instances -> a
    org.slf4j.Logger _log -> b
    java.lang.Class _typeClass -> c
    71:83:java.lang.Class _numericTypeRepresentationOf(java.lang.Class) -> a
    88:95:neureka.dtype.DataType of(java.lang.Class) -> of
    100:105:void forType(java.lang.Class,java.util.function.Consumer) -> forType
    111:116:void <init>(java.lang.Class) -> <init>
    123:138:java.lang.Object getTypeClassInstance() -> getTypeClassInstance
    142:142:boolean typeClassImplements(java.lang.Class) -> typeClassImplements
    149:162:java.lang.Object virtualize(java.lang.Object) -> virtualize
    167:205:java.lang.Object actualize(java.lang.Object,int) -> actualize
    210:227:java.lang.Object allocate(int) -> allocate
    232:232:org.slf4j.Logger getLog() -> getLog
    236:246:boolean equals(java.lang.Object) -> equals
    250:256:int hashCode() -> hashCode
    260:260:java.lang.String toString() -> toString
    264:264:java.lang.Class getTypeClass() -> getTypeClass
    268:271:java.lang.Class getJVMTypeClass() -> getJVMTypeClass
    61:61:void <clinit>() -> <clinit>
neureka.dtype.NumericType -> neureka.dtype.NumericType:
    boolean signed() -> signed
    int numberOfBytes() -> numberOfBytes
    java.lang.Class targetType() -> targetType
    java.lang.Class targetArrayType() -> targetArrayType
    java.lang.Class holderType() -> holderType
    java.lang.Class holderArrayType() -> holderArrayType
    java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    java.lang.Object toTarget(java.lang.Object) -> toTarget
    byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
neureka.dtype.custom.F32 -> neureka.dtype.custom.F32:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Float foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    54:54:java.lang.Float toTarget(java.lang.Float) -> toTarget
    59:60:byte[] targetToForeignHolderBytes(java.lang.Float) -> targetToForeignHolderBytes
    70:70:float[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:77:float[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    83:83:float[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    88:88:float[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    94:107:java.lang.Float convertToHolder(java.lang.Object) -> convertToHolder
    112:112:float[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    117:117:java.lang.Float convertToTarget(java.lang.Object) -> convertToTarget
    122:122:float[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.F64 -> neureka.dtype.custom.F64:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Double foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Double toTarget(java.lang.Double) -> toTarget
    60:61:byte[] targetToForeignHolderBytes(java.lang.Double) -> targetToForeignHolderBytes
    75:75:double[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    80:82:double[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:double[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:94:double[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    99:112:java.lang.Double convertToHolder(java.lang.Object) -> convertToHolder
    117:117:double[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    122:122:java.lang.Double convertToTarget(java.lang.Object) -> convertToTarget
    127:127:double[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    131:137:double[] _readFrom(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I16 -> neureka.dtype.custom.I16:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Short toTarget(java.lang.Short) -> toTarget
    61:62:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    67:67:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    72:72:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    77:77:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    82:82:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    87:100:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    105:105:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    110:110:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    115:115:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    119:125:short[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I32 -> neureka.dtype.custom.I32:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Integer toTarget(java.lang.Integer) -> toTarget
    61:65:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:71:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    76:76:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    81:81:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    86:86:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    91:104:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    109:109:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    114:114:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    119:119:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    123:129:int[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I64 -> neureka.dtype.custom.I64:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    57:57:java.lang.Long toTarget(java.lang.Long) -> toTarget
    62:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:101:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    106:106:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    111:111:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    116:116:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I8 -> neureka.dtype.custom.I8:
    18:19:void <init>() -> <init>
    23:23:boolean signed() -> signed
    28:28:int numberOfBytes() -> numberOfBytes
    33:33:java.lang.Class targetType() -> targetType
    38:38:java.lang.Class targetArrayType() -> targetArrayType
    43:43:java.lang.Class holderType() -> holderType
    48:48:java.lang.Class holderArrayType() -> holderArrayType
    53:53:java.lang.Byte foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    58:58:java.lang.Byte toTarget(java.lang.Byte) -> toTarget
    63:63:byte[] targetToForeignHolderBytes(java.lang.Byte) -> targetToForeignHolderBytes
    68:70:byte[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:75:byte[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    80:82:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    87:87:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    92:105:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    110:110:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    115:115:java.lang.Byte convertToTarget(java.lang.Object) -> convertToTarget
    120:120:byte[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    15:15:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    15:15:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    15:15:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    15:15:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    15:15:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    15:15:java.lang.Object toTarget(java.lang.Object) -> toTarget
    15:15:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI16 -> neureka.dtype.custom.UI16:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:51:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    59:59:java.lang.Integer toTarget(java.lang.Short) -> toTarget
    64:66:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:77:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    82:82:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:92:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    97:97:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    102:102:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    107:107:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    112:112:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI32 -> neureka.dtype.custom.UI32:
    11:11:void <init>() -> <init>
    16:16:boolean signed() -> signed
    21:21:int numberOfBytes() -> numberOfBytes
    26:26:java.lang.Class targetType() -> targetType
    31:31:java.lang.Class targetArrayType() -> targetArrayType
    36:36:java.lang.Class holderType() -> holderType
    41:41:java.lang.Class holderArrayType() -> holderArrayType
    46:47:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Long toTarget(java.lang.Integer) -> toTarget
    60:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:88:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    93:93:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    98:98:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    103:103:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI64 -> neureka.dtype.custom.UI64:
    14:14:void <init>() -> <init>
    18:18:boolean signed() -> signed
    23:23:int numberOfBytes() -> numberOfBytes
    28:28:java.lang.Class targetType() -> targetType
    33:33:java.lang.Class targetArrayType() -> targetArrayType
    38:38:java.lang.Class holderType() -> holderType
    43:43:java.lang.Class holderArrayType() -> holderArrayType
    49:52:java.math.BigInteger foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    57:57:java.math.BigInteger toTarget(java.lang.Long) -> toTarget
    62:69:byte[] targetToForeignHolderBytes(java.math.BigInteger) -> targetToForeignHolderBytes
    74:74:java.math.BigInteger[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    79:79:java.math.BigInteger[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    84:84:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    89:89:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    94:94:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    99:99:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    104:104:java.math.BigInteger convertToTarget(java.lang.Object) -> convertToTarget
    109:109:java.math.BigInteger[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI8 -> neureka.dtype.custom.UI8:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Short toTarget(java.lang.Byte) -> toTarget
    61:61:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    66:72:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    77:77:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    82:88:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    93:93:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    98:98:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    103:103:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    108:121:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    126:126:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    10:10:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    10:10:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    10:10:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    10:10:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    10:10:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    10:10:java.lang.Object toTarget(java.lang.Object) -> toTarget
    10:10:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.fluent.building.TensorBuilder -> neureka.fluent.building.TensorBuilder:
    neureka.dtype.DataType _dataType -> a
    int[] _shape -> b
    java.lang.Object _from -> c
    java.lang.Object _to -> d
    neureka.devices.Device _device -> e
    65:68:void <init>(java.lang.Class) -> <init>
    76:76:neureka.Tsr andFill(java.lang.Object[]) -> andFill
    86:86:neureka.Tsr andWhere(neureka.ndim.Initializer) -> andWhere
    89:89:neureka.fluent.building.states.To iterativelyFilledFrom(java.lang.Object) -> iterativelyFilledFrom
    92:92:neureka.Tsr all(java.lang.Object) -> all
    96:115:neureka.Tsr andSeed(java.lang.Object) -> andSeed
    119:119:neureka.fluent.building.states.IterByOrIterFromOrAll withShape(int[]) -> withShape
    122:122:neureka.Tsr vector(java.lang.Object[]) -> vector
    126:131:neureka.Tsr scalar(java.lang.Object) -> scalar
    142:154:java.lang.Object _checked(java.lang.Object) -> a
    158:158:neureka.fluent.building.states.Step to(java.lang.Object) -> to
    162:228:neureka.Tsr step(double) -> step
    232:234:int _size() -> a
    239:240:neureka.fluent.building.states.WithShapeOrScalarOrVector on(neureka.devices.Device) -> on
    196:196:long lambda$step$5(java.util.List,int) -> a
    194:194:int lambda$step$4(int) -> a
    185:185:double lambda$step$3(java.util.List,int) -> b
    183:183:int lambda$step$2(int) -> b
    174:174:int lambda$step$1(java.util.List,int) -> c
    172:172:int lambda$step$0(int) -> c
neureka.fluent.building.states.IterByOrIterFromOrAll -> neureka.fluent.building.states.IterByOrIterFromOrAll:
    neureka.Tsr andFill(java.lang.Object[]) -> andFill
    neureka.Tsr andWhere(neureka.ndim.Initializer) -> andWhere
    neureka.fluent.building.states.To iterativelyFilledFrom(java.lang.Object) -> iterativelyFilledFrom
    neureka.Tsr all(java.lang.Object) -> all
    neureka.Tsr andSeed(java.lang.Object) -> andSeed
neureka.fluent.building.states.Step -> neureka.fluent.building.states.Step:
    neureka.Tsr step(double) -> step
neureka.fluent.building.states.To -> neureka.fluent.building.states.To:
    neureka.fluent.building.states.Step to(java.lang.Object) -> to
neureka.fluent.building.states.WithShapeOrScalarOrVector -> neureka.fluent.building.states.WithShapeOrScalarOrVector:
    neureka.fluent.building.states.IterByOrIterFromOrAll withShape(int[]) -> withShape
    neureka.Tsr vector(java.lang.Object[]) -> vector
    neureka.Tsr scalar(java.lang.Object) -> scalar
neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice -> neureka.fluent.building.states.WithShapeOrScalarOrVectorOnDevice:
    neureka.fluent.building.states.WithShapeOrScalarOrVector on(neureka.devices.Device) -> on
neureka.fluent.slicing.AxisSliceBuilder -> neureka.fluent.slicing.AxisSliceBuilder:
    neureka.fluent.slicing.AxisSliceBuilder$Resolution _then -> a
    int _from -> b
    int _to -> c
    int _steps -> d
    20:25:void <init>(int,neureka.fluent.slicing.AxisSliceBuilder$Resolution) -> <init>
    38:39:neureka.fluent.slicing.states.To from(int) -> from
    53:54:neureka.fluent.slicing.states.StepsOrAxisOrGet to(int) -> to
    68:69:neureka.fluent.slicing.states.AxisOrGet step(int) -> step
    83:85:neureka.fluent.slicing.states.AxisOrGet at(int) -> at
    94:94:neureka.fluent.slicing.states.FromOrAt axis(int) -> axis
    99:99:neureka.Tsr get() -> get
    104:105:void resolve() -> resolve
neureka.fluent.slicing.AxisSliceBuilder$Resolution -> neureka.fluent.slicing.AxisSliceBuilder$a:
    neureka.fluent.slicing.SliceBuilder resolve(int,int,int) -> resolve
neureka.fluent.slicing.SliceBuilder -> neureka.fluent.slicing.SliceBuilder:
    java.util.function.Supplier _create -> a
    neureka.fluent.slicing.AxisSliceBuilder[] _axisSliceBuilders -> b
    39:72:void <init>(neureka.Tsr,neureka.fluent.slicing.SliceBuilder$CreationCallback) -> <init>
    84:85:neureka.fluent.slicing.states.FromOrAt axis(int) -> axis
    97:97:neureka.Tsr get() -> get
    67:70:neureka.Tsr lambda$new$1(neureka.fluent.slicing.SliceBuilder$CreationCallback,int[],int[],int[]) -> a
    50:63:neureka.fluent.slicing.SliceBuilder lambda$new$0(int[],int,int[],int[],int[],int,int,int) -> a
neureka.fluent.slicing.SliceBuilder$CreationCallback -> neureka.fluent.slicing.SliceBuilder$CreationCallback:
    neureka.Tsr sliceOf(int[],int[],int[]) -> sliceOf
neureka.fluent.slicing.SmartSlicer -> neureka.fluent.slicing.SmartSlicer:
    org.slf4j.Logger _LOG -> a
    18:18:void <init>() -> <init>
    30:124:neureka.Tsr slice(java.lang.Object[],neureka.Tsr,neureka.fluent.slicing.SliceBuilder$CreationCallback) -> slice
    23:23:void <clinit>() -> <clinit>
neureka.fluent.slicing.states.AxisOrGet -> neureka.fluent.slicing.states.AxisOrGet:
    neureka.fluent.slicing.states.FromOrAt axis(int) -> axis
    neureka.Tsr get() -> get
neureka.fluent.slicing.states.FromOrAt -> neureka.fluent.slicing.states.FromOrAt:
    neureka.fluent.slicing.states.To from(int) -> from
    neureka.fluent.slicing.states.AxisOrGet at(int) -> at
neureka.fluent.slicing.states.StepsOrAxisOrGet -> neureka.fluent.slicing.states.StepsOrAxisOrGet:
    neureka.fluent.slicing.states.AxisOrGet step(int) -> step
neureka.fluent.slicing.states.To -> neureka.fluent.slicing.states.To:
    neureka.fluent.slicing.states.StepsOrAxisOrGet to(int) -> to
neureka.framing.NDFrame -> neureka.framing.NDFrame:
    java.util.List _hiddenKeys -> a
    java.util.Map _mapping -> b
    java.lang.String _tensorName -> c
    35:60:void <init>(java.util.List,java.lang.String) -> <init>
    35:66:void <init>(int,java.lang.String) -> <init>
    35:87:void <init>(java.util.Map,neureka.Tsr,java.lang.String) -> <init>
    90:90:int[] get(java.util.List) -> get
    94:103:int[] get(java.lang.Object[]) -> get
    118:164:neureka.framing.fluent.AxisFrame atAxis(java.lang.Object) -> atAxis
    168:180:java.util.Map _initializeIdxmap(java.lang.Object,java.lang.Object,int) -> a
    191:203:java.lang.String _paddedCentered(java.lang.String,int) -> a
    210:270:java.lang.String toString() -> toString
    276:278:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    282:282:java.util.Map getMapping() -> getMapping
    286:286:java.lang.String getTensorName() -> getTensorName
    240:256:void lambda$toString$14(java.lang.Object[],int[],java.lang.StringBuilder,java.lang.Object,java.lang.Object) -> a
    244:245:void lambda$toString$13(int[],java.lang.Object[],java.lang.Object,java.lang.Integer) -> a
    223:229:void lambda$toString$12(java.lang.StringBuilder,java.lang.Object,java.lang.Object) -> a
    218:218:java.lang.Boolean lambda$toString$11(int,int,java.lang.Integer) -> a
    157:161:java.util.List lambda$atAxis$10(java.lang.Object,java.lang.Integer) -> a
    159:159:void lambda$atAxis$9(java.lang.Integer,java.util.List,java.lang.Object,java.lang.Integer) -> a
    147:152:java.util.List lambda$atAxis$8(java.lang.Object) -> a
    150:150:void lambda$atAxis$7(java.util.List,java.lang.Object,java.lang.Integer) -> a
    138:138:neureka.framing.fluent.With lambda$atAxis$6(java.lang.Object,java.lang.Object) -> a
    139:142:neureka.framing.NDFrame lambda$atAxis$5(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    130:130:neureka.framing.fluent.AxisFrame$Set lambda$atAxis$4(java.lang.Object,java.lang.Object) -> b
    132:134:neureka.framing.NDFrame lambda$atAxis$3(java.lang.Object,java.lang.Object,int) -> b
    120:120:neureka.framing.fluent.Get lambda$atAxis$2(java.lang.Object,java.lang.Object) -> c
    122:126:java.lang.Integer lambda$atAxis$1(java.lang.Object,java.lang.Object) -> d
    73:86:void lambda$new$0(int[],neureka.Tsr,java.lang.Object,java.util.List) -> a
neureka.framing.Relation -> neureka.framing.Relation:
    neureka.Tsr _parent -> a
    java.lang.ref.WeakReference[] _children -> b
    int[][] _shapeRelations -> c
    59:59:void <init>() -> <init>
    99:123:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    129:130:neureka.framing.Relation addParent(neureka.Tsr) -> addParent
    136:149:neureka.framing.Relation addChild(neureka.Tsr) -> addChild
    172:178:neureka.framing.Relation addReshapeRelationFor(neureka.Tsr,int[]) -> addReshapeRelationFor
    201:207:int[] getReshapeRelationFor(neureka.Tsr) -> getReshapeRelationFor
    212:222:neureka.framing.Relation foreachChild(java.util.function.Consumer) -> foreachChild
    234:237:neureka.Tsr findRootTensor() -> findRootTensor
    242:242:boolean hasParent() -> hasParent
    247:247:boolean hasChildren() -> hasChildren
    252:252:int childCount() -> childCount
    257:257:neureka.framing.Relation remove(neureka.Tsr) -> remove
    261:261:java.lang.String toString() -> toString
    265:265:neureka.Tsr getParent() -> getParent
neureka.framing.fluent.At -> neureka.framing.fluent.At:
    java.lang.Object at(java.lang.Object) -> at
neureka.framing.fluent.AxisFrame -> neureka.framing.fluent.AxisFrame:
    neureka.framing.fluent.At _keyBasedGetter -> a
    neureka.framing.fluent.At _keyBasedSetter -> b
    neureka.framing.fluent.Replace _replace -> c
    java.util.function.Supplier _allAliasGetter -> d
    java.util.function.Function _allAliasGetterForIndex -> e
    36:42:void <init>(neureka.framing.fluent.At,neureka.framing.fluent.At,neureka.framing.fluent.Replace,java.util.function.Supplier,java.util.function.Function) -> <init>
    45:45:neureka.framing.fluent.AxisFrame$Builder builder() -> builder
    49:49:java.lang.Object getIndexAtAlias(java.lang.Object) -> getIndexAtAlias
    53:53:neureka.framing.fluent.AxisFrame$Set atIndexAlias(java.lang.Object) -> atIndexAlias
    57:57:neureka.framing.fluent.With replace(java.lang.Object) -> replace
    61:61:java.util.List getAllAliases() -> getAllAliases
    65:65:java.util.List getAllAliasesForIndex(int) -> getAllAliasesForIndex
    16:16:void <init>(neureka.framing.fluent.At,neureka.framing.fluent.At,neureka.framing.fluent.Replace,java.util.function.Supplier,java.util.function.Function,byte) -> <init>
neureka.framing.fluent.AxisFrame$Builder -> neureka.framing.fluent.AxisFrame$Builder:
    neureka.framing.fluent.At keyBasedGetter -> a
    neureka.framing.fluent.At keyBasedSetter -> b
    neureka.framing.fluent.Replace replacer -> c
    java.util.function.Supplier allAliasGetter -> d
    java.util.function.Function allAliasGetterForIndex -> e
    76:76:void <init>() -> <init>
    79:80:neureka.framing.fluent.AxisFrame$Builder getter(neureka.framing.fluent.At) -> getter
    84:85:neureka.framing.fluent.AxisFrame$Builder setter(neureka.framing.fluent.At) -> setter
    89:90:neureka.framing.fluent.AxisFrame$Builder replacer(neureka.framing.fluent.Replace) -> replacer
    94:95:neureka.framing.fluent.AxisFrame$Builder allAliasGetter(java.util.function.Supplier) -> allAliasGetter
    99:100:neureka.framing.fluent.AxisFrame$Builder allAliasGetterFor(java.util.function.Function) -> allAliasGetterFor
    104:104:neureka.framing.fluent.AxisFrame build() -> build
neureka.framing.fluent.AxisFrame$Set -> neureka.framing.fluent.AxisFrame$Set:
    neureka.framing.NDFrame setIndex(int) -> setIndex
neureka.framing.fluent.Get -> neureka.framing.fluent.Get:
    java.lang.Object get() -> get
neureka.framing.fluent.Replace -> neureka.framing.fluent.Replace:
    neureka.framing.fluent.With replace(java.lang.Object) -> replace
neureka.framing.fluent.Set -> neureka.framing.fluent.Set:
    neureka.framing.NDFrame set(int) -> set
neureka.framing.fluent.With -> neureka.framing.fluent.With:
    java.lang.Object with(java.lang.Object) -> with
neureka.ndim.AbstractNDArray -> neureka.ndim.AbstractNDArray:
    org.slf4j.Logger _LOG -> _LOG
    neureka.ndim.config.NDConfiguration _NDConf -> a
    neureka.dtype.DataType _dataType -> b
    java.lang.Object _data -> c
    boolean $assertionsDisabled -> d
    68:82:void <init>() -> <init>
    boolean isDeleted() -> isDeleted
    91:91:void _guardGet(java.lang.String) -> _guardGet
    92:92:void _guardSet(java.lang.String) -> _guardSet
    93:93:void _guardMod(java.lang.String) -> _guardMod
    103:107:void _guard(java.lang.String) -> a
    112:112:neureka.ndim.config.NDConfiguration getNDConf() -> getNDConf
    121:121:neureka.dtype.DataType getDataType() -> getDataType
    130:130:java.lang.Object getData() -> getData
    136:136:java.lang.Class getValueClass() -> getValueClass
    154:154:java.lang.Class getRepresentativeValueClass() -> getRepresentativeValueClass
    169:176:java.lang.Object setDataType(neureka.dtype.DataType) -> setDataType
    181:197:void _setData(java.lang.Object) -> _setData
    201:229:void _initData(neureka.ndim.Initializer) -> _initData
    241:241:void _allocate(int) -> _allocate
    java.lang.Object setIsVirtual(boolean) -> setIsVirtual
    boolean isVirtual() -> isVirtual
    void _setIsVirtual(boolean) -> _setIsVirtual
    284:285:neureka.ndim.NDAConstructor createConstructionAPI() -> createConstructionAPI
    306:306:void _virtualize() -> _virtualize
    318:318:void _actualize() -> _actualize
    322:331:java.lang.Object _convertedDataOfType(java.lang.Class) -> _convertedDataOfType
    java.lang.Object getDataAt(int) -> getDataAt
    java.lang.Object setDataAt(int,java.lang.Object) -> setDataAt
    java.lang.Object setValueAt(int,java.lang.Object) -> setValueAt
    369:370:boolean is(java.lang.Class) -> is
    389:389:int indexOfIndex(int) -> indexOfIndex
    400:400:int[] IndicesOfIndex(int) -> IndicesOfIndex
    410:410:int indexOfIndices(int[]) -> indexOfIndices
    423:431:java.lang.Object setNDConf(neureka.ndim.config.NDConfiguration) -> setNDConf
    439:439:int rank() -> rank
    444:444:java.util.List shape() -> shape
    446:446:int shape(int) -> shape
    448:448:java.util.List indicesMap() -> indicesMap
    450:450:java.util.List translation() -> translation
    452:452:java.util.List spread() -> spread
    454:454:java.util.List offset() -> offset
    456:456:int size() -> size
    459:461:java.util.List _asList(int[]) -> a
    426:426:int lambda$setNDConf$1(int,int) -> a
    425:425:int lambda$setNDConf$0(int,int) -> b
    68:68:void <clinit>() -> <clinit>
neureka.ndim.AbstractNDArray$1 -> neureka.ndim.AbstractNDArray$1:
    neureka.ndim.AbstractNDArray val$nda -> a
    286:286:void <init>(neureka.ndim.AbstractNDArray,neureka.ndim.AbstractNDArray) -> <init>
    287:287:void setType(neureka.dtype.DataType) -> setType
    288:288:void setConf(neureka.ndim.config.NDConfiguration) -> setConf
    289:289:void setData(java.lang.Object) -> setData
    290:290:void allocate(int) -> allocate
    291:291:java.lang.Object getData() -> getData
    292:292:void setIsVirtual(boolean) -> setIsVirtual
neureka.ndim.AbstractNDArray$Utility -> neureka.ndim.AbstractNDArray$Utility:
    467:467:void <init>() -> <init>
neureka.ndim.AbstractNDArray$Utility$Indexing -> neureka.ndim.AbstractNDArray$Utility$Indexing:
    483:483:void <init>() -> <init>
    487:497:void shpCheck(int[],neureka.Tsr) -> shpCheck
    501:522:int[][] makeFit(int[],int[]) -> makeFit
    527:529:int[] shpOfCon(int[],int[]) -> shpOfCon
    534:541:int[] shpOfBrc(int[],int[]) -> shpOfBrc
neureka.ndim.AbstractNDArray$Utility$Stringify -> neureka.ndim.AbstractNDArray$Utility$Stringify:
    469:469:void <init>() -> <init>
    473:476:java.lang.String strConf(int[]) -> strConf
neureka.ndim.Initializer -> neureka.ndim.Initializer:
    java.lang.Object init(int,int[]) -> init
neureka.ndim.NDAConstructor -> neureka.ndim.NDAConstructor:
    org.slf4j.Logger _LOG -> a
    neureka.ndim.NDAConstructor$API _API -> b
    37:37:void <init>(neureka.ndim.NDAConstructor$API) -> <init>
    49:74:void configureFromNewShape(int[],boolean,boolean) -> configureFromNewShape
    77:98:void tryConstructing(int[],neureka.dtype.DataType,java.lang.Object) -> tryConstructing
    1101:1106:java.lang.Object _autoConvertAndOptimizeObjectArray(java.lang.Object[],neureka.dtype.DataType,int):101:106 -> tryConstructing
    1101:1106:void tryConstructing(int[],neureka.dtype.DataType,java.lang.Object):83 -> tryConstructing
    110:118:boolean _constructAllFromOne(int[],java.lang.Object) -> _constructAllFromOne
    1127:1129:void _constructAllF32(int[],float):127:129 -> _constructAllFromOne
    1127:1129:boolean _constructAllFromOne(int[],java.lang.Object):111 -> _constructAllFromOne
    1132:1134:void _constructAllI32(int[],int):132:134 -> _constructAllFromOne
    1132:1134:boolean _constructAllFromOne(int[],java.lang.Object):112 -> _constructAllFromOne
    1137:1139:void _constructAllI16(int[],short):137:139 -> _constructAllFromOne
    1137:1139:boolean _constructAllFromOne(int[],java.lang.Object):113 -> _constructAllFromOne
    1142:1144:void _constructAllI8(int[],byte):142:144 -> _constructAllFromOne
    1142:1144:boolean _constructAllFromOne(int[],java.lang.Object):114 -> _constructAllFromOne
    1147:1149:void _constructAllI64(int[],long):147:149 -> _constructAllFromOne
    1147:1149:boolean _constructAllFromOne(int[],java.lang.Object):115 -> _constructAllFromOne
    1152:1154:void _constructAllBool(int[],boolean):152:154 -> _constructAllFromOne
    1152:1154:boolean _constructAllFromOne(int[],java.lang.Object):116 -> _constructAllFromOne
    1157:1159:void _constructAllChar(int[],char):157:159 -> _constructAllFromOne
    1157:1159:boolean _constructAllFromOne(int[],java.lang.Object):117 -> _constructAllFromOne
    122:124:void _constructAllF64(int[],double) -> _constructAllF64
    162:165:void _constructAll(int[],java.lang.Class) -> a
    175:197:void constructFor(java.util.List) -> constructFor
    201:209:void constructForDoubles(int[],double[]) -> constructForDoubles
    213:220:void constructForFloats(int[],float[]) -> constructForFloats
    224:231:void constructForInts(int[],int[]) -> constructForInts
    235:242:void constructForShorts(int[],short[]) -> constructForShorts
    246:253:void constructForBooleans(int[],boolean[]) -> constructForBooleans
    257:264:void constructForBytes(int[],byte[]) -> constructForBytes
    268:275:void constructForLongs(int[],long[]) -> constructForLongs
    278:301:void constructSeeded(java.lang.Class,int[],java.lang.Object) -> constructSeeded
    304:328:java.lang.Object optimizeObjectArray(neureka.dtype.DataType,java.lang.Object[],int) -> optimizeObjectArray
    308:308:long lambda$optimizeObjectArray$8(java.lang.Object[],int) -> a
    307:307:int lambda$optimizeObjectArray$7(java.lang.Object[],int) -> b
    306:306:double lambda$optimizeObjectArray$6(java.lang.Object[],int) -> c
    305:305:int lambda$optimizeObjectArray$5(java.lang.Object[],int) -> d
    305:305:int lambda$optimizeObjectArray$4(int) -> a
    178:178:boolean lambda$constructFor$3(int,java.util.List) -> a
    175:175:boolean lambda$constructFor$2(java.util.List) -> a
    175:175:boolean lambda$constructFor$1(java.lang.Object) -> a
    101:101:boolean lambda$_autoConvertAndOptimizeObjectArray$0(neureka.dtype.DataType,java.lang.Object) -> a
    20:20:void <clinit>() -> <clinit>
neureka.ndim.NDAConstructor$API -> neureka.ndim.NDAConstructor$API:
    void setType(neureka.dtype.DataType) -> setType
    void setConf(neureka.ndim.config.NDConfiguration) -> setConf
    void setData(java.lang.Object) -> setData
    void allocate(int) -> allocate
    java.lang.Object getData() -> getData
    void setIsVirtual(boolean) -> setIsVirtual
neureka.ndim.config.AbstractNDC -> neureka.ndim.config.AbstractNDC:
    java.util.Map _CACHED_NDCS -> a
    java.util.Map _CACHED_INT_ARRAYS -> b
    boolean $assertionsDisabled -> c
    24:24:void <init>() -> <init>
    60:83:int[] _cacheArray(int[]) -> _cacheArray
    92:96:long keyCode() -> keyCode
    102:106:boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    118:149:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    154:160:neureka.ndim.config.NDConfiguration _cached(neureka.ndim.config.NDConfiguration) -> _cached
    171:177:boolean _isSimpleConfiguration(int[],int[],int[],int[],int[]) -> a
    184:189:java.lang.String toString() -> toString
    195:208:neureka.ndim.config.NDConfiguration _simpleReshape(int[],neureka.ndim.config.NDConfiguration) -> _simpleReshape
    215:218:neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
    24:48:void <clinit>() -> <clinit>
neureka.ndim.config.NDConfiguration -> neureka.ndim.config.NDConfiguration:
    int rank() -> rank
    int[] shape() -> shape
    int shape(int) -> shape
    int[] indicesMap() -> indicesMap
    int indicesMap(int) -> indicesMap
    int[] translation() -> translation
    int translation(int) -> translation
    int[] spread() -> spread
    int spread(int) -> spread
    int[] offset() -> offset
    int offset(int) -> offset
    int indexOfIndex(int) -> indexOfIndex
    int[] indicesOfIndex(int) -> indicesOfIndex
    int indexOfIndices(int[]) -> indexOfIndices
    139:146:int[] asInlineArray() -> asInlineArray
    long keyCode() -> keyCode
    boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
    178:185:boolean isSimple() -> isSimple
    189:190:neureka.ndim.config.NDConfiguration$IndexToIndexFunction getIndexToIndexAccessPattern() -> getIndexToIndexAccessPattern
    185:185:boolean lambda$isSimple$1(int) -> a
    181:181:boolean lambda$isSimple$0(int) -> b
neureka.ndim.config.NDConfiguration$IndexToIndexFunction -> neureka.ndim.config.NDConfiguration$IndexToIndexFunction:
    int map(int) -> map
neureka.ndim.config.NDConfiguration$Utility -> neureka.ndim.config.NDConfiguration$Utility:
    200:200:void <init>() -> <init>
    204:210:int[] rearrange(int[],int[],int[]) -> rearrange
    215:220:int[] rearrange(int[],int[]) -> rearrange
    225:231:int[] newTlnOf(int[]) -> newTlnOf
    236:238:void increment(int[],int[]) -> increment
    1243:1252:int _incrementAt(int,int[],int[]):243:252 -> increment
    1243:1252:void increment(int[],int[]):237 -> increment
    257:259:int szeOfShp(int[]) -> szeOfShp
neureka.ndim.config.types.D1C -> neureka.ndim.config.types.D1C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int) -> indexOfIndices
neureka.ndim.config.types.D2C -> neureka.ndim.config.types.D2C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.D3C -> neureka.ndim.config.types.D3C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexD1Configuration -> neureka.ndim.config.types.complex.ComplexD1Configuration:
    int _shape -> _shape
    int _translation -> a
    int _indicesMap -> b
    int _spread -> c
    int _offset -> d
    boolean $assertionsDisabled -> e
    37:37:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    46:55:void <init>(int,int,int,int,int) -> <init>
    59:59:int rank() -> rank
    64:64:int[] shape() -> shape
    69:69:int shape(int) -> shape
    74:74:int[] indicesMap() -> indicesMap
    79:79:int indicesMap(int) -> indicesMap
    84:84:int[] translation() -> translation
    89:89:int translation(int) -> translation
    94:94:int[] spread() -> spread
    99:99:int spread(int) -> spread
    104:104:int[] offset() -> offset
    109:109:int offset(int) -> offset
    115:115:int indexOfIndex(int) -> indexOfIndex
    120:120:int[] indicesOfIndex(int) -> indicesOfIndex
    124:124:int indexOfIndices(int[]) -> indexOfIndices
    130:130:int indexOfIndices(int) -> indexOfIndices
    6:6:void <clinit>() -> <clinit>
neureka.ndim.config.types.complex.ComplexD2Configuration -> neureka.ndim.config.types.complex.ComplexD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    int _indicesMap1 -> c
    int _indicesMap2 -> d
    int _spread1 -> e
    int _spread2 -> f
    int _offset1 -> g
    int _offset2 -> h
    41:52:void <init>(int[],int[],int[],int[],int[]) -> <init>
    61:61:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    66:66:int rank() -> rank
    71:71:int[] shape() -> shape
    76:76:int shape(int) -> shape
    81:81:int[] indicesMap() -> indicesMap
    86:86:int indicesMap(int) -> indicesMap
    91:91:int[] translation() -> translation
    96:96:int translation(int) -> translation
    101:101:int[] spread() -> spread
    106:106:int spread(int) -> spread
    111:111:int[] offset() -> offset
    116:116:int offset(int) -> offset
    124:124:int indexOfIndex(int) -> indexOfIndex
    130:134:int[] indicesOfIndex(int) -> indicesOfIndex
    139:142:int indexOfIndices(int[]) -> indexOfIndices
    147:150:int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexD3Configuration -> neureka.ndim.config.types.complex.ComplexD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    int _indicesMap1 -> d
    int _indicesMap2 -> e
    int _indicesMap3 -> f
    int _spread1 -> g
    int _spread2 -> h
    int _spread3 -> i
    int _offset1 -> j
    int _offset2 -> k
    int _offset3 -> l
    46:62:void <init>(int[],int[],int[],int[],int[]) -> <init>
    71:71:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    76:76:int rank() -> rank
    81:81:int[] shape() -> shape
    86:86:int shape(int) -> shape
    91:91:int[] indicesMap() -> indicesMap
    96:96:int indicesMap(int) -> indicesMap
    101:101:int[] translation() -> translation
    106:106:int translation(int) -> translation
    111:111:int[] spread() -> spread
    116:116:int spread(int) -> spread
    121:121:int[] offset() -> offset
    126:126:int offset(int) -> offset
    135:140:int indexOfIndex(int) -> indexOfIndex
    148:153:int[] indicesOfIndex(int) -> indicesOfIndex
    158:158:int indexOfIndices(int[]) -> indexOfIndices
    165:165:int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration -> neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation -> a
    int[] _indicesMap -> b
    int[] _spread -> c
    int[] _offset -> d
    41:47:void <init>(int[],int[],int[],int[],int[]) -> <init>
    56:56:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    61:61:int rank() -> rank
    66:66:int[] shape() -> shape
    71:71:int shape(int) -> shape
    76:76:int[] indicesMap() -> indicesMap
    81:81:int indicesMap(int) -> indicesMap
    86:86:int[] translation() -> translation
    91:91:int translation(int) -> translation
    96:96:int[] spread() -> spread
    101:101:int spread(int) -> spread
    106:106:int[] offset() -> offset
    111:111:int offset(int) -> offset
    119:119:int indexOfIndex(int) -> indexOfIndex
    124:129:int[] indicesOfIndex(int) -> indicesOfIndex
    134:137:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexScalarConfiguration -> neureka.ndim.config.types.complex.ComplexScalarConfiguration:
    int _shape -> _shape
    int _offset -> a
    25:25:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    31:34:void <init>(int,int) -> <init>
    38:38:int rank() -> rank
    43:43:int[] shape() -> shape
    48:48:int shape(int) -> shape
    53:53:int[] indicesMap() -> indicesMap
    58:58:int indicesMap(int) -> indicesMap
    63:63:int[] translation() -> translation
    68:68:int translation(int) -> translation
    73:73:int[] spread() -> spread
    78:78:int spread(int) -> spread
    83:83:int[] offset() -> offset
    88:88:int offset(int) -> offset
    94:94:int indexOfIndex(int) -> indexOfIndex
    99:99:int[] indicesOfIndex(int) -> indicesOfIndex
    104:104:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD1Configuration -> neureka.ndim.config.types.simple.SimpleD1Configuration:
    int _shape -> _shape
    int _translation_and_indicesMap -> a
    23:23:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    29:32:void <init>(int,int) -> <init>
    36:36:int rank() -> rank
    41:41:int[] shape() -> shape
    46:46:int shape(int) -> shape
    51:51:int[] indicesMap() -> indicesMap
    56:56:int indicesMap(int) -> indicesMap
    61:61:int[] translation() -> translation
    66:66:int translation(int) -> translation
    71:71:int[] spread() -> spread
    76:76:int spread(int) -> spread
    81:81:int[] offset() -> offset
    86:86:int offset(int) -> offset
    92:92:int indexOfIndex(int) -> indexOfIndex
    97:97:int[] indicesOfIndex(int) -> indicesOfIndex
    102:102:int indexOfIndices(int[]) -> indexOfIndices
    107:107:int indexOfIndices(int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD2Configuration -> neureka.ndim.config.types.simple.SimpleD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    23:28:void <init>(int[],int[]) -> <init>
    34:34:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    40:40:int rank() -> rank
    45:45:int[] shape() -> shape
    50:50:int shape(int) -> shape
    55:55:int[] indicesMap() -> indicesMap
    60:60:int indicesMap(int) -> indicesMap
    65:65:int[] translation() -> translation
    70:70:int translation(int) -> translation
    75:75:int[] spread() -> spread
    80:80:int spread(int) -> spread
    85:85:int[] offset() -> offset
    90:90:int offset(int) -> offset
    98:98:int indexOfIndex(int) -> indexOfIndex
    104:108:int[] indicesOfIndex(int) -> indicesOfIndex
    113:116:int indexOfIndices(int[]) -> indexOfIndices
    121:124:int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD3Configuration -> neureka.ndim.config.types.simple.SimpleD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    24:31:void <init>(int[],int[]) -> <init>
    37:37:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    42:42:int rank() -> rank
    47:47:int[] shape() -> shape
    52:52:int shape(int) -> shape
    57:57:int[] indicesMap() -> indicesMap
    62:62:int indicesMap(int) -> indicesMap
    67:67:int[] translation() -> translation
    72:72:int translation(int) -> translation
    77:77:int[] spread() -> spread
    82:82:int spread(int) -> spread
    87:87:int[] offset() -> offset
    92:92:int offset(int) -> offset
    101:106:int indexOfIndex(int) -> indexOfIndex
    114:119:int[] indicesOfIndex(int) -> indicesOfIndex
    124:124:int indexOfIndices(int[]) -> indexOfIndices
    131:131:int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration -> neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation_and_indicesMap -> a
    23:26:void <init>(int[],int[]) -> <init>
    32:32:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    37:37:int rank() -> rank
    42:42:int[] shape() -> shape
    47:47:int shape(int) -> shape
    52:52:int[] indicesMap() -> indicesMap
    57:57:int indicesMap(int) -> indicesMap
    62:62:int[] translation() -> translation
    67:67:int translation(int) -> translation
    72:74:int[] spread() -> spread
    79:79:int spread(int) -> spread
    84:84:int[] offset() -> offset
    89:89:int offset(int) -> offset
    97:97:int indexOfIndex(int) -> indexOfIndex
    102:107:int[] indicesOfIndex(int) -> indicesOfIndex
    112:114:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleScalarConfiguration -> neureka.ndim.config.types.simple.SimpleScalarConfiguration:
    9:9:neureka.ndim.config.NDConfiguration construct() -> construct
    12:12:void <init>() -> <init>
    16:16:int rank() -> rank
    21:21:int[] shape() -> shape
    26:26:int shape(int) -> shape
    31:31:int[] indicesMap() -> indicesMap
    36:36:int indicesMap(int) -> indicesMap
    41:41:int[] translation() -> translation
    46:46:int translation(int) -> translation
    51:51:int[] spread() -> spread
    56:56:int spread(int) -> spread
    61:61:int[] offset() -> offset
    66:66:int offset(int) -> offset
    71:71:int indexOfIndex(int) -> indexOfIndex
    76:76:int[] indicesOfIndex(int) -> indicesOfIndex
    81:81:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.views.SimpleReshapeView -> neureka.ndim.config.types.views.SimpleReshapeView:
    neureka.ndim.config.NDConfiguration _toBeViewed -> a
    int[] _form -> b
    int[] _formTranslator -> c
    int[] _shape -> d
    int[] _translation -> e
    int[] _indicesMap -> f
    int[] _spread -> g
    int[] _offset -> h
    23:44:void <init>(int[],neureka.ndim.config.NDConfiguration) -> <init>
    48:48:int rank() -> rank
    53:53:int[] shape() -> shape
    58:58:int shape(int) -> shape
    63:63:int[] indicesMap() -> indicesMap
    68:68:int indicesMap(int) -> indicesMap
    73:73:int[] translation() -> translation
    78:78:int translation(int) -> translation
    83:83:int[] spread() -> spread
    88:88:int spread(int) -> spread
    93:93:int[] offset() -> offset
    98:98:int offset(int) -> offset
    103:103:int indexOfIndex(int) -> indexOfIndex
    108:113:int[] indicesOfIndex(int) -> indicesOfIndex
    118:119:int indexOfIndices(int[]) -> indexOfIndices
    1124:1127:int[] _rearrange(int[],int[],int[]):124:127 -> indexOfIndices
    1124:1127:int indexOfIndices(int[]):118 -> indexOfIndices
    35:35:int lambda$new$0(java.lang.Integer) -> a
neureka.ndim.config.types.virtual.VirtualNDConfiguration -> neureka.ndim.config.types.virtual.VirtualNDConfiguration:
    java.util.Map _Virtual_Cache -> a
    int[] _shape -> b
    16:18:void <init>(int[]) -> <init>
    23:30:neureka.ndim.config.NDConfiguration construct(int[]) -> construct
    35:35:int rank() -> rank
    40:40:int[] shape() -> shape
    45:45:int shape(int) -> shape
    50:50:int[] indicesMap() -> indicesMap
    55:55:int indicesMap(int) -> indicesMap
    60:60:int[] translation() -> translation
    65:65:int translation(int) -> translation
    70:70:int[] spread() -> spread
    75:75:int spread(int) -> spread
    80:80:int[] offset() -> offset
    85:85:int offset(int) -> offset
    90:90:int indexOfIndex(int) -> indexOfIndex
    95:95:int[] indicesOfIndex(int) -> indicesOfIndex
    100:100:int indexOfIndices(int[]) -> indexOfIndices
    12:12:void <clinit>() -> <clinit>
neureka.ndim.iterators.NDIterator -> neureka.ndim.iterators.NDIterator:
    64:64:neureka.ndim.iterators.NDIterator of(neureka.Tsr) -> of
    69:82:neureka.ndim.iterators.NDIterator of(neureka.Tsr,neureka.ndim.iterators.NDIterator$NonVirtual) -> of
    int shape(int) -> shape
    int[] shape() -> shape
    void increment() -> increment
    void decrement() -> decrement
    int i() -> i
    int get(int) -> get
    int[] get() -> get
    void set(int,int) -> set
    void set(int[]) -> set
    int rank() -> rank
    108:119:java.lang.String asString() -> asString
    117:117:void lambda$asString$1(java.util.StringJoiner,int) -> a
    112:112:void lambda$asString$0(java.util.StringJoiner,int) -> b
neureka.ndim.iterators.NDIterator$NonVirtual -> neureka.ndim.iterators.NDIterator$NonVirtual:
    neureka.ndim.iterators.NDIterator$NonVirtual TRUE -> TRUE
    neureka.ndim.iterators.NDIterator$NonVirtual FALSE -> FALSE
    neureka.ndim.iterators.NDIterator$NonVirtual[] $VALUES -> a
    61:61:neureka.ndim.iterators.NDIterator$NonVirtual[] values() -> values
    61:61:neureka.ndim.iterators.NDIterator$NonVirtual valueOf(java.lang.String) -> valueOf
    61:61:void <init>(java.lang.String,int) -> <init>
    61:61:void <clinit>() -> <clinit>
neureka.ndim.iterators.types.DefaultNDIterator -> neureka.ndim.iterators.types.DefaultNDIterator:
    int[] _indices -> a
    int[] _shape -> b
    neureka.ndim.config.NDConfiguration _conf -> c
    12:16:void <init>(neureka.ndim.config.NDConfiguration) -> <init>
    20:20:int shape(int) -> shape
    25:25:int[] shape() -> shape
    30:31:void increment() -> increment
    36:36:void decrement() -> decrement
    40:40:int i() -> i
    45:45:int get(int) -> get
    50:50:int[] get() -> get
    55:56:void set(int,int) -> set
    60:61:void set(int[]) -> set
    65:65:int rank() -> rank
neureka.ndim.iterators.types.VirtualNDIterator -> neureka.ndim.iterators.types.VirtualNDIterator:
    neureka.ndim.config.types.virtual.VirtualNDConfiguration _conf -> a
    10:10:void <init>(neureka.ndim.config.types.virtual.VirtualNDConfiguration) -> <init>
    13:13:int shape(int) -> shape
    16:16:int[] shape() -> shape
    21:21:void increment() -> increment
    26:26:void decrement() -> decrement
    30:30:int i() -> i
    35:35:int get(int) -> get
    44:44:int[] get() -> get
    54:54:void set(int,int) -> set
    59:59:void set(int[]) -> set
    62:62:int rank() -> rank
neureka.ndim.iterators.types.complex.ComplexD1CIterator -> neureka.ndim.iterators.types.complex.ComplexD1CIterator:
    int _d1 -> a
    11:12:void <init>(neureka.ndim.config.types.complex.ComplexD1Configuration) -> <init>
    16:17:void increment() -> increment
    21:22:void decrement() -> decrement
    27:27:int i() -> i
    32:32:int get(int) -> get
    37:37:int[] get() -> get
    42:43:void set(int,int) -> set
    47:48:void set(int[]) -> set
    52:52:int rank() -> rank
neureka.ndim.iterators.types.complex.main.ComplexD2CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.complex.ComplexD2Configuration) -> <init>
    18:23:void increment() -> increment
    27:31:void decrement() -> decrement
    35:35:int i() -> i
    40:40:int get(int) -> get
    45:45:int[] get() -> get
    50:52:void set(int,int) -> set
    56:58:void set(int[]) -> set
neureka.ndim.iterators.types.complex.main.ComplexD3CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD3CIterator:
    int _d1 -> a
    int _d2 -> b
    int _d3 -> c
    8:14:void <init>(neureka.ndim.config.types.complex.ComplexD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.ndim.iterators.types.simple.SimpleD1CIterator -> neureka.ndim.iterators.types.simple.SimpleD1CIterator:
    int _d1 -> a
    12:13:void <init>(neureka.ndim.config.types.simple.SimpleD1Configuration) -> <init>
    18:19:void increment() -> increment
    23:24:void decrement() -> decrement
    29:29:int i() -> i
    34:34:int get(int) -> get
    39:39:int[] get() -> get
    44:45:void set(int,int) -> set
    49:50:void set(int[]) -> set
    54:54:int rank() -> rank
neureka.ndim.iterators.types.simple.main.SimpleD2CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.simple.SimpleD2Configuration) -> <init>
    17:22:void increment() -> increment
    26:30:void decrement() -> decrement
    34:34:int i() -> i
    39:39:int get(int) -> get
    44:44:int[] get() -> get
    49:51:void set(int,int) -> set
    55:57:void set(int[]) -> set
neureka.ndim.iterators.types.simple.main.SimpleD3CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.simple.SimpleD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.optimization.Optimization -> neureka.optimization.Optimization:
    neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.Optimizer -> neureka.optimization.Optimizer:
    44:44:neureka.optimization.Optimizer of(neureka.optimization.Optimization) -> of
    51:51:neureka.optimization.Optimizer ofGradient(neureka.optimization.Optimization) -> ofGradient
neureka.optimization.Optimizer$1 -> neureka.optimization.Optimizer$1:
    neureka.optimization.Optimization val$o -> a
    44:44:void <init>(neureka.optimization.Optimization) -> <init>
    45:45:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    46:46:neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.Optimizer$2 -> neureka.optimization.Optimizer$2:
    neureka.optimization.Optimization val$o -> a
    51:51:void <init>(neureka.optimization.Optimization) -> <init>
    52:52:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    53:53:neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.implementations.ADAM -> neureka.optimization.implementations.ADAM:
    neureka.Tsr a -> a
    neureka.Tsr b1 -> b
    neureka.Tsr b2 -> c
    neureka.Tsr e -> d
    neureka.Tsr m -> e
    neureka.Tsr v -> f
    52:60:void <init>(neureka.Tsr) -> <init>
    75:75:neureka.Tsr optimize(neureka.Tsr) -> optimize
    1063:1070:neureka.Tsr _optimize(neureka.Tsr):63:70 -> optimize
    1063:1070:neureka.Tsr optimize(neureka.Tsr):75 -> optimize
    80:81:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.optimization.implementations.SGD -> neureka.optimization.implementations.SGD:
    double _learningRate -> a
    neureka.calculus.Function _function -> b
    49:52:void <init>(double) -> <init>
    56:57:neureka.Tsr optimize(neureka.Tsr) -> optimize
    61:61:double learningRate() -> learningRate
    66:67:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.view.TsrAsString -> neureka.view.TsrAsString:
    int _cellSize -> a
    int _rowLimit -> b
    boolean _hasGradient -> c
    boolean _isCompact -> d
    boolean _isMultiline -> e
    boolean _haveSlimNumbers -> f
    boolean _hasValue -> g
    boolean _hasShape -> h
    boolean _hasRecursiveGraph -> i
    boolean _hasDerivatives -> j
    boolean _isCellBound -> k
    java.lang.String _prefix -> l
    java.lang.String _postfix -> m
    int[] _shape -> n
    neureka.Tsr _tensor -> o
    boolean _legacy -> p
    neureka.view.TsrStringSettings _config -> q
    java.lang.StringBuilder _asStr -> r
    boolean $assertionsDisabled -> s
    87:87:neureka.view.TsrAsString$Builder representing(neureka.Tsr) -> representing
    110:135:void <init>(neureka.Tsr,neureka.view.TsrStringSettings) -> <init>
    148:148:neureka.view.TsrAsString _$(java.lang.String) -> a
    161:161:neureka.view.TsrAsString _$(int) -> a
    175:196:neureka.view.TsrAsString$ValStringifier _createValStringifierAndFormatter(java.lang.Object) -> a
    1206:1247:neureka.view.TsrAsString$ValStringifier _createBasicStringifierFor(java.lang.Object,boolean):206:247 -> a
    1206:1247:neureka.view.TsrAsString$ValStringifier _createValStringifierAndFormatter(java.lang.Object):175 -> a
    251:310:java.lang.String toString() -> toString
    1315:1322:java.lang.String _postProcessed(java.lang.String):315:322 -> toString
    1315:1322:java.lang.String toString():310 -> toString
    327:338:void _stringifyAllValues() -> a
    354:363:void _buildRow(int,int,int,int[],neureka.view.TsrAsString$NDValStringifier,java.lang.String) -> a
    379:443:void _recursiveFormatting(int[],int) -> a
    446:456:neureka.view.TsrAsString _buildSingleLabel(neureka.framing.NDFrame,int,int[]) -> a
    465:472:void _strShape() -> b
    477:492:java.lang.String formatFP(double) -> a
    416:416:java.lang.String lambda$_recursiveFormatting$17(neureka.view.TsrAsString$ValStringifier,int[]) -> a
    415:415:java.lang.String lambda$_recursiveFormatting$16(neureka.view.TsrAsString$ValStringifier,int[]) -> b
    402:402:java.lang.String lambda$_recursiveFormatting$15(neureka.view.TsrAsString$ValStringifier,int[]) -> c
    305:307:void lambda$toString$14(neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    287:298:void lambda$toString$13(java.lang.String,java.lang.String,java.lang.String,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    274:277:void lambda$toString$12(neureka.view.TsrStringSettings) -> a
    247:247:java.lang.String lambda$_createBasicStringifierFor$11(java.lang.Object,int) -> a
    245:245:java.lang.String lambda$_createBasicStringifierFor$10(java.lang.Object,int) -> b
    243:243:java.lang.String lambda$_createBasicStringifierFor$9(java.lang.Object,int) -> c
    239:241:java.lang.String lambda$_createBasicStringifierFor$8(boolean,java.lang.Object,int) -> a
    235:237:java.lang.String lambda$_createBasicStringifierFor$7(boolean,java.lang.Object,int) -> b
    231:233:java.lang.String lambda$_createBasicStringifierFor$6(boolean,java.lang.Object,int) -> c
    227:229:java.lang.String lambda$_createBasicStringifierFor$5(boolean,java.lang.Object,int) -> d
    223:225:java.lang.String lambda$_createBasicStringifierFor$4(boolean,java.util.function.Function,java.lang.Object,int) -> a
    219:221:java.lang.String lambda$_createBasicStringifierFor$3(boolean,java.util.function.Function,java.lang.Object,int) -> b
    210:215:java.lang.String lambda$_createBasicStringifierFor$2(java.lang.String) -> b
    189:192:java.lang.String lambda$_createValStringifierAndFormatter$1(neureka.view.TsrAsString$ValStringifier,int,int) -> a
    179:183:java.lang.String lambda$_createValStringifierAndFormatter$0(neureka.view.TsrAsString$ValStringifier,int,int) -> b
    58:58:void <init>(neureka.Tsr,neureka.view.TsrStringSettings,byte) -> <init>
    58:58:void <clinit>() -> <clinit>
neureka.view.TsrAsString$1 -> neureka.view.TsrAsString$1:
    neureka.Tsr val$t -> a
    87:87:void <init>(neureka.Tsr) -> <init>
    94:94:neureka.view.TsrAsString withConfig(neureka.view.TsrStringSettings) -> withConfig
    101:101:neureka.view.TsrAsString withConfig(java.lang.String) -> withConfig
    106:106:neureka.view.TsrAsString byDefaults() -> byDefaults
neureka.view.TsrAsString$Builder -> neureka.view.TsrAsString$Builder:
    neureka.view.TsrAsString withConfig(neureka.view.TsrStringSettings) -> withConfig
    neureka.view.TsrAsString withConfig(java.lang.String) -> withConfig
    neureka.view.TsrAsString byDefaults() -> byDefaults
neureka.view.TsrAsString$NDValStringifier -> neureka.view.TsrAsString$a:
    java.lang.String stringify(int[]) -> stringify
neureka.view.TsrAsString$Util -> neureka.view.TsrAsString$Util:
    543:543:void <init>() -> <init>
    546:546:java.lang.String indent(int) -> indent
    550:550:java.lang.String pad(int,java.lang.String) -> pad
    555:555:java.lang.String pad(java.lang.String,int) -> pad
neureka.view.TsrAsString$ValStringifier -> neureka.view.TsrAsString$b:
    java.lang.String stringify(int) -> stringify
neureka.view.TsrStringSettings -> neureka.view.TsrStringSettings:
    java.util.function.Supplier _notModifyable -> a
    int _cellSize -> b
    int _rowLimit -> c
    boolean _hasGradient -> d
    boolean _isScientific -> e
    boolean _multiline -> f
    boolean _haveSlimNumbers -> g
    boolean _hasValue -> h
    boolean _hasShape -> i
    boolean _hasRecursiveGraph -> j
    boolean _hasDerivatives -> k
    boolean _isCellBound -> l
    java.lang.String _prefix -> m
    java.lang.String _postfix -> n
    java.lang.String _indent -> o
    boolean _legacy -> p
    24:39:void <init>(java.util.function.Supplier) -> <init>
    42:44:neureka.view.TsrStringSettings clone() -> clone
    48:49:neureka.view.TsrStringSettings with(neureka.view.TsrStringSettings) -> with
    53:67:void _imposeOn(neureka.view.TsrStringSettings) -> a
    70:70:int getCellSize() -> getCellSize
    74:76:neureka.view.TsrStringSettings setCellSize(int) -> setCellSize
    80:80:int getRowLimit() -> getRowLimit
    84:86:neureka.view.TsrStringSettings setRowLimit(int) -> setRowLimit
    90:90:boolean getHasGradient() -> getHasGradient
    94:96:neureka.view.TsrStringSettings setHasGradient(boolean) -> setHasGradient
    100:100:boolean getIsScientific() -> getIsScientific
    104:106:neureka.view.TsrStringSettings setIsScientific(boolean) -> setIsScientific
    110:110:boolean getIsMultiline() -> getIsMultiline
    114:116:neureka.view.TsrStringSettings setIsMultiline(boolean) -> setIsMultiline
    120:120:boolean getHasSlimNumbers() -> getHasSlimNumbers
    124:126:neureka.view.TsrStringSettings setHasSlimNumbers(boolean) -> setHasSlimNumbers
    130:130:boolean getHasValue() -> getHasValue
    134:136:neureka.view.TsrStringSettings setHasValue(boolean) -> setHasValue
    140:140:boolean getHasShape() -> getHasShape
    144:146:neureka.view.TsrStringSettings setHasShape(boolean) -> setHasShape
    150:150:boolean getHasRecursiveGraph() -> getHasRecursiveGraph
    154:156:neureka.view.TsrStringSettings setHasRecursiveGraph(boolean) -> setHasRecursiveGraph
    160:160:boolean getHasDerivatives() -> getHasDerivatives
    164:166:neureka.view.TsrStringSettings setHasDerivatives(boolean) -> setHasDerivatives
    170:170:boolean getIsCellBound() -> getIsCellBound
    174:176:neureka.view.TsrStringSettings setIsCellBound(boolean) -> setIsCellBound
    180:180:java.lang.String getPrefix() -> getPrefix
    184:186:neureka.view.TsrStringSettings setPrefix(java.lang.String) -> setPrefix
    190:190:java.lang.String getPostfix() -> getPostfix
    194:196:neureka.view.TsrStringSettings setPostfix(java.lang.String) -> setPostfix
    200:200:java.lang.String getIndent() -> getIndent
    204:206:neureka.view.TsrStringSettings setIndent(java.lang.String) -> setIndent
    210:210:boolean getIsLegacy() -> getIsLegacy
    214:216:neureka.view.TsrStringSettings setIsLegacy(boolean) -> setIsLegacy
    222:239:neureka.view.TsrStringSettings with(java.lang.String) -> with
    5:5:java.lang.Object clone() -> clone
    42:42:java.lang.Boolean lambda$clone$0() -> a
