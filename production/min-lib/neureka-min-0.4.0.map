neureka.Component -> neureka.Component:
    void update(java.lang.Object,java.lang.Object) -> update
neureka.Neureka -> neureka.Neureka:
    java.lang.ThreadLocal _INSTANCES -> a
    java.lang.String _VERSION -> b
    boolean _OPENCL_AVAILABLE -> c
    neureka.Neureka$Settings _settings -> d
    neureka.Neureka$Utility _utility -> e
    67:70:void <init>() -> <init>
    73:81:neureka.Neureka instance() -> instance
    85:86:void setContext(neureka.Neureka) -> setContext
    89:91:neureka.Neureka instance(java.lang.Object) -> instance
    95:95:boolean canAccessOpenCL() -> canAccessOpenCL
    99:99:neureka.Neureka$Settings settings() -> settings
    103:104:neureka.Neureka$Settings settings(java.lang.Object) -> settings
    108:108:neureka.Neureka$Utility utility() -> utility
    112:112:java.lang.String version() -> version
    117:127:void reset() -> reset
    130:130:boolean _currentThreadIsAuthorized() -> a
    49:49:java.lang.String toString() -> toString
    60:62:void <clinit>() -> <clinit>
neureka.Neureka$Settings -> neureka.Neureka$Settings:
    neureka.Neureka$Settings$Debug _debug -> b
    neureka.Neureka$Settings$AutoGrad _autograd -> c
    neureka.Neureka$Settings$Indexing _indexing -> d
    neureka.Neureka$Settings$View _view -> e
    neureka.Neureka$Settings$NDim _ndim -> f
    neureka.Neureka$Settings$DType _dtype -> g
    boolean _isLocked -> h
    neureka.Neureka this$0 -> a
    144:153:void <init>(neureka.Neureka) -> <init>
    156:156:neureka.Neureka$Settings$Debug debug() -> debug
    160:161:neureka.Neureka$Settings$Debug debug(java.lang.Object) -> debug
    165:165:neureka.Neureka$Settings$AutoGrad autograd() -> autograd
    169:170:neureka.Neureka$Settings$AutoGrad autograd(java.lang.Object) -> autograd
    174:174:neureka.Neureka$Settings$Indexing indexing() -> indexing
    178:179:neureka.Neureka$Settings$Indexing indexing(java.lang.Object) -> indexing
    183:183:neureka.Neureka$Settings$View view() -> view
    187:188:neureka.Neureka$Settings$View view(java.lang.Object) -> view
    192:192:neureka.Neureka$Settings$NDim ndim() -> ndim
    196:197:neureka.Neureka$Settings$NDim ndim(java.lang.Object) -> ndim
    201:201:neureka.Neureka$Settings$DType dtype() -> dtype
    205:206:neureka.Neureka$Settings$DType dtype(java.lang.Object) -> dtype
    210:210:boolean isLocked() -> isLocked
    214:215:void setIsLocked(boolean) -> setIsLocked
    134:134:java.lang.String toString() -> toString
neureka.Neureka$Settings$AutoGrad -> neureka.Neureka$Settings$AutoGrad:
    boolean _isPreventingInlineOperations -> a
    boolean _isRetainingPendingErrorForJITProp -> b
    boolean _isApplyingGradientWhenTensorIsUsed -> c
    boolean _isApplyingGradientWhenRequested -> d
    neureka.Neureka$Settings this$1 -> e
    251:286:void <init>(neureka.Neureka$Settings) -> <init>
    289:289:boolean isPreventingInlineOperations() -> isPreventingInlineOperations
    293:295:void setIsPreventingInlineOperations(boolean) -> setIsPreventingInlineOperations
    298:298:boolean isRetainingPendingErrorForJITProp() -> isRetainingPendingErrorForJITProp
    302:304:void setIsRetainingPendingErrorForJITProp(boolean) -> setIsRetainingPendingErrorForJITProp
    307:307:boolean isApplyingGradientWhenTensorIsUsed() -> isApplyingGradientWhenTensorIsUsed
    311:313:void setIsApplyingGradientWhenTensorIsUsed(boolean) -> setIsApplyingGradientWhenTensorIsUsed
    316:316:boolean isApplyingGradientWhenRequested() -> isApplyingGradientWhenRequested
    320:322:void setIsApplyingGradientWhenRequested(boolean) -> setIsApplyingGradientWhenRequested
    250:250:java.lang.String toString() -> toString
neureka.Neureka$Settings$DType -> neureka.Neureka$Settings$DType:
    java.lang.Class _defaultDataTypeClass -> a
    boolean _isAutoConvertingExternalDataToJVMTypes -> b
    neureka.Neureka$Settings this$1 -> c
    397:401:void <init>(neureka.Neureka$Settings) -> <init>
    404:404:java.lang.Class getDefaultDataTypeClass() -> getDefaultDataTypeClass
    408:410:void setDefaultDataTypeClass(java.lang.Class) -> setDefaultDataTypeClass
    413:413:boolean getIsAutoConvertingExternalDataToJVMTypes() -> getIsAutoConvertingExternalDataToJVMTypes
    417:419:void setIsAutoConvertingExternalDataToJVMTypes(boolean) -> setIsAutoConvertingExternalDataToJVMTypes
    396:396:java.lang.String toString() -> toString
neureka.Neureka$Settings$Debug -> neureka.Neureka$Settings$Debug:
    boolean _isKeepingDerivativeTargetPayloads -> a
    neureka.Neureka$Settings this$1 -> b
    219:236:void <init>(neureka.Neureka$Settings) -> <init>
    239:239:boolean isKeepingDerivativeTargetPayloads() -> isKeepingDerivativeTargetPayloads
    243:245:void setIsKeepingDerivativeTargetPayloads(boolean) -> setIsKeepingDerivativeTargetPayloads
    218:218:java.lang.String toString() -> toString
neureka.Neureka$Settings$Indexing -> neureka.Neureka$Settings$Indexing:
    boolean _isUsingLegacyIndexing -> a
    boolean _isUsingArrayBasedIndexing -> b
    neureka.Neureka$Settings this$1 -> c
    328:332:void <init>(neureka.Neureka$Settings) -> <init>
    337:337:boolean isUsingLegacyIndexing() -> isUsingLegacyIndexing
    341:343:void setIsUsingLegacyIndexing(boolean) -> setIsUsingLegacyIndexing
    346:346:boolean isUsingArrayBasedIndexing() -> isUsingArrayBasedIndexing
    350:352:void setIsUsingArrayBasedIndexing(boolean) -> setIsUsingArrayBasedIndexing
    327:327:java.lang.String toString() -> toString
neureka.Neureka$Settings$NDim -> neureka.Neureka$Settings$NDim:
    boolean _isOnlyUsingDefaultNDConfiguration -> a
    neureka.Neureka$Settings this$1 -> b
    375:382:void <init>(neureka.Neureka$Settings) -> <init>
    385:385:boolean isOnlyUsingDefaultNDConfiguration() -> isOnlyUsingDefaultNDConfiguration
    389:391:void setIsOnlyUsingDefaultNDConfiguration(boolean) -> setIsOnlyUsingDefaultNDConfiguration
    374:374:java.lang.String toString() -> toString
neureka.Neureka$Settings$View -> neureka.Neureka$Settings$View:
    boolean _isUsingLegacyView -> a
    neureka.Neureka$Settings this$1 -> b
    358:360:void <init>(neureka.Neureka$Settings) -> <init>
    363:363:boolean isUsingLegacyView() -> isUsingLegacyView
    367:369:void setIsUsingLegacyView(boolean) -> setIsUsingLegacyView
    357:357:java.lang.String toString() -> toString
neureka.Neureka$Utility -> neureka.Neureka$Utility:
    425:425:void <init>() -> <init>
    436:449:java.lang.String readResource(java.lang.String) -> readResource
    454:468:boolean isPresent(java.lang.String) -> isPresent
neureka.Tsr -> neureka.Tsr:
    neureka.devices.Device _CPU -> a
    int _flags -> b
    int _version -> c
    150:186:void <init>() -> <init>
    150:190:void <init>(java.lang.Object) -> <init>
    150:194:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:198:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String) -> <init>
    150:202:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:206:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:210:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:214:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:218:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:222:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    150:227:void <init>(java.lang.Object[]) -> <init>
    231:300:void _construct(java.lang.Object[]) -> a
    150:311:void <init>(java.util.List,java.lang.Object) -> <init>
    150:331:void <init>(java.util.List,java.lang.String) -> <init>
    150:361:void <init>(java.util.List,java.util.List) -> <init>
    2545:2559:void _construct(int[],java.lang.Object[]):545:559 -> <init>
    2545:2559:void <init>(java.util.List,java.util.List):349 -> <init>
    150:402:void <init>(java.util.List) -> <init>
    3412:3437:void _construct(java.util.List):412:437 -> <init>
    3412:3437:void <init>(java.util.List):367 -> <init>
    150:448:void <init>(double) -> <init>
    150:453:void <init>(float[]) -> <init>
    3535:3542:void _construct(int[],float[]):535:542 -> <init>
    3535:3542:void <init>(float[]):452 -> <init>
    150:458:void <init>(int[],java.lang.String) -> <init>
    150:463:void <init>(int[]) -> <init>
    150:468:void <init>(int[],double) -> <init>
    150:473:void <init>(int[],double[]) -> <init>
    150:480:void <init>(int[],neureka.dtype.DataType) -> <init>
    150:487:void <init>(int[],java.lang.Class,java.lang.Object) -> <init>
    150:495:void <init>(int[],neureka.dtype.DataType,java.lang.Object) -> <init>
    501:503:void _construct(int[],java.lang.String) -> a
    507:510:void _construct(int[],boolean,boolean) -> a
    514:520:void _construct(int[],double) -> a
    524:531:void _construct(int[],double[]) -> a
    562:568:int[] _intArray(java.lang.Object[]) -> b
    573:580:double[] _doubleArray(java.lang.Object[]) -> c
    150:594:void <init>(java.util.List,neureka.dtype.DataType,neureka.Tsr$Initializer) -> <init>
    150:599:void <init>(int[],neureka.dtype.DataType,neureka.Tsr$Initializer) -> <init>
    603:624:void _construct(int[],neureka.dtype.DataType,neureka.Tsr$Initializer) -> a
    150:648:void <init>(java.lang.String,java.util.List) -> <init>
    150:666:void <init>(neureka.Tsr,java.lang.String) -> <init>
    150:683:void <init>(neureka.Tsr[],java.lang.String) -> <init>
    150:706:void <init>(neureka.Tsr[],java.lang.String,boolean) -> <init>
    709:712:void _construct(neureka.Tsr[],java.lang.String,boolean) -> a
    723:748:void _configureFromNewShape(int[],boolean,boolean) -> _configureFromNewShape
    4149:4154:int _dataLength():1149:1154 -> _configureFromNewShape
    4149:4154:void _configureFromNewShape(int[],boolean,boolean):731 -> _configureFromNewShape
    763:765:neureka.Tsr setRqsGradient(boolean) -> setRqsGradient
    769:769:boolean rqsGradient() -> rqsGradient
    773:777:void _setRqsGradient(boolean) -> _setRqsGradient
    786:826:neureka.Tsr setIsOutsourced(boolean) -> setIsOutsourced
    830:830:boolean isOutsourced() -> isOutsourced
    834:838:void _setIsOutsourced(boolean) -> _setIsOutsourced
    847:884:neureka.Tsr setIsVirtual(boolean) -> setIsVirtual
    888:888:boolean isVirtual() -> isVirtual
    897:901:void _setIsVirtual(boolean) -> _setIsVirtual
    910:921:neureka.Tsr setGradientApplyRqd(boolean) -> setGradientApplyRqd
    925:925:boolean gradientApplyRqd() -> gradientApplyRqd
    951:989:neureka.Component _setOrReject(neureka.Component) -> _setOrReject
    1009:1032:neureka.Component _removeOrReject(neureka.Component) -> _removeOrReject
    1053:1053:void update(neureka.Tsr,neureka.Tsr) -> update
    1068:1068:boolean isEmpty() -> isEmpty
    1072:1072:boolean isUndefined() -> isUndefined
    1076:1077:boolean isSlice() -> isSlice
    1081:1082:int sliceCount() -> sliceCount
    1086:1087:boolean isSliceParent() -> isSliceParent
    1091:1091:boolean belongsToGraph() -> belongsToGraph
    1095:1095:boolean isLeave() -> isLeave
    1099:1099:boolean isBranch() -> isBranch
    1103:1103:boolean hasGradient() -> hasGradient
    1113:1113:neureka.Tsr getGradient() -> getGradient
    1120:1121:neureka.devices.Device device() -> device
    1129:1129:neureka.autograd.GraphNode getGraphNode() -> getGraphNode
    1137:1137:neureka.framing.IndexAlias index() -> index
    1173:1185:neureka.Tsr incrementVersionBecauseOf(neureka.backend.api.ExecutionCall) -> incrementVersionBecauseOf
    1191:1204:neureka.Tsr delete() -> delete
    1209:1225:neureka.Tsr _become(neureka.Tsr) -> _become
    1240:1241:java.util.Iterator iterator() -> iterator
    1280:1283:neureka.Tsr backward(neureka.Tsr) -> backward
    1297:1298:neureka.Tsr backward(double) -> backward
    1310:1311:neureka.Tsr backward() -> backward
    1316:1333:void applyGradient() -> applyGradient
    1337:1338:void detach() -> detach
    1349:1361:neureka.Tsr label(java.lang.String[][]) -> label
    1366:1368:neureka.Tsr label(java.util.List) -> label
    1373:1374:neureka.Tsr label(java.util.Map) -> label
    1391:1391:neureka.Tsr plus(neureka.Tsr) -> plus
    1395:1395:neureka.Tsr plusAssign(neureka.Tsr) -> plusAssign
    1399:1399:neureka.Tsr plus(java.lang.Double) -> plus
    1403:1403:neureka.Tsr minus(neureka.Tsr) -> minus
    1407:1407:neureka.Tsr minusAssign(neureka.Tsr) -> minusAssign
    1411:1411:neureka.Tsr negative() -> negative
    1415:1415:neureka.Tsr multiply(neureka.Tsr) -> multiply
    1419:1419:neureka.Tsr timesAssign(neureka.Tsr) -> timesAssign
    1423:1423:neureka.Tsr multiply(java.lang.Double) -> multiply
    1427:1427:neureka.Tsr div(neureka.Tsr) -> div
    1431:1431:neureka.Tsr div(java.lang.Double) -> div
    1435:1435:neureka.Tsr divAssign(neureka.Tsr) -> divAssign
    1439:1439:neureka.Tsr mod(neureka.Tsr) -> mod
    1443:1443:neureka.Tsr modAssign(neureka.Tsr) -> modAssign
    1447:1447:neureka.Tsr power(neureka.Tsr) -> power
    1451:1451:neureka.Tsr power(java.lang.Double) -> power
    1455:1455:neureka.Tsr xor(neureka.Tsr) -> xor
    1459:1459:neureka.Tsr xor(java.lang.Double) -> xor
    1470:1473:neureka.Tsr T() -> T
    1485:1487:neureka.Tsr mean() -> mean
    1492:1501:neureka.Tsr dot(neureka.Tsr) -> dot
    1505:1505:neureka.Tsr dimtrim() -> dimtrim
    1509:1513:boolean isCase(neureka.Tsr) -> isCase
    1517:1517:boolean contains(neureka.Tsr) -> contains
    1534:1534:double getAt(int[]) -> getAt
    1538:1539:java.lang.Object getAt(java.lang.Object,java.lang.Object) -> getAt
    1543:1543:java.lang.Object getAt(int) -> getAt
    1547:1554:java.lang.Object getElement(int) -> getElement
    1558:1565:neureka.Tsr setAt(int,java.lang.Object) -> setAt
    1569:1569:java.lang.Object getAt(double) -> getAt
    1573:1573:java.lang.Object getAt(java.math.BigDecimal) -> getAt
    1578:1589:java.lang.Object getAt(java.util.Map) -> getAt
    1594:1601:neureka.Tsr shallowCopy() -> shallowCopy
    1613:1657:java.lang.Object getAt(java.lang.Object) -> getAt
    1662:1735:neureka.Tsr _sliceOf(int[],int[],int[]) -> a
    1756:1840:int _configureSubsetFromRanges(java.lang.Object[],int[],int[],int[],int) -> a
    1851:1853:neureka.Tsr putAt(java.util.List,neureka.Tsr) -> putAt
    1857:1859:neureka.Tsr putAt(java.util.Map,neureka.Tsr) -> putAt
    1863:1868:void _putAtCheckFor(neureka.Tsr) -> a
    1872:1891:neureka.Tsr _putAt(neureka.Tsr,neureka.Tsr) -> a
    1976:1982:java.lang.Object getValueAt(int) -> getValueAt
    1986:1995:neureka.Tsr setValue64(double[]) -> setValue64
    1999:2008:neureka.Tsr setValue32(float[]) -> setValue32
    2012:2031:neureka.Tsr setValue(java.lang.Object) -> setValue
    2035:2045:java.lang.Object getValue() -> getValue
    2049:2053:double[] gradient64() -> gradient64
    2057:2061:float[] gradient32() -> gradient32
    2066:2082:neureka.Tsr addToGradient(neureka.Tsr) -> addToGradient
    2104:2113:neureka.Tsr asType(java.lang.Class) -> asType
    2136:2147:neureka.Tsr toType(java.lang.Class) -> toType
    2151:2157:double value64(int) -> value64
    2162:2174:double[] value64() -> value64
    2178:2184:float value32(int) -> value32
    2189:2198:float[] value32() -> value32
    2206:2206:java.lang.String toString(java.lang.String) -> toString
    2210:2277:java.lang.String _toString(java.lang.String,java.lang.String) -> _toString
    4285:4315:java.lang.String _stringified(java.lang.Object,boolean,int):2285:2315 -> _toString
    4285:4315:java.lang.String _toString(java.lang.String,java.lang.String):2231 -> _toString
    2325:2335:java.lang.String _stringified(java.util.function.IntFunction,int) -> a
    2339:2339:java.lang.String toString() -> toString
    2344:2372:void makeFit(neureka.Tsr[],boolean) -> makeFit
    171:171:int getVersion() -> getVersion
    132:132:void update(java.lang.Object,java.lang.Object) -> update
    2316:2316:java.lang.String lambda$_stringified$35(java.lang.Object,int) -> a
    2310:2312:java.lang.String lambda$_stringified$34(boolean,int) -> a
    2304:2306:java.lang.String lambda$_stringified$33(boolean,java.lang.Object,int) -> a
    2298:2300:java.lang.String lambda$_stringified$32(boolean,java.lang.Object,int) -> b
    2292:2294:java.lang.String lambda$_stringified$31(boolean,java.lang.Object,int) -> c
    2286:2288:java.lang.String lambda$_stringified$30(boolean,java.lang.Object,int) -> d
    2271:2273:void lambda$_toString$29(java.util.concurrent.atomic.AtomicReference,java.lang.String,java.lang.String,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    2249:2263:void lambda$_toString$28(java.util.concurrent.atomic.AtomicReference,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    2146:2146:void lambda$toType$27(java.lang.Class,neureka.Tsr) -> a
    2076:2081:void lambda$addToGradient$26(neureka.Tsr,neureka.devices.Device) -> a
    2070:2071:void lambda$addToGradient$25(neureka.Tsr,neureka.Tsr) -> b
    1510:1510:void lambda$isCase$24(neureka.Tsr,boolean[],neureka.framing.Relation) -> a
    1511:1512:void lambda$isCase$23(neureka.Tsr,boolean[],java.lang.Object) -> a
    1321:1331:void lambda$applyGradient$22(neureka.Tsr) -> b
    1321:1321:void lambda$applyGradient$21(neureka.optimization.Optimizer) -> a
    1280:1280:void lambda$backward$20(neureka.Tsr,neureka.autograd.GraphNode) -> a
    1198:1198:void lambda$delete$19(neureka.devices.Device) -> a
    1192:1197:void lambda$delete$18(neureka.autograd.GraphNode) -> a
    966:966:void lambda$_setOrReject$17(java.lang.Object) -> a
    964:964:void lambda$_setOrReject$16(java.lang.Object) -> b
    862:862:void lambda$setIsVirtual$15(neureka.Tsr) -> c
    794:821:void lambda$setIsOutsourced$14(neureka.devices.Device) -> b
    806:806:void lambda$setIsOutsourced$13(neureka.Tsr) -> d
    810:819:void lambda$setIsOutsourced$12(neureka.Tsr,java.lang.Object) -> a
    644:644:neureka.Tsr[] lambda$new$11(int) -> a
    638:638:neureka.Tsr[] lambda$new$10(int) -> b
    636:636:boolean lambda$new$9(java.lang.Object) -> c
    593:593:int lambda$new$8(java.lang.Integer) -> a
    415:415:boolean lambda$_construct$7(int,java.util.List) -> a
    412:412:boolean lambda$_construct$6(java.util.List) -> a
    412:412:boolean lambda$_construct$5(java.lang.Object) -> d
    367:367:java.util.List lambda$new$4(java.lang.Object) -> e
    365:365:boolean lambda$new$3(java.lang.Object) -> f
    326:326:neureka.Tsr[] lambda$new$2(int) -> c
    315:315:java.lang.Boolean lambda$new$1(java.util.List,java.lang.Class) -> a
    315:315:boolean lambda$new$0(java.lang.Class,java.lang.Object) -> a
    133:133:org.slf4j.Logger access$000() -> a
    133:133:org.slf4j.Logger access$100() -> b
    136:138:void <clinit>() -> <clinit>
neureka.Tsr$1 -> neureka.Tsr$1:
    int _count -> a
    int _size -> b
    neureka.ndim.iterators.NDIterator val$_ndi -> c
    neureka.Tsr this$0 -> d
    1242:1244:void <init>(neureka.Tsr,neureka.ndim.iterators.NDIterator) -> <init>
    1248:1248:boolean hasNext() -> hasNext
    1253:1256:java.lang.Object next() -> next
neureka.Tsr$Create -> neureka.Tsr$Create:
    2376:2376:void <init>() -> <init>
    2379:2379:neureka.Tsr E(int[]) -> E
    2383:2383:neureka.Tsr newRandom(int[]) -> newRandom
    2387:2388:neureka.Tsr newRandom(int[],long) -> newRandom
    2392:2401:neureka.Tsr newTsrLike(neureka.Tsr,double) -> newTsrLike
    2405:2414:neureka.Tsr newTsrLike(neureka.Tsr) -> newTsrLike
    2418:2420:neureka.Tsr _newEmptyLike(neureka.Tsr) -> a
neureka.Tsr$IO -> neureka.Tsr$IO:
    1896:1896:void <init>() -> <init>
    1899:1901:double getFrom(neureka.Tsr,int) -> getFrom
    1905:1906:double getFrom(neureka.Tsr,int[]) -> getFrom
    1910:1912:void setInto(neureka.Tsr,int,double) -> setInto
    1915:1917:void setInto(neureka.Tsr,int[],double) -> setInto
    1920:1922:void addInto(neureka.Tsr,int,double) -> addInto
    1925:1927:void addInto(neureka.Tsr,int[],double) -> addInto
    1930:1932:neureka.Tsr addInto(neureka.Tsr,neureka.Tsr) -> addInto
    1936:1938:void subInto(neureka.Tsr,int,double) -> subInto
    1941:1943:void subInto(neureka.Tsr,int[],double) -> subInto
    1946:1957:void subInto(neureka.Tsr,neureka.Tsr) -> subInto
    1960:1962:void mulInto(neureka.Tsr,int,double) -> mulInto
    1965:1967:void mulInto(neureka.Tsr,int[],double) -> mulInto
neureka.Tsr$Initializer -> neureka.Tsr$Initializer:
    java.lang.Object init(int,int[]) -> init
neureka.autograd.ADAgent -> neureka.autograd.ADAgent:
    neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    neureka.Tsr derivative() -> derivative
    boolean hasForward() -> hasForward
    boolean hasBackward() -> hasBackward
    java.lang.String toString() -> toString
neureka.autograd.DefaultADAgent -> neureka.autograd.DefaultADAgent:
    neureka.autograd.DefaultADAgent$ADAction _forward -> a
    neureka.autograd.DefaultADAgent$ADAction _backward -> b
    java.util.Map _context -> c
    46:50:void <init>(neureka.Tsr) -> <init>
    46:52:void <init>() -> <init>
    55:56:neureka.autograd.DefaultADAgent withContext(java.util.Map) -> withContext
    61:61:neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    66:66:neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    71:71:neureka.Tsr derivative() -> derivative
    76:78:boolean hasForward() -> hasForward
    84:84:boolean hasBackward() -> hasBackward
    89:95:java.lang.String toString() -> toString
    44:44:neureka.autograd.DefaultADAgent setForward(neureka.autograd.DefaultADAgent$ADAction) -> setForward
    45:45:neureka.autograd.DefaultADAgent setBackward(neureka.autograd.DefaultADAgent$ADAction) -> setBackward
    94:94:java.lang.String lambda$toString$0(java.lang.String) -> a
neureka.autograd.DefaultADAgent$ADAction -> neureka.autograd.DefaultADAgent$ADAction:
    neureka.Tsr execute(neureka.autograd.GraphNode,neureka.Tsr) -> execute
neureka.autograd.GraphLock -> neureka.autograd.GraphLock:
    neureka.calculus.Function _owner -> a
    boolean _isLocked -> b
    28:38:void <init>(neureka.calculus.Function,neureka.Tsr[]) -> <init>
    45:46:void release() -> release
    53:53:java.lang.String toString() -> toString
    28:28:boolean isLocked() -> isLocked
neureka.autograd.GraphNode -> neureka.autograd.GraphNode:
    int _mode -> a
    boolean _allows_forward -> b
    boolean _allows_backward -> c
    boolean _reliesOnJustInTimeProp -> d
    neureka.autograd.PendingError _pendingError -> e
    boolean _isUsedAsDerivative -> f
    neureka.calculus.Function _function -> g
    neureka.autograd.GraphNode[] _parents -> h
    java.lang.ref.WeakReference _payload -> i
    int _payloadReferenceVersion -> j
    java.util.TreeMap _targets_derivatives -> k
    neureka.autograd.GraphLock _lock -> l
    java.util.List _children -> m
    long _nodeID -> n
    92:92:boolean usesAD() -> usesAD
    101:101:boolean usesForwardAD() -> usesForwardAD
    110:110:boolean usesReverseAD() -> usesReverseAD
    174:176:neureka.autograd.PendingError getAndRemovePendingError() -> getAndRemovePendingError
    240:240:neureka.Tsr getPayload() -> getPayload
    244:260:void _setPayload(neureka.Tsr) -> a
    264:265:void update(neureka.Tsr,neureka.Tsr) -> update
    313:316:void _attachChild(neureka.autograd.GraphNode) -> a
    333:333:boolean isCachable() -> isCachable
    342:343:void obtainLocking(neureka.autograd.GraphLock) -> obtainLocking
    351:351:boolean isLeave() -> isLeave
    355:359:boolean isGraphLeave() -> isGraphLeave
    366:366:boolean isVirtual() -> isVirtual
    161:426:void <init>(neureka.calculus.Function,java.lang.Object,java.util.function.Supplier) -> <init>
    438:554:void _construct(neureka.Tsr,neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.autograd.GraphLock) -> a
    569:587:int _modeOf(neureka.backend.api.ExecutionCall,neureka.calculus.Function) -> a
    598:607:void _migrateAndOrApplyError(neureka.Tsr,java.util.function.Consumer) -> a
    620:632:void backward(neureka.Tsr) -> backward
    650:671:void _backward(neureka.Tsr,java.util.Set,boolean) -> a
    683:691:void _carryPendingBackPropToGradients(java.util.Set) -> a
    707:709:void backwardJIT(neureka.Tsr) -> backwardJIT
    712:737:void _backwardJIT(neureka.Tsr,neureka.autograd.GraphNode) -> a
    749:753:void _deleteDerivativesRecursively() -> a
    761:770:int _numberOfReverseModeADChildren() -> b
    779:787:void put(neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> put
    796:797:java.util.List get(neureka.autograd.GraphNode) -> get
    808:809:boolean has(neureka.autograd.GraphNode) -> has
    819:819:int size() -> size
    826:830:void forEachDerivative(java.util.function.BiConsumer) -> forEachDerivative
    836:840:void forEachBackward(neureka.Tsr,java.util.function.BiConsumer) -> forEachBackward
    846:848:void forEachTarget(java.util.function.Consumer) -> forEachTarget
    854:862:void forEachTargetAgentPair(java.util.function.BiConsumer) -> forEachTargetAgentPair
    869:869:boolean hasDerivatives() -> hasDerivatives
    876:881:java.lang.String type() -> type
    886:886:java.lang.String toString() -> toString
    894:911:java.lang.String toString(java.lang.String) -> toString
    926:939:java.lang.String _toString(java.lang.String,boolean,java.lang.String) -> a
    83:83:int getMode() -> getMode
    161:161:boolean isReliesOnJustInTimeProp() -> isReliesOnJustInTimeProp
    182:182:neureka.autograd.PendingError getPendingError() -> getPendingError
    195:195:boolean isUsedAsDerivative() -> isUsedAsDerivative
    203:203:neureka.calculus.Function getFunction() -> getFunction
    213:213:neureka.autograd.GraphNode[] getParents() -> getParents
    276:276:int getPayloadReferenceVersion() -> getPayloadReferenceVersion
    297:297:neureka.autograd.GraphLock getLock() -> getLock
    306:306:java.util.List getChildren() -> getChildren
    323:323:long getNodeID() -> getNodeID
    69:69:void update(java.lang.Object,java.lang.Object) -> update
    858:858:void lambda$forEachTargetAgentPair$14(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> a
    859:859:void lambda$forEachTargetAgentPair$13(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    847:847:void lambda$forEachTarget$12(java.util.function.Consumer,neureka.autograd.GraphNode,java.util.List) -> a
    838:839:void lambda$forEachBackward$11(java.util.function.BiConsumer,neureka.Tsr,neureka.autograd.GraphNode,java.util.List) -> a
    828:828:void lambda$forEachDerivative$10(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> b
    828:828:void lambda$forEachDerivative$9(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> b
    779:779:int lambda$put$8(neureka.autograd.GraphNode,neureka.autograd.GraphNode) -> a
    734:734:void lambda$_backwardJIT$7(neureka.autograd.GraphNode,neureka.autograd.GraphNode,neureka.Tsr) -> a
    714:719:void lambda$_backwardJIT$6(neureka.autograd.GraphNode,neureka.Tsr) -> a
    684:684:void lambda$_carryPendingBackPropToGradients$5(java.util.Set,neureka.autograd.GraphNode) -> a
    668:668:void lambda$_backward$4(java.util.Set,neureka.autograd.GraphNode,neureka.Tsr) -> a
    626:629:void lambda$backward$3(neureka.autograd.GraphNode) -> b
    623:623:void lambda$backward$2(java.util.Set,neureka.autograd.GraphNode) -> b
    508:527:void lambda$_construct$1(neureka.Tsr,neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    248:258:void lambda$_setPayload$0() -> c
neureka.autograd.JITProp -> neureka.autograd.JITProp:
    java.util.Set _finished -> a
    java.util.Set _pending -> b
    16:20:void <init>(java.util.Set) -> <init>
    27:30:void addPending(java.util.Set) -> addPending
    37:46:void noteFinished(neureka.autograd.GraphNode) -> noteFinished
    49:49:int finishedCount() -> finishedCount
    53:53:int pendingCount() -> pendingCount
    61:71:void execute() -> execute
    78:78:boolean isDone() -> isDone
    86:88:java.lang.String toString() -> toString
    95:95:void update(neureka.Tsr,neureka.Tsr) -> update
    10:10:void update(java.lang.Object,java.lang.Object) -> update
    63:68:void lambda$execute$0(neureka.autograd.GraphNode) -> a
neureka.autograd.PendingError -> neureka.autograd.PendingError:
    int _toBeReceived -> a
    neureka.Tsr _accumulatedError -> b
    18:21:void <init>(neureka.Tsr,int) -> <init>
    24:28:void accumulate(neureka.Tsr) -> accumulate
    31:31:boolean isFullyAccumulated() -> isFullyAccumulated
    10:10:java.lang.String toString() -> toString
    13:13:int getToBeReceived() -> getToBeReceived
    15:15:neureka.Tsr getAccumulatedError() -> getAccumulatedError
neureka.backend.api.ExecutionCall -> neureka.backend.api.ExecutionCall:
    neureka.devices.Device _device -> a
    int _derivativeIndex -> b
    neureka.backend.api.operations.OperationType _operation -> c
    neureka.Tsr[] _tensors -> d
    int _j -> e
    neureka.backend.api.implementations.OperationTypeImplementation _implementation -> f
    java.util.Map _context -> g
    181:181:neureka.backend.api.ExecutionCall$Validator validate() -> validate
    100:195:void <init>(neureka.devices.Device,neureka.Tsr[],int,neureka.backend.api.operations.OperationType) -> <init>
    100:210:void <init>(neureka.devices.Device,neureka.Tsr[],int,int,neureka.backend.api.operations.OperationType) -> <init>
    212:212:neureka.Tsr getTensor(int) -> getTensor
    216:218:neureka.backend.api.implementations.OperationTypeImplementation getImplementation() -> getImplementation
    222:222:boolean allowsForward() -> allowsForward
    226:226:boolean allowsBackward() -> allowsBackward
    231:235:neureka.autograd.ADAgent getADAgentFrom(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> getADAgentFrom
    239:240:void mutateArguments(neureka.backend.api.ExecutionCall$Mutator) -> mutateArguments
    243:243:neureka.backend.api.ExecutionCall withNew(neureka.Tsr[]) -> withNew
    247:247:neureka.backend.api.ExecutionCall withNew(neureka.devices.Device) -> withNew
    251:252:java.lang.Object getAt(java.lang.Class) -> getAt
    256:257:java.lang.Object getAt(java.lang.String) -> getAt
    261:263:neureka.backend.api.ExecutionCall putAt(java.lang.String,java.lang.Object) -> putAt
    267:269:void takeContext(java.util.Map) -> takeContext
    64:64:java.lang.String toString() -> toString
    73:73:neureka.devices.Device getDevice() -> getDevice
    87:87:int getDerivativeIndex() -> getDerivativeIndex
    94:94:neureka.backend.api.operations.OperationType getOperation() -> getOperation
    97:97:neureka.Tsr[] getTensors() -> getTensors
    100:100:int getJ() -> getJ
    105:105:java.util.Map getContext() -> getContext
neureka.backend.api.ExecutionCall$DeviceCondition -> neureka.backend.api.ExecutionCall$DeviceCondition:
    boolean check(neureka.devices.Device) -> check
neureka.backend.api.ExecutionCall$Mutator -> neureka.backend.api.ExecutionCall$Mutator:
    neureka.Tsr[] mutate(neureka.Tsr[]) -> mutate
neureka.backend.api.ExecutionCall$OperationTypeCondition -> neureka.backend.api.ExecutionCall$OperationTypeCondition:
    boolean check(neureka.backend.api.operations.OperationType) -> check
neureka.backend.api.ExecutionCall$TensorCompare -> neureka.backend.api.ExecutionCall$TensorCompare:
    boolean check(neureka.Tsr,neureka.Tsr) -> check
neureka.backend.api.ExecutionCall$TensorCondition -> neureka.backend.api.ExecutionCall$TensorCondition:
    boolean check(neureka.Tsr) -> check
neureka.backend.api.ExecutionCall$Validator -> neureka.backend.api.ExecutionCall$Validator:
    boolean _isValid -> a
    neureka.backend.api.ExecutionCall this$0 -> b
    109:111:void <init>(neureka.backend.api.ExecutionCall) -> <init>
    115:115:float estimation() -> estimation
    119:120:neureka.backend.api.ExecutionCall$Validator first(neureka.backend.api.ExecutionCall$TensorCondition) -> first
    125:128:neureka.backend.api.ExecutionCall$Validator any(neureka.backend.api.ExecutionCall$TensorCondition) -> any
    133:137:neureka.backend.api.ExecutionCall$Validator anyNotNull(neureka.backend.api.ExecutionCall$TensorCondition) -> anyNotNull
    142:145:neureka.backend.api.ExecutionCall$Validator all(neureka.backend.api.ExecutionCall$TensorCondition) -> all
    150:154:neureka.backend.api.ExecutionCall$Validator allNotNull(neureka.backend.api.ExecutionCall$TensorCondition) -> allNotNull
    159:166:neureka.backend.api.ExecutionCall$Validator all(neureka.backend.api.ExecutionCall$TensorCompare) -> all
    171:172:neureka.backend.api.ExecutionCall$Validator forDevice(neureka.backend.api.ExecutionCall$DeviceCondition) -> forDevice
    176:177:neureka.backend.api.ExecutionCall$Validator forOperation(neureka.backend.api.ExecutionCall$OperationTypeCondition) -> forOperation
    111:111:boolean isValid() -> isValid
neureka.backend.api.executions.ExecutorFor -> neureka.backend.api.executions.ExecutorFor:
    neureka.backend.api.executions.ExecutorFor$ExecutionOn getExecution() -> getExecution
    int arity() -> arity
neureka.backend.api.executions.ExecutorFor$ExecutionOn -> neureka.backend.api.executions.ExecutorFor$ExecutionOn:
    void run(neureka.backend.api.ExecutionCall) -> run
neureka.backend.api.implementations.AbstractBaseOperationTypeImplementation -> neureka.backend.api.implementations.AbstractBaseOperationTypeImplementation:
    java.lang.String _name -> a
    java.util.Map _executions -> _executions
    17:19:void <init>(java.lang.String) -> <init>
    24:24:java.lang.String getName() -> getName
    33:83:neureka.Tsr recursiveReductionOf(neureka.backend.api.ExecutionCall,java.util.function.Consumer) -> recursiveReductionOf
    91:95:java.lang.Object setExecutor(java.lang.Class,neureka.backend.api.executions.ExecutorFor) -> setExecutor
    100:100:neureka.backend.api.executions.ExecutorFor getExecutor(java.lang.Class) -> getExecutor
    71:71:neureka.Tsr lambda$recursiveReductionOf$2(java.util.function.Consumer,neureka.backend.api.ExecutionCall) -> a
    58:58:void lambda$recursiveReductionOf$1(neureka.Tsr) -> a
    49:53:void lambda$recursiveReductionOf$0(neureka.devices.Device,neureka.Tsr) -> a
neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation -> neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation:
    neureka.backend.api.implementations.OperationTypeImplementation$SuitabilityChecker _suitabilityChecker -> a
    neureka.backend.api.implementations.OperationTypeImplementation$DeviceFinder _deviceFinder -> b
    neureka.backend.api.implementations.OperationTypeImplementation$ForwardADAnalyzer _forwardADAnalyzer -> c
    neureka.backend.api.implementations.OperationTypeImplementation$BackwardADAnalyzer _backwardADAnalyzer -> d
    neureka.backend.api.implementations.OperationTypeImplementation$ADAgentSupplier _ADAgentSupplier -> e
    neureka.backend.api.implementations.OperationTypeImplementation$InitialCallHook _callHook -> f
    neureka.backend.api.implementations.OperationTypeImplementation$RecursiveJunctionAgent _RJAgent -> g
    neureka.backend.api.implementations.OperationTypeImplementation$DrainInstantiation _drainInstantiation -> h
    42:43:void <init>(java.lang.String) -> <init>
    49:49:float isImplementationSuitableFor(neureka.backend.api.ExecutionCall) -> isImplementationSuitableFor
    56:56:neureka.devices.Device findDeviceFor(neureka.backend.api.ExecutionCall) -> findDeviceFor
    63:63:boolean canImplementationPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformForwardADFor
    70:70:boolean canImplementationPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformBackwardADFor
    77:77:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    84:84:neureka.Tsr handleInsteadOfDevice(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> handleInsteadOfDevice
    91:91:neureka.Tsr handleRecursivelyAccordingToArity(neureka.backend.api.ExecutionCall,java.util.function.Function) -> handleRecursivelyAccordingToArity
    98:98:neureka.backend.api.ExecutionCall instantiateNewTensorsForExecutionIn(neureka.backend.api.ExecutionCall) -> instantiateNewTensorsForExecutionIn
    104:104:java.lang.Object build() -> build
    32:32:neureka.backend.api.implementations.OperationTypeImplementation$SuitabilityChecker getSuitabilityChecker() -> getSuitabilityChecker
    32:32:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setSuitabilityChecker(neureka.backend.api.implementations.OperationTypeImplementation$SuitabilityChecker) -> setSuitabilityChecker
    33:33:neureka.backend.api.implementations.OperationTypeImplementation$DeviceFinder getDeviceFinder() -> getDeviceFinder
    33:33:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setDeviceFinder(neureka.backend.api.implementations.OperationTypeImplementation$DeviceFinder) -> setDeviceFinder
    34:34:neureka.backend.api.implementations.OperationTypeImplementation$ForwardADAnalyzer getForwardADAnalyzer() -> getForwardADAnalyzer
    34:34:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setForwardADAnalyzer(neureka.backend.api.implementations.OperationTypeImplementation$ForwardADAnalyzer) -> setForwardADAnalyzer
    35:35:neureka.backend.api.implementations.OperationTypeImplementation$BackwardADAnalyzer getBackwardADAnalyzer() -> getBackwardADAnalyzer
    35:35:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setBackwardADAnalyzer(neureka.backend.api.implementations.OperationTypeImplementation$BackwardADAnalyzer) -> setBackwardADAnalyzer
    36:36:neureka.backend.api.implementations.OperationTypeImplementation$ADAgentSupplier getADAgentSupplier() -> getADAgentSupplier
    36:36:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setADAgentSupplier(neureka.backend.api.implementations.OperationTypeImplementation$ADAgentSupplier) -> setADAgentSupplier
    37:37:neureka.backend.api.implementations.OperationTypeImplementation$InitialCallHook getCallHook() -> getCallHook
    37:37:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setCallHook(neureka.backend.api.implementations.OperationTypeImplementation$InitialCallHook) -> setCallHook
    38:38:neureka.backend.api.implementations.OperationTypeImplementation$RecursiveJunctionAgent getRJAgent() -> getRJAgent
    38:38:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setRJAgent(neureka.backend.api.implementations.OperationTypeImplementation$RecursiveJunctionAgent) -> setRJAgent
    39:39:neureka.backend.api.implementations.OperationTypeImplementation$DrainInstantiation getDrainInstantiation() -> getDrainInstantiation
    39:39:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation setDrainInstantiation(neureka.backend.api.implementations.OperationTypeImplementation$DrainInstantiation) -> setDrainInstantiation
neureka.backend.api.implementations.GenericImplementation -> neureka.backend.api.implementations.GenericImplementation:
    22:75:void <init>(java.lang.String,int,neureka.backend.api.operations.OperationType) -> <init>
    79:84:float isImplementationSuitableFor(neureka.backend.api.ExecutionCall) -> isImplementationSuitableFor
    93:93:neureka.devices.Device findDeviceFor(neureka.backend.api.ExecutionCall) -> findDeviceFor
    98:98:boolean canImplementationPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformForwardADFor
    103:103:boolean canImplementationPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformBackwardADFor
    109:119:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    124:124:neureka.Tsr handleInsteadOfDevice(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> handleInsteadOfDevice
    130:130:neureka.Tsr handleRecursivelyAccordingToArity(neureka.backend.api.ExecutionCall,java.util.function.Function) -> handleRecursivelyAccordingToArity
    136:150:neureka.backend.api.ExecutionCall instantiateNewTensorsForExecutionIn(neureka.backend.api.ExecutionCall) -> instantiateNewTensorsForExecutionIn
    119:119:neureka.Tsr lambda$supplyADAgentFor$7(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    118:118:neureka.Tsr lambda$supplyADAgentFor$6(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    114:114:neureka.Tsr lambda$supplyADAgentFor$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    113:113:neureka.Tsr lambda$supplyADAgentFor$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    27:71:void lambda$new$3(neureka.backend.api.operations.OperationType,neureka.backend.api.ExecutionCall) -> a
    61:67:void lambda$new$2(java.lang.Object[],neureka.backend.api.ExecutionCall,groovy.lang.GroovyShell,java.lang.String,int,int) -> a
    41:47:void lambda$new$1(double[],neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,int) -> a
    29:29:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.api.implementations.OperationTypeImplementation -> neureka.backend.api.implementations.OperationTypeImplementation:
    java.lang.String getName() -> getName
    float isImplementationSuitableFor(neureka.backend.api.ExecutionCall) -> isImplementationSuitableFor
    neureka.devices.Device findDeviceFor(neureka.backend.api.ExecutionCall) -> findDeviceFor
    boolean canImplementationPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformForwardADFor
    boolean canImplementationPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canImplementationPerformBackwardADFor
    neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    neureka.Tsr handleInsteadOfDevice(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> handleInsteadOfDevice
    neureka.Tsr handleRecursivelyAccordingToArity(neureka.backend.api.ExecutionCall,java.util.function.Function) -> handleRecursivelyAccordingToArity
    neureka.backend.api.ExecutionCall instantiateNewTensorsForExecutionIn(neureka.backend.api.ExecutionCall) -> instantiateNewTensorsForExecutionIn
    neureka.Tsr recursiveReductionOf(neureka.backend.api.ExecutionCall,java.util.function.Consumer) -> recursiveReductionOf
    java.lang.Object setExecutor(java.lang.Class,neureka.backend.api.executions.ExecutorFor) -> setExecutor
    neureka.backend.api.executions.ExecutorFor getExecutor(java.lang.Class) -> getExecutor
neureka.backend.api.implementations.OperationTypeImplementation$ADAgentSupplier -> neureka.backend.api.implementations.OperationTypeImplementation$ADAgentSupplier:
    neureka.autograd.ADAgent getADAgentOf(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> getADAgentOf
neureka.backend.api.implementations.OperationTypeImplementation$BackwardADAnalyzer -> neureka.backend.api.implementations.OperationTypeImplementation$BackwardADAnalyzer:
    boolean allowsBackward(neureka.backend.api.ExecutionCall) -> allowsBackward
neureka.backend.api.implementations.OperationTypeImplementation$DeviceFinder -> neureka.backend.api.implementations.OperationTypeImplementation$DeviceFinder:
    neureka.devices.Device findFor(neureka.backend.api.ExecutionCall) -> findFor
neureka.backend.api.implementations.OperationTypeImplementation$DrainInstantiation -> neureka.backend.api.implementations.OperationTypeImplementation$DrainInstantiation:
    neureka.backend.api.ExecutionCall handle(neureka.backend.api.ExecutionCall) -> handle
neureka.backend.api.implementations.OperationTypeImplementation$ForwardADAnalyzer -> neureka.backend.api.implementations.OperationTypeImplementation$ForwardADAnalyzer:
    boolean allowsForward(neureka.backend.api.ExecutionCall) -> allowsForward
neureka.backend.api.implementations.OperationTypeImplementation$InitialCallHook -> neureka.backend.api.implementations.OperationTypeImplementation$InitialCallHook:
    neureka.Tsr handle(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> handle
neureka.backend.api.implementations.OperationTypeImplementation$RecursiveJunctionAgent -> neureka.backend.api.implementations.OperationTypeImplementation$RecursiveJunctionAgent:
    neureka.Tsr handle(neureka.backend.api.ExecutionCall,java.util.function.Function) -> handle
neureka.backend.api.implementations.OperationTypeImplementation$SuitabilityChecker -> neureka.backend.api.implementations.OperationTypeImplementation$SuitabilityChecker:
    float canHandle(neureka.backend.api.ExecutionCall) -> canHandle
neureka.backend.api.operations.AbstractOperationType -> neureka.backend.api.operations.AbstractOperationType:
    org.slf4j.Logger _LOG -> a
    neureka.backend.api.operations.OperationType$Stringifier _stringifier -> b
    int _id -> _id
    java.lang.String _function -> _function
    java.lang.String _operator -> _operator
    int _arity -> _arity
    boolean _isIndexer -> _isIndexer
    boolean _isDifferentiable -> _isDifferentiable
    boolean _isInline -> _isInline
    boolean _isOperator -> _isOperator
    java.util.Map _implementations -> c
    neureka.backend.api.implementations.OperationTypeImplementation _defaultImplementation -> d
    37:100:void <init>(java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    106:106:neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation getImplementation(java.lang.Class) -> getImplementation
    110:110:boolean supportsImplementation(java.lang.Class) -> supportsImplementation
    114:115:neureka.backend.api.operations.OperationType setImplementation(java.lang.Class,neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation) -> setImplementation
    120:121:neureka.backend.api.operations.OperationType forEachImplementation(java.util.function.Consumer) -> forEachImplementation
    128:149:neureka.backend.api.implementations.OperationTypeImplementation implementationOf(neureka.backend.api.ExecutionCall) -> implementationOf
    156:156:boolean supports(java.lang.Class) -> supports
    163:163:boolean isOperator() -> isOperator
    20:61:void <init>() -> <init>
    26:26:neureka.backend.api.operations.OperationType$Stringifier getStringifier() -> getStringifier
    27:27:neureka.backend.api.operations.AbstractOperationType setStringifier(neureka.backend.api.operations.OperationType$Stringifier) -> setStringifier
    30:30:int getId() -> getId
    31:31:java.lang.String getFunction() -> getFunction
    32:32:java.lang.String getOperator() -> getOperator
    37:37:int getArity() -> getArity
    38:38:boolean isIndexer() -> isIndexer
    39:39:boolean isDifferentiable() -> isDifferentiable
    40:40:boolean isInline() -> isInline
    61:61:neureka.backend.api.implementations.OperationTypeImplementation getDefaultImplementation() -> getDefaultImplementation
    20:20:neureka.backend.api.operations.OperationType setStringifier(neureka.backend.api.operations.OperationType$Stringifier) -> setStringifier
    24:24:void <clinit>() -> <clinit>
neureka.backend.api.operations.GenericOperation -> neureka.backend.api.operations.GenericOperation:
    22:23:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean) -> <init>
    27:27:double calculate(double[],int,int,java.util.List) -> calculate
    9:9:void <init>() -> <init>
neureka.backend.api.operations.OperationContext -> neureka.backend.api.operations.OperationContext:
    java.lang.ThreadLocal _INSTANCES -> a
    java.util.Map _lookup -> b
    java.util.ArrayList _register -> c
    int _ID -> d
    89:89:neureka.backend.api.operations.OperationContext instance() -> instance
    93:94:void setInstance(neureka.backend.api.operations.OperationContext) -> setInstance
    109:113:void <init>() -> <init>
    116:117:void incrementID() -> incrementID
    120:120:java.util.List instances() -> instances
    124:124:neureka.backend.api.operations.AbstractOperationType instance(int) -> instance
    128:128:neureka.backend.api.operations.AbstractOperationType instance(java.lang.String) -> instance
    134:138:neureka.backend.api.operations.OperationContext clone() -> clone
    49:49:java.lang.String toString() -> toString
    99:99:java.util.Map getLookup() -> getLookup
    103:103:java.util.ArrayList getRegister() -> getRegister
    107:107:int getID() -> getID
    48:48:java.lang.Object clone() -> clone
    52:52:neureka.backend.api.operations.OperationContext lambda$static$0() -> a
    52:83:void <clinit>() -> <clinit>
neureka.backend.api.operations.OperationType -> neureka.backend.api.operations.OperationType:
    57:57:java.util.List instances() -> instances
    61:61:neureka.backend.api.operations.AbstractOperationType instance(int) -> instance
    65:65:neureka.backend.api.operations.AbstractOperationType[] ALL() -> ALL
    69:69:int COUNT() -> COUNT
    74:74:neureka.backend.api.operations.AbstractOperationType instance(java.lang.String) -> instance
    neureka.backend.api.implementations.OperationTypeImplementation implementationOf(neureka.backend.api.ExecutionCall) -> implementationOf
    java.lang.String getFunction() -> getFunction
    neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation getImplementation(java.lang.Class) -> getImplementation
    boolean supportsImplementation(java.lang.Class) -> supportsImplementation
    neureka.backend.api.operations.OperationType setImplementation(java.lang.Class,neureka.backend.api.implementations.AbstractFunctionalOperationTypeImplementation) -> setImplementation
    neureka.backend.api.operations.OperationType forEachImplementation(java.util.function.Consumer) -> forEachImplementation
    neureka.backend.api.operations.OperationType setStringifier(neureka.backend.api.operations.OperationType$Stringifier) -> setStringifier
    neureka.backend.api.operations.OperationType$Stringifier getStringifier() -> getStringifier
    int getId() -> getId
    java.lang.String getOperator() -> getOperator
    int getArity() -> getArity
    boolean isOperator() -> isOperator
    boolean isIndexer() -> isIndexer
    boolean isDifferentiable() -> isDifferentiable
    boolean isInline() -> isInline
    boolean supports(java.lang.Class) -> supports
    double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.api.operations.OperationType$DefaultOperatorCreator -> neureka.backend.api.operations.OperationType$DefaultOperatorCreator:
    java.lang.Object create(neureka.Tsr[],int) -> create
neureka.backend.api.operations.OperationType$PrimaryNDIConsumer -> neureka.backend.api.operations.OperationType$PrimaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.operations.OperationType$PrimaryNDXConsumer -> neureka.backend.api.operations.OperationType$PrimaryNDXConsumer:
    double execute(int[]) -> execute
neureka.backend.api.operations.OperationType$ScalarOperatorCreator -> neureka.backend.api.operations.OperationType$ScalarOperatorCreator:
    java.lang.Object create(neureka.Tsr[],double,int) -> create
neureka.backend.api.operations.OperationType$SecondaryNDIConsumer -> neureka.backend.api.operations.OperationType$SecondaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.operations.OperationType$SecondaryNDXConsumer -> neureka.backend.api.operations.OperationType$SecondaryNDXConsumer:
    double execute(int[],int[]) -> execute
neureka.backend.api.operations.OperationType$Stringifier -> neureka.backend.api.operations.OperationType$Stringifier:
    java.lang.String asString(java.util.List) -> asString
neureka.backend.api.operations.OperationType$TertiaryNDIConsumer -> neureka.backend.api.operations.OperationType$TertiaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.operations.OperationType$TertiaryNDXConsumer -> neureka.backend.api.operations.OperationType$TertiaryNDXConsumer:
    double execute(int[],int[],int[]) -> execute
neureka.backend.api.operations.OperationType$Utility -> neureka.backend.api.operations.OperationType$Utility:
    195:195:void <init>() -> <init>
    198:204:neureka.Tsr[] subset(neureka.Tsr[],int,int,int) -> subset
    208:210:neureka.Tsr[] without(neureka.Tsr[],int) -> without
    214:226:neureka.Tsr[] offsetted(neureka.Tsr[],int) -> offsetted
neureka.backend.api.operations.OperationTypeFactory -> neureka.backend.api.operations.OperationTypeFactory:
    java.lang.String _function -> a
    java.lang.String _operator -> b
    java.lang.Integer _arity -> c
    java.lang.Boolean _isOperator -> d
    java.lang.Boolean _isIndexer -> e
    java.lang.Boolean _isDifferentiable -> f
    java.lang.Boolean _isInline -> g
    10:18:void <init>() -> <init>
    23:35:neureka.backend.api.operations.GenericOperation build() -> build
    12:12:neureka.backend.api.operations.OperationTypeFactory setFunction(java.lang.String) -> setFunction
    13:13:neureka.backend.api.operations.OperationTypeFactory setOperator(java.lang.String) -> setOperator
    14:14:neureka.backend.api.operations.OperationTypeFactory setArity(java.lang.Integer) -> setArity
    15:15:neureka.backend.api.operations.OperationTypeFactory setIsOperator(java.lang.Boolean) -> setIsOperator
    16:16:neureka.backend.api.operations.OperationTypeFactory setIsIndexer(java.lang.Boolean) -> setIsIndexer
    17:17:neureka.backend.api.operations.OperationTypeFactory setIsDifferentiable(java.lang.Boolean) -> setIsDifferentiable
    18:18:neureka.backend.api.operations.OperationTypeFactory setIsInline(java.lang.Boolean) -> setIsInline
neureka.backend.standard.implementations.Activation -> neureka.backend.standard.implementations.Activation:
    17:51:void <init>() -> <init>
    54:54:java.lang.String getKernelSource() -> getKernelSource
    63:76:void activate(neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.operations.OperationType$TertiaryNDIConsumer) -> activate
    85:99:void activate(neureka.Tsr,int,int,neureka.backend.api.operations.OperationType$TertiaryNDXConsumer) -> activate
    34:48:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    31:31:neureka.Tsr lambda$new$6(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    30:30:neureka.Tsr lambda$new$5(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    25:28:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    27:27:boolean lambda$new$3(neureka.Tsr,neureka.Tsr) -> a
    23:23:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> c
    19:21:float lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    20:20:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.implementations.Broadcast -> neureka.backend.standard.implementations.Broadcast:
    boolean $assertionsDisabled -> a
    17:89:void <init>() -> <init>
    92:92:java.lang.String getKernelSource() -> getKernelSource
    101:187:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$TertiaryNDIConsumer) -> broadcast
    197:281:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$TertiaryNDXConsumer) -> broadcast
    61:86:neureka.backend.api.ExecutionCall lambda$new$3(neureka.backend.api.ExecutionCall) -> a
    45:56:neureka.Tsr lambda$new$2(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    21:40:float lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    23:23:boolean lambda$new$0(neureka.Tsr) -> a
    13:13:void <clinit>() -> <clinit>
neureka.backend.standard.implementations.Convolution -> neureka.backend.standard.implementations.Convolution:
    16:22:void <init>() -> <init>
    26:26:java.lang.String getKernelSource() -> getKernelSource
    35:174:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$TertiaryNDIConsumer) -> convolve
    182:320:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$TertiaryNDXConsumer) -> convolve
    18:20:float lambda$new$1(neureka.backend.api.ExecutionCall) -> a
    19:19:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.implementations.GenericImplementation -> neureka.backend.standard.implementations.GenericImplementation:
    8:9:void <init>(java.lang.String) -> <init>
neureka.backend.standard.implementations.Operator -> neureka.backend.standard.implementations.Operator:
    18:51:void <init>() -> <init>
    54:54:java.lang.String getKernelSource() -> getKernelSource
    64:85:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$SecondaryNDIConsumer) -> operate
    95:110:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.operations.OperationType$PrimaryNDXConsumer) -> operate
    34:48:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    31:31:neureka.Tsr lambda$new$6(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    30:30:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    29:29:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    21:26:float lambda$new$3(neureka.backend.api.ExecutionCall) -> d
    25:25:boolean lambda$new$2(neureka.Tsr) -> a
    24:24:boolean lambda$new$1(int,java.util.List,neureka.Tsr) -> a
    22:22:java.lang.Integer lambda$new$0(java.lang.Integer,java.lang.Integer) -> a
neureka.backend.standard.implementations.Scalarization -> neureka.backend.standard.implementations.Scalarization:
    boolean $assertionsDisabled -> a
    17:49:void <init>() -> <init>
    53:53:java.lang.String getKernelSource() -> getKernelSource
    63:75:void scalarize(neureka.Tsr,int,int,neureka.backend.api.operations.OperationType$PrimaryNDIConsumer) -> scalarize
    83:94:void scalarize(neureka.Tsr,int,int,neureka.backend.api.operations.OperationType$PrimaryNDXConsumer) -> scalarize
    32:46:neureka.backend.api.ExecutionCall lambda$new$3(neureka.backend.api.ExecutionCall) -> a
    19:28:float lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    22:22:boolean lambda$new$1(neureka.Tsr) -> a
    21:21:boolean lambda$new$0(neureka.Tsr) -> b
    13:13:void <clinit>() -> <clinit>
neureka.backend.standard.operations.function.Absolute -> neureka.backend.standard.operations.function.Absolute:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _activationCreator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _activationXCreator -> b
    17:94:void <init>() -> <init>
    98:101:double calculate(double[],int,int,java.util.List) -> calculate
    106:107:double calculate(double,boolean) -> calculate
    77:85:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    54:64:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    65:68:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    59:62:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    45:45:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    36:38:java.lang.String lambda$new$6(java.util.List) -> a
    25:27:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    27:27:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    26:26:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    19:21:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    21:21:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    20:20:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Cosinus -> neureka.backend.standard.operations.function.Cosinus:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    17:104:void <init>() -> <init>
    108:111:double calculate(double[],int,int,java.util.List) -> calculate
    116:117:double calculate(double,boolean) -> calculate
    86:94:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    63:73:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    74:77:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    68:71:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    53:53:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    44:46:java.lang.String lambda$new$6(java.util.List) -> a
    25:27:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    27:27:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    26:26:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    19:21:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    21:21:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    20:20:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Gaussian -> neureka.backend.standard.operations.function.Gaussian:
    21:154:void <init>() -> <init>
    158:161:double calculate(double[],int,int,java.util.List) -> calculate
    166:167:double calculate(double,boolean) -> calculate
    129:137:void lambda$new$16(neureka.backend.api.ExecutionCall) -> a
    106:116:void lambda$new$15(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    117:120:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    111:114:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    81:95:neureka.backend.api.ExecutionCall lambda$new$12(neureka.backend.api.ExecutionCall) -> b
    78:78:neureka.Tsr lambda$new$11(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    77:77:neureka.Tsr lambda$new$10(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    75:75:neureka.autograd.ADAgent lambda$new$9(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    65:70:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> c
    62:62:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> d
    49:53:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$6(neureka.Tsr[],int) -> a
    54:55:double lambda$new$5(double[],neureka.Tsr[],int[],int[],int[]) -> a
    51:51:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> b
    34:38:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$3(neureka.Tsr[],int) -> b
    39:40:double lambda$new$2(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    36:36:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    25:27:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.function.Identity -> neureka.backend.standard.operations.function.Identity:
    23:211:void <init>() -> <init>
    215:218:double calculate(double[],int,int,java.util.List) -> calculate
    223:224:double calculate(double,boolean) -> calculate
    191:200:void lambda$new$28(neureka.backend.api.ExecutionCall) -> a
    172:184:void lambda$new$27(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    177:180:void lambda$new$26(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    147:161:neureka.backend.api.ExecutionCall lambda$new$25(neureka.backend.api.ExecutionCall) -> b
    144:144:neureka.Tsr lambda$new$24(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    143:143:neureka.Tsr lambda$new$23(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    141:141:neureka.autograd.ADAgent lambda$new$22(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    131:136:boolean lambda$new$21(neureka.backend.api.ExecutionCall) -> c
    128:128:boolean lambda$new$20(neureka.backend.api.ExecutionCall) -> d
    124:125:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$19(neureka.Tsr[],double,int) -> a
    125:125:double lambda$new$18(double,neureka.ndim.iterators.NDIterator) -> a
    124:124:double lambda$new$17(double,neureka.ndim.iterators.NDIterator) -> b
    102:112:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    79:89:void lambda$new$15(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    90:93:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    84:87:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    66:68:neureka.backend.api.ExecutionCall lambda$new$12(neureka.backend.api.ExecutionCall) -> f
    63:63:neureka.Tsr lambda$new$11(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    62:62:neureka.Tsr lambda$new$10(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    60:60:neureka.autograd.ADAgent lambda$new$9(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    51:56:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> g
    48:48:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> h
    42:44:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$6(neureka.Tsr[],int) -> a
    44:44:double lambda$new$5(int[],int[],int[]) -> a
    43:43:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    35:37:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$3(neureka.Tsr[],int) -> b
    37:37:double lambda$new$2(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    36:36:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    27:29:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.function.Quadratic -> neureka.backend.standard.operations.function.Quadratic:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorNDI -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorNDX -> b
    18:116:void <init>() -> <init>
    120:123:double calculate(double[],int,int,java.util.List) -> calculate
    128:129:double calculate(double,boolean) -> calculate
    97:105:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    73:83:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    84:87:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    78:81:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    63:63:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    54:56:java.lang.String lambda$new$6(java.util.List) -> a
    31:37:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    37:37:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    34:35:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    20:26:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    26:26:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:24:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.ReLU -> neureka.backend.standard.operations.function.ReLU:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    18:125:void <init>() -> <init>
    129:132:double calculate(double[],int,int,java.util.List) -> calculate
    138:145:double calculate(double,boolean) -> calculate
    106:114:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    83:93:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    94:97:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    88:91:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    73:73:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    64:66:java.lang.String lambda$new$6(java.util.List) -> a
    36:43:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    44:45:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    39:40:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    20:27:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    28:29:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:24:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sigmoid -> neureka.backend.standard.operations.function.Sigmoid:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    18:111:void <init>() -> <init>
    115:118:double calculate(double[],int,int,java.util.List) -> calculate
    123:126:double calculate(double,boolean) -> calculate
    90:98:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    67:77:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    78:81:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    72:75:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    56:56:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    47:49:java.lang.String lambda$new$6(java.util.List) -> a
    27:29:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    29:29:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    28:28:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    20:22:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    22:22:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    21:21:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sinus -> neureka.backend.standard.operations.function.Sinus:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    19:132:void <init>() -> <init>
    136:139:double calculate(double[],int,int,java.util.List) -> calculate
    144:145:double calculate(double,boolean) -> calculate
    111:119:void lambda$new$16(neureka.backend.api.ExecutionCall) -> a
    88:98:void lambda$new$15(neureka.backend.api.ExecutionCall) -> b
    99:102:void lambda$new$14(neureka.backend.api.ExecutionCall,int,int) -> a
    93:96:void lambda$new$13(neureka.backend.api.ExecutionCall,int,int) -> b
    63:77:neureka.backend.api.ExecutionCall lambda$new$12(neureka.backend.api.ExecutionCall) -> c
    60:60:neureka.Tsr lambda$new$11(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    59:59:neureka.Tsr lambda$new$10(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    58:58:neureka.autograd.ADAgent lambda$new$9(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    49:54:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> d
    46:46:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> e
    39:41:java.lang.String lambda$new$6(java.util.List) -> a
    28:30:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    21:23:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    23:23:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    22:22:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Softplus -> neureka.backend.standard.operations.function.Softplus:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    19:119:void <init>() -> <init>
    123:126:double calculate(double[],int,int,java.util.List) -> calculate
    131:132:double calculate(double,boolean) -> calculate
    83:91:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    60:70:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    71:74:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    65:68:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    48:48:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    39:41:java.lang.String lambda$new$6(java.util.List) -> a
    28:30:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    21:23:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    23:23:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    22:22:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Tanh -> neureka.backend.standard.operations.function.Tanh:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    18:129:void <init>() -> <init>
    133:136:double calculate(double[],int,int,java.util.List) -> calculate
    141:145:double calculate(double,boolean) -> calculate
    108:116:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    85:95:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    96:99:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    90:93:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    75:75:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    66:68:java.lang.String lambda$new$6(java.util.List) -> a
    38:45:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$5(neureka.Tsr[],int) -> a
    46:47:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    41:42:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    21:28:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    29:30:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    24:25:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.indexer.Product -> neureka.backend.standard.operations.indexer.Product:
    27:335:void <init>() -> <init>
    341:361:double calculate(double[],int,int,java.util.List) -> calculate
    367:386:double calculate(double[],int,java.util.List) -> calculate
    314:322:void lambda$new$41(neureka.backend.api.ExecutionCall) -> a
    291:301:void lambda$new$40(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    302:305:void lambda$new$39(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    296:299:void lambda$new$38(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    267:281:neureka.backend.api.ExecutionCall lambda$new$37(neureka.backend.api.ExecutionCall) -> b
    263:263:neureka.Tsr lambda$new$36(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    224:258:neureka.autograd.ADAgent lambda$new$35(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    258:258:neureka.Tsr lambda$new$34(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    257:257:neureka.Tsr lambda$new$33(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    251:251:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    250:250:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    238:238:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    237:237:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    229:229:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    228:228:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    220:220:boolean lambda$new$26(neureka.backend.api.ExecutionCall) -> c
    218:218:boolean lambda$new$25(neureka.backend.api.ExecutionCall) -> d
    212:214:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$24(neureka.Tsr[],int) -> a
    214:214:double lambda$new$23(double[],neureka.Tsr[],int[],int[],int[]) -> a
    213:213:double lambda$new$22(double[],neureka.Tsr[],int[],int[],int[]) -> b
    205:207:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$21(neureka.Tsr[],int) -> b
    207:207:double lambda$new$20(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    206:206:double lambda$new$19(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    181:190:void lambda$new$18(neureka.backend.api.ExecutionCall) -> e
    152:165:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    166:172:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> c
    157:163:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> d
    124:139:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    139:139:neureka.Tsr lambda$new$13(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    138:138:neureka.Tsr lambda$new$12(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    129:129:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    128:128:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    120:120:boolean lambda$new$9(neureka.backend.api.ExecutionCall) -> f
    119:119:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> g
    106:111:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$7(neureka.Tsr[],int) -> c
    112:113:double lambda$new$6(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    109:109:double lambda$new$5(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    91:96:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$4(neureka.Tsr[],int) -> d
    97:98:double lambda$new$3(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    94:94:double lambda$new$2(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    49:80:neureka.Tsr lambda$new$1(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    39:43:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.indexer.Summation -> neureka.backend.standard.operations.indexer.Summation:
    27:323:void <init>() -> <init>
    327:340:double calculate(double[],int,int,java.util.List) -> calculate
    346:368:double calculate(double[],int,java.util.List) -> calculate
    302:313:void lambda$new$41(neureka.backend.api.ExecutionCall) -> a
    279:289:void lambda$new$40(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    290:293:void lambda$new$39(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    284:287:void lambda$new$38(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    255:269:neureka.backend.api.ExecutionCall lambda$new$37(neureka.backend.api.ExecutionCall) -> b
    251:251:neureka.Tsr lambda$new$36(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    206:246:neureka.autograd.ADAgent lambda$new$35(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    246:246:neureka.Tsr lambda$new$34(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    245:245:neureka.Tsr lambda$new$33(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    239:239:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    238:238:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    225:225:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    223:223:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    213:213:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    212:212:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    202:202:boolean lambda$new$26(neureka.backend.api.ExecutionCall) -> c
    201:201:boolean lambda$new$25(neureka.backend.api.ExecutionCall) -> d
    195:197:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$24(neureka.Tsr[],int) -> a
    197:197:double lambda$new$23(double[],neureka.Tsr[],int[],int[],int[]) -> a
    196:196:double lambda$new$22(double[],neureka.Tsr[],int[],int[],int[]) -> b
    188:190:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$21(neureka.Tsr[],int) -> b
    190:190:double lambda$new$20(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    189:189:double lambda$new$19(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    163:172:void lambda$new$18(neureka.backend.api.ExecutionCall) -> e
    134:147:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    148:154:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> c
    139:145:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> d
    105:120:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    120:120:neureka.Tsr lambda$new$13(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    119:119:neureka.Tsr lambda$new$12(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    110:110:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    109:109:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    101:101:boolean lambda$new$9(neureka.backend.api.ExecutionCall) -> f
    100:100:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> g
    93:96:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$7(neureka.Tsr[],int) -> c
    96:96:double lambda$new$6(int[],int[],int[]) -> a
    95:95:double lambda$new$5(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    84:87:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$4(neureka.Tsr[],int) -> d
    87:87:double lambda$new$3(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    86:86:double lambda$new$2(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    50:74:neureka.Tsr lambda$new$1(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    40:44:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.linear.MatMul -> neureka.backend.standard.operations.linear.MatMul:
    25:266:void <init>() -> <init>
    271:271:double calculate(double[],int,int,java.util.List) -> calculate
    231:240:void lambda$new$18(neureka.backend.api.ExecutionCall) -> a
    201:214:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    215:219:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    206:210:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    175:189:neureka.backend.api.ExecutionCall lambda$new$14(neureka.backend.api.ExecutionCall) -> b
    147:169:neureka.Tsr lambda$new$13(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    134:142:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    142:142:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    141:141:neureka.Tsr lambda$new$10(neureka.autograd.GraphNode,neureka.Tsr) -> a
    120:127:boolean lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    117:117:boolean lambda$new$8(neureka.backend.api.ExecutionCall) -> d
    103:108:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$7(neureka.Tsr[],int) -> a
    109:110:double lambda$new$6(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    106:106:double lambda$new$5(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    89:94:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$4(neureka.Tsr[],int) -> b
    95:96:double lambda$new$3(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    92:92:double lambda$new$2(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    50:83:neureka.Tsr lambda$new$1(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    37:44:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.linear.XConv -> neureka.backend.standard.operations.linear.XConv:
    boolean $assertionsDisabled -> a
    24:310:void <init>() -> <init>
    315:315:double calculate(double[],int,int,java.util.List) -> calculate
    296:303:java.lang.String lambda$new$22(java.util.List) -> a
    269:276:java.lang.String lambda$new$21(java.util.List) -> b
    235:244:void lambda$new$20(neureka.backend.api.ExecutionCall) -> a
    205:218:void lambda$new$19(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    219:223:void lambda$new$18(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    210:214:void lambda$new$17(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    179:193:neureka.backend.api.ExecutionCall lambda$new$16(neureka.backend.api.ExecutionCall) -> b
    151:173:neureka.Tsr lambda$new$15(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    130:146:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    146:146:neureka.Tsr lambda$new$13(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    145:145:neureka.Tsr lambda$new$12(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    117:124:boolean lambda$new$11(neureka.backend.api.ExecutionCall) -> c
    114:114:boolean lambda$new$10(neureka.backend.api.ExecutionCall) -> d
    101:106:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$9(neureka.Tsr[],int) -> a
    107:108:double lambda$new$8(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    104:104:double lambda$new$7(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    88:93:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$6(neureka.Tsr[],int) -> b
    94:95:double lambda$new$5(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    91:91:double lambda$new$4(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    49:82:neureka.Tsr lambda$new$3(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    80:80:neureka.Tsr[] lambda$new$2(neureka.Tsr[]) -> a
    77:77:neureka.Tsr[] lambda$new$1(neureka.Tsr[]) -> b
    36:43:java.lang.String lambda$new$0(java.util.List) -> c
    19:19:void <clinit>() -> <clinit>
neureka.backend.standard.operations.linear.XConv$1 -> neureka.backend.standard.operations.linear.XConv$1:
    260:260:void <init>(neureka.backend.standard.operations.linear.XConv,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    263:263:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.linear.XConv$2 -> neureka.backend.standard.operations.linear.XConv$2:
    287:287:void <init>(neureka.backend.standard.operations.linear.XConv,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    290:290:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Addition -> neureka.backend.standard.operations.operator.Addition:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    neureka.backend.standard.implementations.Broadcast _broadcast -> c
    82:465:void <init>() -> <init>
    473:486:double calculate(double[],int,int,java.util.List) -> calculate
    492:504:double calculate(double[],int,java.util.List) -> calculate
    436:443:java.lang.String lambda$new$57(java.util.List) -> a
    427:429:neureka.backend.api.ExecutionCall lambda$new$56(neureka.backend.api.ExecutionCall) -> a
    424:424:neureka.Tsr lambda$new$55(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    423:423:neureka.Tsr lambda$new$54(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    403:419:neureka.autograd.ADAgent lambda$new$53(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    419:419:neureka.Tsr lambda$new$52(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    418:418:neureka.Tsr lambda$new$51(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    408:408:neureka.Tsr lambda$new$50(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    407:407:neureka.Tsr lambda$new$49(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    392:397:boolean lambda$new$48(neureka.backend.api.ExecutionCall) -> b
    389:389:boolean lambda$new$47(neureka.backend.api.ExecutionCall) -> c
    336:345:void lambda$new$46(neureka.backend.api.ExecutionCall) -> d
    311:329:void lambda$new$45(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    323:326:void lambda$new$44(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    317:320:void lambda$new$43(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    296:301:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$42(neureka.Tsr[],double,int) -> a
    301:301:double lambda$new$41(int[]) -> a
    300:300:double lambda$new$40(int[]) -> b
    298:298:double lambda$new$39(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    286:290:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$38(neureka.Tsr[],double,int) -> b
    290:290:double lambda$new$37(neureka.ndim.iterators.NDIterator) -> a
    289:289:double lambda$new$36(neureka.ndim.iterators.NDIterator) -> b
    287:287:double lambda$new$35(double[],double,neureka.ndim.iterators.NDIterator) -> a
    280:280:neureka.Tsr lambda$new$34(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    278:278:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    275:275:boolean lambda$new$32(neureka.backend.api.ExecutionCall) -> e
    274:274:boolean lambda$new$31(neureka.backend.api.ExecutionCall) -> f
    251:260:void lambda$new$30(neureka.backend.api.ExecutionCall) -> g
    228:238:void lambda$new$29(neureka.backend.api.ExecutionCall) -> h
    239:242:void lambda$new$28(neureka.backend.api.ExecutionCall,int,int) -> a
    233:236:void lambda$new$27(neureka.backend.api.ExecutionCall,int,int) -> b
    200:209:void lambda$new$26(neureka.backend.api.ExecutionCall) -> i
    171:184:void lambda$new$25(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    185:191:void lambda$new$24(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    176:182:void lambda$new$23(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    159:159:neureka.autograd.ADAgent lambda$new$22(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    148:153:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$21(neureka.Tsr[],int) -> a
    153:153:double lambda$new$20(int[]) -> c
    152:152:double lambda$new$19(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    140:143:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$18(neureka.Tsr[],int) -> b
    143:143:double lambda$new$17(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    142:142:double lambda$new$16(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    107:131:neureka.Tsr lambda$new$15(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    94:101:java.lang.String lambda$new$14(java.util.List) -> b
    77:77:neureka.Tsr lambda$static$13(neureka.backend.api.ExecutionCall,java.util.function.Function) -> c
    58:73:neureka.autograd.ADAgent lambda$static$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> d
    73:73:neureka.Tsr lambda$static$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    72:72:neureka.Tsr lambda$static$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    63:63:neureka.Tsr lambda$static$9(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    62:62:neureka.Tsr lambda$static$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    48:53:boolean lambda$static$7(neureka.backend.api.ExecutionCall) -> j
    45:45:boolean lambda$static$6(neureka.backend.api.ExecutionCall) -> k
    35:40:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$static$5(neureka.Tsr[],int) -> c
    40:40:double lambda$static$4(int[],int[],int[]) -> a
    39:39:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    27:30:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    30:30:double lambda$static$1(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    29:29:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:78:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.Addition$1 -> neureka.backend.standard.operations.operator.Addition$1:
    360:360:void <init>(neureka.backend.standard.operations.operator.Addition,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    363:363:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Addition$2 -> neureka.backend.standard.operations.operator.Addition$2:
    369:369:void <init>(neureka.backend.standard.operations.operator.Addition,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    372:372:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Addition$3 -> neureka.backend.standard.operations.operator.Addition$3:
    380:380:void <init>(neureka.backend.standard.operations.operator.Addition,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    383:383:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Addition$4 -> neureka.backend.standard.operations.operator.Addition$4:
    449:449:void <init>(neureka.backend.standard.operations.operator.Addition,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    452:452:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Addition$5 -> neureka.backend.standard.operations.operator.Addition$5:
    457:457:void <init>(neureka.backend.standard.operations.operator.Addition,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    460:460:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Division -> neureka.backend.standard.operations.operator.Division:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    65:552:void <init>() -> <init>
    560:578:double calculate(double[],int,int,java.util.List) -> calculate
    584:605:double calculate(double[],int,java.util.List) -> calculate
    541:548:java.lang.String lambda$new$58(java.util.List) -> a
    522:529:java.lang.String lambda$new$57(java.util.List) -> b
    502:509:java.lang.String lambda$new$56(java.util.List) -> c
    494:496:neureka.backend.api.ExecutionCall lambda$new$55(neureka.backend.api.ExecutionCall) -> a
    491:491:neureka.Tsr lambda$new$54(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    490:490:neureka.Tsr lambda$new$53(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    470:486:neureka.autograd.ADAgent lambda$new$52(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    486:486:neureka.Tsr lambda$new$51(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    485:485:neureka.Tsr lambda$new$50(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    475:475:neureka.Tsr lambda$new$49(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    474:474:neureka.Tsr lambda$new$48(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    460:465:boolean lambda$new$47(neureka.backend.api.ExecutionCall) -> b
    457:457:boolean lambda$new$46(neureka.backend.api.ExecutionCall) -> c
    401:410:void lambda$new$45(neureka.backend.api.ExecutionCall) -> d
    376:394:void lambda$new$44(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    388:391:void lambda$new$43(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    382:385:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    366:366:neureka.Tsr lambda$new$41(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    364:364:neureka.autograd.ADAgent lambda$new$40(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    361:361:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> e
    360:360:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> f
    349:355:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$37(neureka.Tsr[],double,int) -> a
    355:355:double lambda$new$36(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    354:354:double lambda$new$35(double,int[]) -> a
    352:352:double lambda$new$34(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    338:343:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$33(neureka.Tsr[],double,int) -> b
    343:343:double lambda$new$32(double,double[],neureka.ndim.iterators.NDIterator) -> a
    342:342:double lambda$new$31(double,neureka.ndim.iterators.NDIterator) -> a
    340:340:double lambda$new$30(double[],double,neureka.ndim.iterators.NDIterator) -> a
    310:319:void lambda$new$29(neureka.backend.api.ExecutionCall) -> g
    287:297:void lambda$new$28(neureka.backend.api.ExecutionCall) -> h
    298:301:void lambda$new$27(neureka.backend.api.ExecutionCall,int,int) -> a
    292:295:void lambda$new$26(neureka.backend.api.ExecutionCall,int,int) -> b
    259:274:neureka.autograd.ADAgent lambda$new$25(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    274:274:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    273:273:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    264:264:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    263:263:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    255:255:boolean lambda$new$20(neureka.backend.api.ExecutionCall) -> i
    254:254:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> j
    226:235:void lambda$new$18(neureka.backend.api.ExecutionCall) -> k
    196:209:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    210:216:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    201:207:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    184:184:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> d
    166:171:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$13(neureka.Tsr[],int) -> a
    172:175:double lambda$new$12(int,double[],neureka.Tsr[],double[],int[]) -> a
    169:169:double lambda$new$11(double[],neureka.Tsr[],double[],int[]) -> a
    149:154:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$10(neureka.Tsr[],int) -> b
    155:158:double lambda$new$9(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    152:152:double lambda$new$8(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    88:140:neureka.Tsr lambda$new$7(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    75:82:java.lang.String lambda$new$6(java.util.List) -> d
    45:52:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$static$5(neureka.Tsr[],int) -> c
    53:56:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    50:50:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    28:33:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    34:37:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    31:31:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    26:43:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.Division$1 -> neureka.backend.standard.operations.operator.Division$1:
    430:430:void <init>(neureka.backend.standard.operations.operator.Division,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    433:433:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Division$2 -> neureka.backend.standard.operations.operator.Division$2:
    438:438:void <init>(neureka.backend.standard.operations.operator.Division,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    441:441:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Division$3 -> neureka.backend.standard.operations.operator.Division$3:
    449:449:void <init>(neureka.backend.standard.operations.operator.Division,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    452:452:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Division$4 -> neureka.backend.standard.operations.operator.Division$4:
    515:515:void <init>(neureka.backend.standard.operations.operator.Division,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    518:518:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Division$5 -> neureka.backend.standard.operations.operator.Division$5:
    534:534:void <init>(neureka.backend.standard.operations.operator.Division,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    537:537:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Modulo -> neureka.backend.standard.operations.operator.Modulo:
    27:458:void <init>() -> <init>
    464:471:double calculate(double[],int,java.util.List) -> calculate
    478:487:double calculate(double[],int,int,java.util.List) -> calculate
    414:423:void lambda$new$47(neureka.backend.api.ExecutionCall) -> a
    389:407:void lambda$new$46(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    401:404:void lambda$new$45(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    395:398:void lambda$new$44(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    380:380:neureka.Tsr lambda$new$43(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    379:379:neureka.Tsr lambda$new$42(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    377:377:neureka.autograd.ADAgent lambda$new$41(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    367:372:boolean lambda$new$40(neureka.backend.api.ExecutionCall) -> b
    364:364:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> c
    353:359:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$38(neureka.Tsr[],double,int) -> a
    359:359:double lambda$new$37(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    358:358:double lambda$new$36(double,int[]) -> a
    356:356:double lambda$new$35(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    342:347:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$34(neureka.Tsr[],double,int) -> b
    347:347:double lambda$new$33(double,double[],neureka.ndim.iterators.NDIterator) -> a
    346:346:double lambda$new$32(double,neureka.ndim.iterators.NDIterator) -> a
    344:344:double lambda$new$31(double[],double,neureka.ndim.iterators.NDIterator) -> a
    314:323:void lambda$new$30(neureka.backend.api.ExecutionCall) -> d
    291:301:void lambda$new$29(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    302:305:void lambda$new$28(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    296:299:void lambda$new$27(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    282:282:neureka.Tsr lambda$new$26(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    263:278:neureka.autograd.ADAgent lambda$new$25(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    278:278:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    277:277:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    268:268:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    267:267:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    252:257:boolean lambda$new$20(neureka.backend.api.ExecutionCall) -> e
    249:249:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> f
    231:238:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$18(neureka.Tsr[],int) -> a
    239:242:double lambda$new$17(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    236:236:double lambda$new$16(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    211:216:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$15(neureka.Tsr[],int) -> b
    217:223:double lambda$new$14(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    214:214:double lambda$new$13(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    181:190:void lambda$new$12(neureka.backend.api.ExecutionCall) -> g
    152:165:void lambda$new$11(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    166:172:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> c
    157:163:void lambda$new$9(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> d
    141:141:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    122:128:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$7(neureka.Tsr[],int) -> c
    129:132:double lambda$new$6(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    126:126:double lambda$new$5(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    107:111:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$4(neureka.Tsr[],int) -> d
    112:115:double lambda$new$3(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    109:109:double lambda$new$2(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    46:98:neureka.Tsr lambda$new$1(neureka.backend.api.ExecutionCall,java.util.function.Function) -> c
    33:40:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.operator.Modulo$1 -> neureka.backend.standard.operations.operator.Modulo$1:
    444:444:void <init>(neureka.backend.standard.operations.operator.Modulo,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    447:447:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Modulo$2 -> neureka.backend.standard.operations.operator.Modulo$2:
    452:452:void <init>(neureka.backend.standard.operations.operator.Modulo,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    455:455:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Multiplication -> neureka.backend.standard.operations.operator.Multiplication:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    58:634:void <init>() -> <init>
    643:662:double calculate(double[],int,int,java.util.List) -> calculate
    668:686:double calculate(double[],int,java.util.List) -> calculate
    611:620:void lambda$new$80(neureka.backend.api.ExecutionCall) -> a
    588:598:void lambda$new$79(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    599:602:void lambda$new$78(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    593:596:void lambda$new$77(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    568:570:neureka.backend.api.ExecutionCall lambda$new$76(neureka.backend.api.ExecutionCall) -> b
    565:565:neureka.Tsr lambda$new$75(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    564:564:neureka.Tsr lambda$new$74(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    545:560:neureka.autograd.ADAgent lambda$new$73(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    560:560:neureka.Tsr lambda$new$72(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    559:559:neureka.Tsr lambda$new$71(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    550:550:neureka.Tsr lambda$new$70(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    549:549:neureka.Tsr lambda$new$69(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    534:539:boolean lambda$new$68(neureka.backend.api.ExecutionCall) -> c
    531:531:boolean lambda$new$67(neureka.backend.api.ExecutionCall) -> d
    511:520:void lambda$new$66(neureka.backend.api.ExecutionCall) -> e
    488:498:void lambda$new$65(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    499:502:void lambda$new$64(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> c
    493:496:void lambda$new$63(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> d
    468:470:neureka.backend.api.ExecutionCall lambda$new$62(neureka.backend.api.ExecutionCall) -> f
    465:465:neureka.Tsr lambda$new$61(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    464:464:neureka.Tsr lambda$new$60(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    441:458:neureka.autograd.ADAgent lambda$new$59(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    459:459:neureka.Tsr lambda$new$58(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    457:457:neureka.Tsr lambda$new$57(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    445:445:neureka.Tsr lambda$new$56(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    431:436:boolean lambda$new$55(neureka.backend.api.ExecutionCall) -> g
    428:428:boolean lambda$new$54(neureka.backend.api.ExecutionCall) -> h
    420:424:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$new$53(neureka.Tsr[],int) -> a
    424:424:double lambda$new$52(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    413:415:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$51(neureka.Tsr[],int) -> b
    415:415:double lambda$new$50(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    385:394:void lambda$new$49(neureka.backend.api.ExecutionCall) -> i
    360:378:void lambda$new$48(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    372:375:void lambda$new$47(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    366:369:void lambda$new$46(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    350:350:neureka.Tsr lambda$new$45(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> c
    325:346:neureka.autograd.ADAgent lambda$new$44(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    346:346:neureka.Tsr lambda$new$43(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    345:345:neureka.Tsr lambda$new$42(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    338:338:neureka.Tsr lambda$new$41(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    329:329:neureka.Tsr lambda$new$40(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    321:321:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> j
    320:320:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> k
    310:315:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$37(neureka.Tsr[],double,int) -> a
    315:315:double lambda$new$36(double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    314:314:double lambda$new$35(double,int[]) -> a
    312:312:double lambda$new$34(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    300:304:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$33(neureka.Tsr[],double,int) -> b
    304:304:double lambda$new$32(double[],neureka.ndim.iterators.NDIterator) -> a
    303:303:double lambda$new$31(double,neureka.ndim.iterators.NDIterator) -> a
    301:301:double lambda$new$30(double[],double,neureka.ndim.iterators.NDIterator) -> a
    273:282:void lambda$new$29(neureka.backend.api.ExecutionCall) -> l
    250:260:void lambda$new$28(neureka.backend.api.ExecutionCall) -> m
    261:264:void lambda$new$27(neureka.backend.api.ExecutionCall,int,int) -> a
    255:258:void lambda$new$26(neureka.backend.api.ExecutionCall,int,int) -> b
    223:238:neureka.autograd.ADAgent lambda$new$25(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> d
    238:238:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    237:237:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> m
    228:228:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> n
    227:227:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> o
    219:219:boolean lambda$new$20(neureka.backend.api.ExecutionCall) -> n
    218:218:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> o
    194:203:void lambda$new$18(neureka.backend.api.ExecutionCall) -> p
    165:178:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> c
    179:185:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> e
    170:176:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> f
    154:154:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> e
    135:144:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$13(neureka.Tsr[],int) -> c
    145:146:double lambda$new$12(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    142:142:double lambda$new$11(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    118:125:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$10(neureka.Tsr[],int) -> d
    126:127:double lambda$new$9(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    123:123:double lambda$new$8(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    78:109:neureka.Tsr lambda$new$7(neureka.backend.api.ExecutionCall,java.util.function.Function) -> c
    65:72:java.lang.String lambda$new$6(java.util.List) -> a
    42:49:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$static$5(neureka.Tsr[],int) -> e
    50:51:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    47:47:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> b
    28:33:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> f
    34:35:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    31:31:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    26:40:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.Multiplication$1 -> neureka.backend.standard.operations.operator.Multiplication$1:
    477:477:void <init>(neureka.backend.standard.operations.operator.Multiplication,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    480:480:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Multiplication$2 -> neureka.backend.standard.operations.operator.Multiplication$2:
    577:577:void <init>(neureka.backend.standard.operations.operator.Multiplication,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    580:580:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Power -> neureka.backend.standard.operations.operator.Power:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    72:545:void <init>() -> <init>
    561:583:double calculate(double[],int,int,java.util.List) -> calculate
    589:614:double calculate(double[],int,java.util.List) -> calculate
    518:525:java.lang.String lambda$new$56(java.util.List) -> a
    509:511:neureka.backend.api.ExecutionCall lambda$new$55(neureka.backend.api.ExecutionCall) -> a
    506:506:neureka.Tsr lambda$new$54(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    505:505:neureka.Tsr lambda$new$53(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    485:501:neureka.autograd.ADAgent lambda$new$52(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    501:501:neureka.Tsr lambda$new$51(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    500:500:neureka.Tsr lambda$new$50(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    490:490:neureka.Tsr lambda$new$49(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    489:489:neureka.Tsr lambda$new$48(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    475:480:boolean lambda$new$47(neureka.backend.api.ExecutionCall) -> b
    472:472:boolean lambda$new$46(neureka.backend.api.ExecutionCall) -> c
    418:427:void lambda$new$45(neureka.backend.api.ExecutionCall) -> d
    393:411:void lambda$new$44(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    405:408:void lambda$new$43(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    399:402:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    383:383:neureka.Tsr lambda$new$41(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    381:381:neureka.autograd.ADAgent lambda$new$40(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    378:378:boolean lambda$new$39(neureka.backend.api.ExecutionCall) -> e
    377:377:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> f
    367:372:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$37(neureka.Tsr[],double,int) -> a
    372:372:double lambda$new$36(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    371:371:double lambda$new$35(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    369:369:double lambda$new$34(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> b
    357:361:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$33(neureka.Tsr[],double,int) -> b
    361:361:double lambda$new$32(double[],double,neureka.ndim.iterators.NDIterator) -> a
    360:360:double lambda$new$31(double,double[],neureka.ndim.iterators.NDIterator) -> a
    358:358:double lambda$new$30(double[],double,neureka.ndim.iterators.NDIterator) -> b
    329:338:void lambda$new$29(neureka.backend.api.ExecutionCall) -> g
    306:316:void lambda$new$28(neureka.backend.api.ExecutionCall) -> h
    317:320:void lambda$new$27(neureka.backend.api.ExecutionCall,int,int) -> a
    311:314:void lambda$new$26(neureka.backend.api.ExecutionCall,int,int) -> b
    278:293:neureka.autograd.ADAgent lambda$new$25(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    293:293:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    292:292:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    283:283:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    282:282:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    274:274:boolean lambda$new$20(neureka.backend.api.ExecutionCall) -> i
    273:273:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> j
    244:255:void lambda$new$18(neureka.backend.api.ExecutionCall) -> k
    214:227:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    228:234:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    219:225:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    204:204:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> d
    133:195:neureka.Tsr lambda$new$13(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    114:121:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$12(neureka.Tsr[],int) -> a
    123:126:double lambda$new$11(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int,int[]) -> a
    119:119:double lambda$new$10(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    91:96:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$9(neureka.Tsr[],int) -> b
    98:107:double lambda$new$8(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    94:94:double lambda$new$7(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    77:82:java.lang.String lambda$new$6(java.util.List) -> b
    51:58:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$static$5(neureka.Tsr[],int) -> c
    59:64:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    56:56:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    28:32:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    33:43:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    30:30:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    26:49:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.Power$1 -> neureka.backend.standard.operations.operator.Power$1:
    447:447:void <init>(neureka.backend.standard.operations.operator.Power,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    450:450:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Power$2 -> neureka.backend.standard.operations.operator.Power$2:
    453:453:void <init>(neureka.backend.standard.operations.operator.Power,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    456:456:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Power$3 -> neureka.backend.standard.operations.operator.Power$3:
    464:464:void <init>(neureka.backend.standard.operations.operator.Power,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    467:467:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Power$4 -> neureka.backend.standard.operations.operator.Power$4:
    529:529:void <init>(neureka.backend.standard.operations.operator.Power,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    532:532:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Power$5 -> neureka.backend.standard.operations.operator.Power$5:
    535:535:void <init>(neureka.backend.standard.operations.operator.Power,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    538:538:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Subtraction -> neureka.backend.standard.operations.operator.Subtraction:
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creator -> a
    neureka.backend.api.operations.OperationType$DefaultOperatorCreator _creatorX -> b
    56:417:void <init>() -> <init>
    424:441:double calculate(double[],int,int,java.util.List) -> calculate
    447:463:double calculate(double[],int,java.util.List) -> calculate
    388:395:java.lang.String lambda$new$46(java.util.List) -> a
    337:346:void lambda$new$45(neureka.backend.api.ExecutionCall) -> a
    314:324:void lambda$new$44(neureka.backend.api.ExecutionCall) -> b
    325:328:void lambda$new$43(neureka.backend.api.ExecutionCall,int,int) -> a
    319:322:void lambda$new$42(neureka.backend.api.ExecutionCall,int,int) -> b
    285:300:neureka.autograd.ADAgent lambda$new$41(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    300:300:neureka.Tsr lambda$new$40(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    299:299:neureka.Tsr lambda$new$39(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    290:290:neureka.Tsr lambda$new$38(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    289:289:neureka.Tsr lambda$new$37(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    281:281:boolean lambda$new$36(neureka.backend.api.ExecutionCall) -> c
    280:280:boolean lambda$new$35(neureka.backend.api.ExecutionCall) -> d
    253:262:void lambda$new$34(neureka.backend.api.ExecutionCall) -> e
    227:246:void lambda$new$33(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    240:243:void lambda$new$32(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    234:237:void lambda$new$31(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    217:217:neureka.Tsr lambda$new$30(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    215:215:neureka.autograd.ADAgent lambda$new$29(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    212:212:boolean lambda$new$28(neureka.backend.api.ExecutionCall) -> f
    211:211:boolean lambda$new$27(neureka.backend.api.ExecutionCall) -> g
    204:207:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$26(neureka.Tsr[],double,int) -> a
    207:207:double lambda$new$25(int[]) -> a
    207:207:double lambda$new$24(int[]) -> b
    206:206:double lambda$new$23(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    197:199:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$22(neureka.Tsr[],double,int) -> b
    199:199:double lambda$new$21(neureka.ndim.iterators.NDIterator) -> a
    199:199:double lambda$new$20(neureka.ndim.iterators.NDIterator) -> b
    198:198:double lambda$new$19(double[],double,neureka.ndim.iterators.NDIterator) -> a
    169:178:void lambda$new$18(neureka.backend.api.ExecutionCall) -> h
    140:153:void lambda$new$17(neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    154:160:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> a
    145:151:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$DefaultOperatorCreator,int,int) -> b
    129:129:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    117:123:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$13(neureka.Tsr[],int) -> a
    123:123:double lambda$new$12(int,int[]) -> a
    122:122:double lambda$new$11(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    109:113:neureka.backend.api.operations.OperationType$SecondaryNDIConsumer lambda$new$10(neureka.Tsr[],int) -> b
    113:113:double lambda$new$9(int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    112:112:double lambda$new$8(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    76:100:neureka.Tsr lambda$new$7(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    62:69:java.lang.String lambda$new$6(java.util.List) -> b
    40:47:neureka.backend.api.operations.OperationType$TertiaryNDXConsumer lambda$static$5(neureka.Tsr[],int) -> c
    48:49:double lambda$static$4(int,int[],int[],int[]) -> a
    45:45:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    26:31:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    32:33:double lambda$static$1(int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    29:29:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    24:38:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.Subtraction$1 -> neureka.backend.standard.operations.operator.Subtraction$1:
    361:361:void <init>(neureka.backend.standard.operations.operator.Subtraction,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    364:364:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Subtraction$2 -> neureka.backend.standard.operations.operator.Subtraction$2:
    369:369:void <init>(neureka.backend.standard.operations.operator.Subtraction,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    372:372:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Subtraction$3 -> neureka.backend.standard.operations.operator.Subtraction$3:
    381:381:void <init>(neureka.backend.standard.operations.operator.Subtraction,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    384:384:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Subtraction$4 -> neureka.backend.standard.operations.operator.Subtraction$4:
    401:401:void <init>(neureka.backend.standard.operations.operator.Subtraction,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    404:404:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.operator.Subtraction$5 -> neureka.backend.standard.operations.operator.Subtraction$5:
    409:409:void <init>(neureka.backend.standard.operations.operator.Subtraction,java.lang.String,java.lang.String,int,boolean,boolean,boolean,boolean) -> <init>
    412:412:double calculate(double[],int,int,java.util.List) -> calculate
neureka.backend.standard.operations.other.CopyLeft -> neureka.backend.standard.operations.other.CopyLeft:
    21:192:void <init>() -> <init>
    197:197:double calculate(double[],int,int,java.util.List) -> calculate
    182:187:void lambda$new$23(neureka.backend.api.ExecutionCall) -> a
    169:174:void lambda$new$22(neureka.backend.api.ExecutionCall) -> b
    153:156:neureka.backend.api.ExecutionCall lambda$new$21(neureka.backend.api.ExecutionCall) -> c
    149:149:neureka.Tsr lambda$new$20(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    148:148:neureka.Tsr lambda$new$19(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    146:146:neureka.autograd.ADAgent lambda$new$18(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    143:143:boolean lambda$new$17(neureka.backend.api.ExecutionCall) -> d
    142:142:boolean lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    122:131:void lambda$new$15(neureka.backend.api.ExecutionCall) -> f
    97:115:void lambda$new$14(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    109:112:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> a
    103:106:void lambda$new$12(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,double,int,int) -> b
    85:87:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$11(neureka.Tsr[],double,int) -> a
    86:86:double lambda$new$10(double[],neureka.Tsr[],double,int[]) -> a
    78:80:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$9(neureka.Tsr[],double,int) -> b
    79:79:double lambda$new$8(double[],double,neureka.ndim.iterators.NDIterator) -> a
    62:67:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> g
    58:58:neureka.Tsr lambda$new$6(neureka.backend.api.ExecutionCall,java.util.function.Function) -> b
    57:57:neureka.Tsr lambda$new$5(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> b
    55:55:neureka.autograd.ADAgent lambda$new$4(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    52:52:boolean lambda$new$3(neureka.backend.api.ExecutionCall) -> h
    51:51:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> i
    46:48:float lambda$new$1(neureka.backend.api.ExecutionCall) -> j
    31:36:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.other.CopyRight -> neureka.backend.standard.operations.other.CopyRight:
    21:101:void <init>() -> <init>
    105:105:double calculate(double[],int,int,java.util.List) -> calculate
    85:96:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    67:78:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    55:57:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    52:52:neureka.Tsr lambda$new$8(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    51:51:neureka.Tsr lambda$new$7(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    46:46:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> d
    45:45:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> e
    38:40:neureka.backend.api.operations.OperationType$TertiaryNDIConsumer lambda$new$3(neureka.Tsr[],int) -> a
    40:40:double lambda$new$2(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    39:39:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    25:32:java.lang.String lambda$new$0(java.util.List) -> a
neureka.backend.standard.operations.other.DimFit -> neureka.backend.standard.operations.other.DimFit:
    boolean $assertionsDisabled -> a
    19:129:void <init>() -> <init>
    134:134:double calculate(double[],int,int,java.util.List) -> calculate
    121:121:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    120:120:neureka.Tsr lambda$new$6(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    63:105:neureka.Tsr lambda$new$5(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    49:55:neureka.autograd.ADAgent lambda$new$4(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    42:42:boolean lambda$new$3(neureka.backend.api.ExecutionCall) -> b
    41:41:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> c
    40:40:float lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    31:35:java.lang.String lambda$new$0(java.util.List) -> a
    13:13:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.DimTrim -> neureka.backend.standard.operations.other.DimTrim:
    boolean $assertionsDisabled -> a
    22:86:void <init>() -> <init>
    89:128:neureka.Tsr pad(neureka.Tsr,int[],boolean) -> pad
    133:162:neureka.Tsr trim(neureka.Tsr,int[],boolean) -> trim
    168:168:double calculate(double[],int,int,java.util.List) -> calculate
    157:157:int lambda$trim$19(java.lang.Integer) -> a
    156:156:int lambda$trim$18(java.lang.Integer) -> b
    155:155:int lambda$trim$17(java.lang.Integer) -> c
    154:154:int lambda$trim$16(java.lang.Integer) -> d
    153:153:int lambda$trim$15(java.lang.Integer) -> e
    125:125:int lambda$pad$14(java.lang.Integer) -> f
    124:124:int lambda$pad$13(java.lang.Integer) -> g
    123:123:int lambda$pad$12(java.lang.Integer) -> h
    122:122:int lambda$pad$11(java.lang.Integer) -> i
    121:121:int lambda$pad$10(java.lang.Integer) -> j
    78:78:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> a
    77:77:neureka.Tsr lambda$new$8(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    63:73:neureka.Tsr lambda$new$7(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    49:57:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    57:57:neureka.Tsr lambda$new$5(int,int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    56:56:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    45:45:boolean lambda$new$3(neureka.backend.api.ExecutionCall) -> b
    44:44:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> c
    43:43:float lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    34:38:java.lang.String lambda$new$0(java.util.List) -> a
    16:16:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.Randomization -> neureka.backend.standard.operations.other.Randomization:
    22:114:void <init>() -> <init>
    118:118:double calculate(double[],int,int,java.util.List) -> calculate
    84:98:void lambda$new$12(neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    99:105:void lambda$new$11(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,int,int) -> a
    89:95:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.operations.OperationType$ScalarOperatorCreator,int,int) -> b
    72:74:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> a
    69:69:neureka.Tsr lambda$new$8(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    68:68:neureka.Tsr lambda$new$7(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    66:66:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    54:61:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    51:51:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    41:41:neureka.backend.api.operations.OperationType$PrimaryNDXConsumer lambda$new$3(neureka.Tsr[],double,int) -> a
    42:46:double lambda$new$2(double,int[]) -> a
    29:29:neureka.backend.api.operations.OperationType$PrimaryNDIConsumer lambda$new$1(neureka.Tsr[],double,int) -> b
    30:35:double lambda$new$0(double,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.other.Reshape -> neureka.backend.standard.operations.other.Reshape:
    24:106:void <init>() -> <init>
    111:120:neureka.Tsr reshaped(neureka.Tsr,int[],boolean) -> reshaped
    124:138:int[] invert(int[]) -> invert
    143:143:double calculate(double[],int,int,java.util.List) -> calculate
    98:98:neureka.backend.api.ExecutionCall lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    97:97:neureka.Tsr lambda$new$9(neureka.backend.api.ExecutionCall,java.util.function.Function) -> a
    85:94:neureka.Tsr lambda$new$8(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    75:80:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    80:80:neureka.Tsr lambda$new$6(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    79:79:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> b
    70:70:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    69:69:boolean lambda$new$3(neureka.backend.api.ExecutionCall) -> c
    68:68:float lambda$new$2(neureka.backend.api.ExecutionCall) -> d
    35:63:java.lang.String lambda$new$1(java.util.List) -> a
    39:41:java.lang.Boolean lambda$new$0(java.lang.String) -> a
neureka.calculus.AbstractBaseFunction -> neureka.calculus.AbstractBaseFunction:
    46:46:void <init>() -> <init>
    51:51:double call(double) -> call
    56:56:neureka.Tsr call(neureka.Tsr) -> call
    63:63:neureka.Tsr call(java.util.List) -> call
    68:68:neureka.Tsr invoke(java.util.List) -> invoke
    75:75:double invoke(double) -> invoke
    80:80:double invoke(double[],int) -> invoke
    85:85:double invoke(double[]) -> invoke
    92:92:neureka.Tsr invoke(neureka.Tsr) -> invoke
    97:97:neureka.Tsr invoke(neureka.Tsr[],int) -> invoke
    102:102:neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    109:109:neureka.Tsr derive(java.util.List,int,int) -> derive
    114:114:neureka.Tsr derive(java.util.List,int) -> derive
neureka.calculus.Cache -> neureka.calculus.Cache:
    neureka.calculus.Cache _cache -> a
    org.slf4j.Logger _log -> b
    java.util.Map FUNCTIONS -> c
    java.util.Map PROCESSING -> d
    41:60:void <init>() -> <init>
    49:51:neureka.calculus.Cache instance() -> instance
    57:57:java.util.Map FUNCTIONS() -> FUNCTIONS
    64:66:void free(neureka.autograd.GraphLock) -> free
    70:100:neureka.Tsr preprocess(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier,int,int) -> preprocess
    105:113:neureka.Tsr _get(neureka.Tsr[],int,int) -> a
    118:134:void _put(neureka.Tsr,neureka.autograd.GraphNode,int,int) -> a
    138:144:long _keyOf(neureka.Tsr[],int,int) -> b
    148:148:int _keyed(int) -> a
    129:129:int lambda$_put$2(java.lang.Long,java.lang.Long) -> a
    88:88:java.lang.Object lambda$preprocess$1(neureka.Tsr) -> a
    60:60:int lambda$new$0(neureka.autograd.GraphLock,neureka.autograd.GraphLock) -> a
    40:40:void <clinit>() -> <clinit>
neureka.calculus.Function -> neureka.calculus.Function:
    neureka.calculus.Cache CACHE -> CACHE
    neureka.calculus.Function DIMTRIM -> DIMTRIM
    neureka.calculus.Function IDY -> IDY
    neureka.calculus.Function X -> X
    neureka.calculus.Function PLUS -> PLUS
    neureka.calculus.Function PLUS_ASSIGN -> PLUS_ASSIGN
    neureka.calculus.Function MINUS -> MINUS
    neureka.calculus.Function MINUS_ASSIGN -> MINUS_ASSIGN
    neureka.calculus.Function DIV -> DIV
    neureka.calculus.Function DIV_ASSIGN -> DIV_ASSIGN
    neureka.calculus.Function POW -> POW
    neureka.calculus.Function POW_ASSIGN -> POW_ASSIGN
    neureka.calculus.Function MUL -> MUL
    neureka.calculus.Function MUL_ASSIGN -> MUL_ASSIGN
    neureka.calculus.Function MOD -> MOD
    neureka.calculus.Function MOD_ASSIGN -> MOD_ASSIGN
    neureka.calculus.Function NEG -> NEG
    114:114:neureka.calculus.Function create(java.lang.String) -> create
    118:118:neureka.calculus.Function create(java.lang.String,boolean) -> create
    neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    boolean isDoingAD() -> isDoingAD
    boolean isFlat() -> isFlat
    neureka.backend.api.operations.OperationType getOperation() -> getOperation
    boolean dependsOn(int) -> dependsOn
    double call(double) -> call
    double invoke(double) -> invoke
    double call(double[],int) -> call
    double invoke(double[],int) -> invoke
    double call(double[]) -> call
    double invoke(double[]) -> invoke
    double derive(double[],int,int) -> derive
    double derive(double[],int) -> derive
    neureka.Tsr call(neureka.Tsr) -> call
    neureka.Tsr invoke(neureka.Tsr) -> invoke
    neureka.Tsr call(java.util.List) -> call
    neureka.Tsr invoke(java.util.List) -> invoke
    neureka.Tsr call(neureka.Tsr[],int) -> call
    neureka.Tsr invoke(neureka.Tsr[],int) -> invoke
    neureka.Tsr call(neureka.Tsr[]) -> call
    neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    neureka.Tsr derive(neureka.Tsr[],int) -> derive
    neureka.Tsr derive(java.util.List,int,int) -> derive
    neureka.Tsr derive(java.util.List,int) -> derive
    java.lang.String toString() -> toString
    64:83:void <clinit>() -> <clinit>
neureka.calculus.Function$Detached -> neureka.calculus.Function$Detached:
    neureka.calculus.Function IDY -> IDY
    neureka.calculus.Function X -> X
    neureka.calculus.Function PLUS -> PLUS
    neureka.calculus.Function PLUS_ASSIGN -> PLUS_ASSIGN
    neureka.calculus.Function MINUS -> MINUS
    neureka.calculus.Function MINUS_ASSIGN -> MINUS_ASSIGN
    neureka.calculus.Function DIV -> DIV
    neureka.calculus.Function DIV_ASSIGN -> DIV_ASSIGN
    neureka.calculus.Function POW -> POW
    neureka.calculus.Function POW_ASSIGN -> POW_ASSIGN
    neureka.calculus.Function MUL -> MUL
    neureka.calculus.Function MUL_ASSIGN -> MUL_ASSIGN
    neureka.calculus.Function ADD -> ADD
    neureka.calculus.Function ADD_ASSIGN -> ADD_ASSIGN
    neureka.calculus.Function MOD -> MOD
    neureka.calculus.Function MOD_ASSIGN -> MOD_ASSIGN
    neureka.calculus.Function NEG -> NEG
    91:91:void <init>() -> <init>
    93:110:void <clinit>() -> <clinit>
neureka.calculus.Function$Setup -> neureka.calculus.Function$Setup:
    121:121:void <init>() -> <init>
    125:125:neureka.Tsr commit(neureka.Tsr[],java.lang.String,boolean) -> commit
    130:130:neureka.Tsr commit(neureka.Tsr,neureka.Tsr[],java.lang.String,boolean) -> commit
    135:135:neureka.Tsr commit(neureka.Tsr[],neureka.calculus.Function) -> commit
    140:140:neureka.Tsr commit(neureka.Tsr,neureka.Tsr[],neureka.calculus.Function) -> commit
    145:168:neureka.Tsr commit(neureka.Tsr,neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier) -> commit
    150:150:java.lang.Object lambda$commit$0(neureka.Tsr) -> a
neureka.calculus.assembly.FunctionBuilder -> neureka.calculus.assembly.FunctionBuilder:
    boolean $assertionsDisabled -> a
    11:11:void <init>() -> <init>
    20:36:neureka.calculus.Function build(neureka.backend.api.operations.OperationType,int,boolean) -> build
    47:63:neureka.calculus.Function build(java.lang.String,boolean) -> build
    73:276:neureka.calculus.Function _build(java.lang.String,boolean) -> a
    286:293:java.util.List _rebindPairwise(java.util.List,int) -> a
    11:11:void <clinit>() -> <clinit>
neureka.calculus.assembly.FunctionParser -> neureka.calculus.assembly.FunctionParser:
    boolean $assertionsDisabled -> a
    13:13:void <init>() -> <init>
    16:20:int numberOfOperationsWithin(java.util.List) -> numberOfOperationsWithin
    24:32:java.lang.String parsedOperation(java.lang.String,int) -> parsedOperation
    36:67:java.lang.String findComponentIn(java.lang.String,int) -> findComponentIn
    71:94:java.util.List findParametersIn(java.lang.String,int) -> findParametersIn
    98:99:boolean isAnyOperation(java.lang.String) -> isAnyOperation
    103:110:java.lang.String groupBy(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> groupBy
    114:114:boolean isForbiddenChar(char) -> a
    119:154:java.lang.String cleanedHeadAndTail(java.lang.String) -> cleanedHeadAndTail
    158:207:java.lang.String unpackAndCorrect(java.lang.String) -> unpackAndCorrect
    211:221:java.lang.String assumptionBasedOn(java.lang.String) -> assumptionBasedOn
    225:257:double similarity(java.lang.String,java.lang.String) -> similarity
    13:13:void <clinit>() -> <clinit>
neureka.calculus.implementations.FunctionConstant -> neureka.calculus.implementations.FunctionConstant:
    double _value -> a
    8:8:void <init>() -> <init>
    12:12:double value() -> value
    19:19:boolean isFlat() -> isFlat
    24:24:boolean isDoingAD() -> isDoingAD
    29:29:neureka.backend.api.operations.AbstractOperationType getOperation() -> getOperation
    34:34:boolean dependsOn(int) -> dependsOn
    40:53:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    60:60:double call(double[],int) -> call
    65:65:double call(double[]) -> call
    70:70:double derive(double[],int) -> derive
    75:75:double derive(double[],int,int) -> derive
    82:82:neureka.Tsr call(neureka.Tsr[],int) -> call
    87:87:neureka.Tsr call(neureka.Tsr[]) -> call
    92:92:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    97:97:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    104:104:java.lang.String toString() -> toString
    8:8:neureka.backend.api.operations.OperationType getOperation() -> getOperation
neureka.calculus.implementations.FunctionInput -> neureka.calculus.implementations.FunctionInput:
    int _index -> a
    10:10:void <init>() -> <init>
    17:17:boolean providesGradient() -> providesGradient
    24:24:boolean isFlat() -> isFlat
    29:29:boolean isDoingAD() -> isDoingAD
    34:34:neureka.backend.api.operations.AbstractOperationType getOperation() -> getOperation
    39:39:boolean dependsOn(int) -> dependsOn
    47:67:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    72:82:neureka.Tsr _extract(neureka.Tsr) -> a
    89:89:double call(double[],int) -> call
    94:94:double call(double[]) -> call
    99:99:double derive(double[],int) -> derive
    104:104:double derive(double[],int,int) -> derive
    111:111:neureka.Tsr call(neureka.Tsr[],int) -> call
    116:116:neureka.Tsr call(neureka.Tsr[]) -> call
    121:121:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    126:128:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    135:135:java.lang.String toString() -> toString
    139:139:int index() -> index
    10:10:neureka.backend.api.operations.OperationType getOperation() -> getOperation
neureka.calculus.implementations.FunctionNode -> neureka.calculus.implementations.FunctionNode:
    neureka.backend.api.operations.OperationType _operation -> a
    boolean _isFlat -> b
    boolean _isDoingAD -> c
    java.util.List _src -> d
    44:63:void <init>(neureka.backend.api.operations.OperationType,java.util.List,boolean) -> <init>
    69:69:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    77:78:java.lang.String toString() -> toString
    83:84:boolean dependsOn(int) -> dependsOn
    99:122:neureka.Tsr _tensor_activation(neureka.Tsr[],int,int) -> _tensor_activation
    1309:1313:neureka.devices.Device _device(neureka.Tsr[]):309:313 -> _tensor_activation
    1309:1313:neureka.Tsr _tensor_activation(neureka.Tsr[],int,int):100 -> _tensor_activation
    128:132:neureka.Tsr __flat_execution(neureka.backend.api.ExecutionCall) -> a
    136:136:java.util.List getChildren() -> getChildren
    141:166:neureka.Tsr __deep_activation(neureka.backend.api.ExecutionCall) -> b
    199:279:neureka.Tsr _deep_derivative(neureka.backend.api.ExecutionCall) -> c
    284:304:neureka.Tsr[] srcActivation(neureka.Tsr[],int,int,int) -> srcActivation
    318:331:boolean _shareGuestDevice(neureka.Tsr[]) -> a
    338:338:neureka.Tsr call(neureka.Tsr[],int) -> call
    343:343:neureka.Tsr call(neureka.Tsr[]) -> call
    348:348:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    353:353:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    360:360:double call(double[],int) -> call
    365:365:double call(double[]) -> call
    370:370:double derive(double[],int,int) -> derive
    375:375:double derive(double[],int) -> derive
    26:26:neureka.backend.api.operations.OperationType getOperation() -> getOperation
    28:28:boolean isFlat() -> isFlat
    30:30:boolean isDoingAD() -> isDoingAD
    353:353:neureka.Tsr lambda$derive$7(neureka.Tsr[],int) -> a
    348:348:neureka.Tsr lambda$derive$6(neureka.Tsr[],int,int) -> a
    343:343:neureka.Tsr lambda$call$5(neureka.Tsr[]) -> b
    338:338:neureka.Tsr lambda$call$4(neureka.Tsr[],int) -> b
    202:262:neureka.Tsr lambda$_deep_derivative$3(neureka.backend.api.ExecutionCall) -> d
    2181:2194:int ___indexOfFoundDerivative(neureka.Tsr[]):181:194 -> d
    2181:2194:neureka.Tsr lambda$_deep_derivative$3(neureka.backend.api.ExecutionCall):227 -> d
    158:158:java.lang.String lambda$__deep_activation$2(int) -> a
    117:117:java.lang.Object lambda$_tensor_activation$1(neureka.backend.api.ExecutionCall) -> e
    77:77:java.lang.String lambda$toString$0(neureka.calculus.Function) -> a
neureka.calculus.implementations.FunctionVariable -> neureka.calculus.implementations.FunctionVariable:
    boolean _providesGradient -> a
    9:11:void <init>() -> <init>
    14:14:boolean providesGradient() -> providesGradient
    19:19:boolean isFlat() -> isFlat
    24:24:boolean isDoingAD() -> isDoingAD
    29:29:neureka.backend.api.operations.AbstractOperationType getOperation() -> getOperation
    34:34:boolean dependsOn(int) -> dependsOn
    40:41:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    48:48:double call(double[],int) -> call
    53:55:double call(double[]) -> call
    60:60:double derive(double[],int) -> derive
    65:66:double derive(double[],int,int) -> derive
    72:72:neureka.Tsr call(neureka.Tsr[],int) -> call
    77:79:neureka.Tsr call(neureka.Tsr[]) -> call
    84:84:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    89:89:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    96:96:java.lang.String toString() -> toString
    9:9:neureka.backend.api.operations.OperationType getOperation() -> getOperation
neureka.devices.AbstractBaseDevice -> neureka.devices.AbstractBaseDevice:
    48:48:void <init>() -> <init>
    53:55:int size() -> size
    60:60:boolean isEmpty() -> isEmpty
    65:65:boolean contains(java.lang.Object) -> contains
    71:71:java.util.Iterator iterator() -> iterator
    77:77:java.lang.Object[] toArray() -> toArray
    83:83:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    88:88:java.lang.Object[] toArray(java.util.function.IntFunction) -> toArray
    94:99:boolean add(neureka.Tsr) -> add
    104:111:boolean remove(java.lang.Object) -> remove
    116:116:boolean containsAll(java.util.Collection) -> containsAll
    121:124:boolean addAll(java.util.Collection) -> addAll
    129:129:boolean removeAll(java.util.Collection) -> removeAll
    134:136:boolean removeIf(java.util.function.Predicate) -> removeIf
    141:141:boolean retainAll(java.util.Collection) -> retainAll
    146:147:void clear() -> clear
    151:151:java.util.Spliterator spliterator() -> spliterator
    156:156:java.util.stream.Stream stream() -> stream
    161:161:java.util.stream.Stream parallelStream() -> parallelStream
    48:48:boolean add(java.lang.Object) -> add
neureka.devices.AbstractDevice -> neureka.devices.AbstractDevice:
    java.lang.ref.Cleaner _CLEANER -> a
    org.slf4j.Logger _log -> _log
    66:68:void <init>() -> <init>
    void _execute(neureka.Tsr[],int,neureka.backend.api.operations.OperationType) -> _execute
    86:87:void update(neureka.Tsr,neureka.Tsr) -> update
    91:92:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    96:97:void _cleaning(java.lang.Object,java.lang.Runnable) -> _cleaning
    102:114:neureka.devices.Device execute(neureka.backend.api.ExecutionCall) -> execute
    60:60:void update(java.lang.Object,java.lang.Object) -> update
    112:112:void lambda$execute$0(neureka.backend.api.ExecutionCall) -> a
    62:62:void <clinit>() -> <clinit>
neureka.devices.Device -> neureka.devices.Device:
    75:106:neureka.devices.Device find(java.lang.String) -> find
    void dispose() -> dispose
    neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    boolean has(neureka.Tsr) -> has
    neureka.devices.Device free(neureka.Tsr) -> free
    neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    neureka.devices.Device execute(neureka.backend.api.ExecutionCall) -> execute
    double[] value64f(neureka.Tsr) -> value64f
    float[] value32f(neureka.Tsr) -> value32f
    double value64f(neureka.Tsr,int) -> value64f
    float value32f(neureka.Tsr,int) -> value32f
    java.util.Collection getTensors() -> getTensors
neureka.devices.Storage -> neureka.devices.Storage:
    neureka.devices.Storage store(neureka.Tsr) -> store
    neureka.devices.Storage restore(neureka.Tsr) -> restore
neureka.devices.host.HostCPU -> neureka.devices.host.HostCPU:
    neureka.devices.host.HostCPU _instance -> a
    neureka.devices.host.HostCPU$NativeExecutor _executor -> b
    java.util.Set _tensors -> c
    21:26:void <init>() -> <init>
    29:29:neureka.devices.host.HostCPU instance() -> instance
    33:33:neureka.devices.host.HostCPU$NativeExecutor getExecutor() -> getExecutor
    39:47:void _execute(neureka.Tsr[],int,neureka.backend.api.operations.OperationType) -> _execute
    51:52:void dispose() -> dispose
    56:56:neureka.devices.Device restore(neureka.Tsr) -> restore
    61:62:neureka.devices.Device store(neureka.Tsr) -> store
    67:69:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    74:74:boolean has(neureka.Tsr) -> has
    79:80:neureka.devices.Device free(neureka.Tsr) -> free
    85:85:neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    90:90:neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    95:95:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    100:100:double[] value64f(neureka.Tsr) -> value64f
    105:105:float[] value32f(neureka.Tsr) -> value32f
    110:110:double value64f(neureka.Tsr,int) -> value64f
    115:115:float value32f(neureka.Tsr,int) -> value32f
    121:121:java.util.Collection getTensors() -> getTensors
    14:14:neureka.devices.Storage restore(neureka.Tsr) -> restore
    14:14:neureka.devices.Storage store(neureka.Tsr) -> store
    18:18:void <clinit>() -> <clinit>
neureka.devices.host.HostCPU$NativeExecutor -> neureka.devices.host.HostCPU$NativeExecutor:
    java.util.concurrent.ThreadPoolExecutor _pool -> a
    128:132:void <init>(neureka.devices.host.HostCPU) -> <init>
    136:136:java.util.concurrent.ThreadPoolExecutor getPool() -> getPool
    143:167:void threaded(int,neureka.devices.host.HostCPU$Range) -> threaded
    153:155:void lambda$threaded$0(neureka.Neureka,neureka.devices.host.HostCPU$Range,int,int) -> a
neureka.devices.host.HostCPU$Range -> neureka.devices.host.HostCPU$Range:
    void execute(int,int) -> execute
neureka.devices.host.execution.HostExecutor -> neureka.devices.host.execution.HostExecutor:
    neureka.backend.api.executions.ExecutorFor$ExecutionOn _creator -> a
    int _arity -> b
    18:21:void <init>(neureka.backend.api.executions.ExecutorFor$ExecutionOn,int) -> <init>
    26:26:neureka.backend.api.executions.ExecutorFor$ExecutionOn getExecution() -> getExecution
    31:31:int arity() -> arity
neureka.devices.opencl.KernelCaller -> neureka.devices.opencl.KernelCaller:
    org.jocl.cl_command_queue _queue -> a
    org.jocl.cl_kernel _kernel -> b
    java.util.List _inputs -> c
    int _argId -> d
    boolean $assertionsDisabled -> e
    24:35:void <init>(org.jocl.cl_kernel,org.jocl.cl_command_queue) -> <init>
    44:49:neureka.devices.opencl.KernelCaller pass(neureka.Tsr) -> pass
    59:62:neureka.devices.opencl.KernelCaller passRaw(neureka.Tsr) -> passRaw
    71:73:neureka.devices.opencl.KernelCaller pass(int) -> pass
    82:84:neureka.devices.opencl.KernelCaller pass(float) -> pass
    93:108:void call(int) -> call
    112:128:void call(long[],long[]) -> call
    132:138:void _releaseEvents(neureka.Tsr[]) -> a
    142:149:org.jocl.cl_event[] _getWaitList(neureka.Tsr[]) -> b
    18:18:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice -> neureka.devices.opencl.OpenCLDevice:
    java.util.Map _adhocKernels -> a
    neureka.devices.opencl.OpenCLDevice$cl_ad_hoc[] _adhocKernelRingBuffer -> b
    int _ringIndex -> c
    java.util.Set _tensors -> d
    org.jocl.cl_device_id _deviceId -> e
    neureka.devices.opencl.OpenCLPlatform _platform -> f
    org.jocl.cl_command_queue _queue -> g
    82:83:neureka.devices.opencl.OpenCLDevice newInstanceOf(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> newInstanceOf
    162:217:void <init>(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> <init>
    220:220:boolean hasAdHocKernel(java.lang.String) -> hasAdHocKernel
    224:226:neureka.devices.opencl.KernelCaller getAdHocKernel(java.lang.String) -> getAdHocKernel
    245:303:neureka.devices.opencl.OpenCLDevice compileAdHocKernel(java.lang.String,java.lang.String) -> compileAdHocKernel
    315:318:java.util.Collection getTensors() -> getTensors
    326:328:void dispose() -> dispose
    342:354:neureka.devices.Device restore(neureka.Tsr) -> restore
    359:363:neureka.devices.Device store(neureka.Tsr) -> store
    368:372:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    377:453:void _add(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr) -> a
    466:466:boolean has(neureka.Tsr) -> has
    474:509:void _store(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr,int) -> a
    514:519:neureka.devices.Device free(neureka.Tsr) -> free
    526:543:neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    549:567:neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    573:578:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    583:584:double[] value64f(neureka.Tsr) -> value64f
    589:603:double[] _value64f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> a
    609:610:float[] value32f(neureka.Tsr) -> value32f
    614:629:float[] _value32f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> b
    634:635:double value64f(neureka.Tsr,int) -> value64f
    640:641:float value32f(neureka.Tsr,int) -> value32f
    645:647:neureka.devices.opencl.KernelCaller getKernel(neureka.backend.api.ExecutionCall) -> getKernel
    653:662:void _execute(neureka.Tsr[],int,neureka.backend.api.operations.OperationType) -> _execute
    696:696:java.lang.String name() -> name
    700:700:java.lang.String vendor() -> vendor
    704:704:java.lang.String version() -> version
    708:717:java.lang.String type() -> type
    721:721:int maxComputeUnits() -> maxComputeUnits
    725:725:long maxWorkItemSimensions() -> maxWorkItemSimensions
    729:729:long[] maxWorkItemSizes() -> maxWorkItemSizes
    733:733:long maxWorkGroupSize() -> maxWorkGroupSize
    737:737:long maxClockFrequenzy() -> maxClockFrequenzy
    741:741:int maxAddressBits() -> maxAddressBits
    745:745:long maxMemAllocSize() -> maxMemAllocSize
    749:749:long globalMemSize() -> globalMemSize
    753:753:int errorCorrectionSupport() -> errorCorrectionSupport
    757:757:int localMemType() -> localMemType
    761:761:long localMemSize() -> localMemSize
    765:765:long maxConstantBufferSize() -> maxConstantBufferSize
    769:769:long maxConstantBufferSizeKB() -> maxConstantBufferSizeKB
    783:783:int imageSupport() -> imageSupport
    787:787:int maxReadImageArgs() -> maxReadImageArgs
    791:791:int maxWriteImageArgs() -> maxWriteImageArgs
    795:795:long singleFPConfig() -> singleFPConfig
    799:799:long image2DMaxWidth() -> image2DMaxWidth
    803:803:long image2DMaxHeight() -> image2DMaxHeight
    807:807:long image3DMaxWidth() -> image3DMaxWidth
    811:811:long image3DMaxHeight() -> image3DMaxHeight
    815:815:long image3DMaxDepth() -> image3DMaxDepth
    819:819:int prefVecWidthChar() -> prefVecWidthChar
    823:823:int prefVecWidthShort() -> prefVecWidthShort
    827:827:int prefVecWidthInt() -> prefVecWidthInt
    831:831:int prefVecWidthLong() -> prefVecWidthLong
    835:835:int prefVecWidthFloat() -> prefVecWidthFloat
    839:839:int prefVecWidthDouble() -> prefVecWidthDouble
    77:77:java.lang.String toString() -> toString
    168:168:org.jocl.cl_device_id getDeviceId() -> getDeviceId
    178:178:neureka.devices.opencl.OpenCLPlatform getPlatform() -> getPlatform
    76:76:neureka.devices.Storage restore(neureka.Tsr) -> restore
    76:76:neureka.devices.Storage store(neureka.Tsr) -> store
    391:393:void lambda$_add$5(org.jocl.cl_event,org.jocl.cl_mem) -> a
    380:380:void lambda$_add$4(org.jocl.cl_mem) -> a
    317:317:void lambda$getTensors$3(java.util.Collection,java.util.Collection) -> a
    317:317:void lambda$getTensors$2(java.util.Collection,neureka.Tsr) -> a
    300:302:void lambda$compileAdHocKernel$1(org.jocl.cl_kernel,org.jocl.cl_program) -> a
    207:207:void lambda$new$0() -> a
neureka.devices.opencl.OpenCLDevice$DeviceQuery -> neureka.devices.opencl.OpenCLDevice$DeviceQuery:
    842:842:void <init>() -> <init>
    852:852:int getInt(org.jocl.cl_device_id,int) -> getInt
    864:866:int[] getInts(org.jocl.cl_device_id,int,int) -> getInts
    877:877:long getLong(org.jocl.cl_device_id,int) -> getLong
    889:891:long[] getLongs(org.jocl.cl_device_id,int,int) -> getLongs
    903:911:java.lang.String getString(org.jocl.cl_device_id,int) -> getString
    923:931:java.lang.String getString(org.jocl.cl_platform_id,int) -> getString
    942:942:long getSize(org.jocl.cl_device_id,int) -> getSize
    956:974:long[] getSizes(org.jocl.cl_device_id,int,int) -> getSizes
neureka.devices.opencl.OpenCLDevice$cl_ad_hoc -> neureka.devices.opencl.OpenCLDevice$a:
    java.lang.String source -> a
    org.jocl.cl_kernel kernel -> b
    149:149:void <init>() -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr -> neureka.devices.opencl.OpenCLDevice$cl_tsr:
    int fp -> a
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config config -> b
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value value -> c
    100:131:void <init>() -> <init>
    100:100:void update(java.lang.Object,java.lang.Object) -> update
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config:
    org.jocl.cl_mem data -> data
    125:125:void <init>() -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value:
    int size -> size
    org.jocl.cl_mem data -> data
    org.jocl.cl_event event -> event
    111:113:void <init>() -> <init>
neureka.devices.opencl.OpenCLPlatform -> neureka.devices.opencl.OpenCLPlatform:
    org.jocl.cl_platform_id _pid -> a
    org.jocl.cl_context _context -> b
    boolean _isDoingLegacyIndexing -> c
    java.util.Map _id_device -> d
    java.util.Map _kernels -> e
    28:64:void <init>(org.jocl.cl_platform_id) -> <init>
    67:71:void recompile() -> recompile
    76:170:void _compile(org.jocl.cl_device_id[]) -> a
    173:175:java.util.List getDevices() -> getDevices
    179:179:boolean has(org.jocl.cl_device_id) -> has
    183:183:neureka.devices.opencl.OpenCLDevice get(org.jocl.cl_device_id) -> get
    187:188:void put(org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> put
    191:191:java.util.Map getKernels() -> getKernels
    196:196:java.util.List PLATFORMS() -> PLATFORMS
    24:24:org.jocl.cl_platform_id getPid() -> getPid
    26:26:org.jocl.cl_context getContext() -> getContext
    28:28:boolean isDoingLegacyIndexing() -> isDoingLegacyIndexing
    174:174:void lambda$getDevices$1(java.util.List,org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> a
    137:139:void lambda$_compile$0(java.util.ArrayList,java.util.ArrayList,java.lang.String,java.lang.String) -> a
neureka.devices.opencl.OpenCLPlatform$Setup -> neureka.devices.opencl.OpenCLPlatform$a:
    java.util.List PLATFORMS -> a
    201:201:void <clinit>() -> <clinit>
    1206:1215:java.util.List findAllPlatforms():206:215 -> <clinit>
    1206:1215:void <clinit>():201 -> <clinit>
neureka.devices.opencl.execution.CLExecutor -> neureka.devices.opencl.execution.CLExecutor:
    java.util.function.Function _aliasSwapper -> a
    java.util.function.Function asAdvanced -> b
    java.lang.String _source -> c
    java.lang.String _name -> d
    neureka.backend.api.executions.ExecutorFor$ExecutionOn _lambda -> e
    int _arity -> f
    48:48:java.lang.String getSource() -> getSource
    51:51:java.lang.String getName() -> getName
    56:56:neureka.backend.api.executions.ExecutorFor$ExecutionOn getExecution() -> getExecution
    61:61:int arity() -> arity
    19:70:void <init>(neureka.backend.api.executions.ExecutorFor$ExecutionOn,int) -> <init>
    19:82:void <init>(neureka.backend.api.executions.ExecutorFor$ExecutionOn,int,java.lang.String,java.lang.String) -> <init>
    19:117:void <init>(neureka.backend.api.executions.ExecutorFor$ExecutionOn,int,java.lang.String,java.lang.String,java.lang.String,neureka.backend.api.operations.AbstractOperationType) -> <init>
    1130:1158:java.util.Map _getParsedKernelsFromTemplate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,neureka.backend.api.operations.AbstractOperationType):130:158 -> <init>
    1130:1158:void <init>(neureka.backend.api.executions.ExecutorFor$ExecutionOn,int,java.lang.String,java.lang.String,java.lang.String,neureka.backend.api.operations.AbstractOperationType):106 -> <init>
    136:146:void lambda$_getParsedKernelsFromTemplate$2(java.lang.String[],java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String) -> a
    36:39:java.lang.String lambda$new$1(java.lang.String) -> a
    21:31:java.lang.String lambda$new$0(java.lang.String) -> b
neureka.devices.opencl.execution.CLExecutor$Parser -> neureka.devices.opencl.execution.CLExecutor$a:
    void apply(java.lang.String,java.lang.String,java.lang.String) -> apply
neureka.devices.opencl.utility.DeviceQuery -> neureka.devices.opencl.utility.DeviceQuery:
    14:14:void <init>() -> <init>
    23:182:java.lang.String query() -> query
    1270:1278:java.lang.String getString(org.jocl.cl_platform_id,int):270:278 -> query
    1270:1278:java.lang.String query():38 -> query
    194:194:int getInt(org.jocl.cl_device_id,int) -> a
    207:209:int[] getInts(org.jocl.cl_device_id,int,int) -> a
    221:221:long getLong(org.jocl.cl_device_id,int) -> b
    234:236:long[] getLongs(org.jocl.cl_device_id,int,int) -> b
    249:257:java.lang.String getString(org.jocl.cl_device_id,int) -> c
    290:290:long getSize(org.jocl.cl_device_id,int) -> d
    305:324:long[] getSizes(org.jocl.cl_device_id,int,int) -> c
neureka.devices.opencl.utility.DispatchUtility -> neureka.devices.opencl.utility.DispatchUtility:
    boolean $assertionsDisabled -> a
    8:8:void <init>() -> <init>
    13:137:int[] parseTile(int,int[]) -> parseTile
    151:155:int productOfNewDimension(int[],int,int,int) -> a
    164:168:int inversionProductOfNewDimension(int[],int[],int,int) -> a
    173:194:java.util.List primeFactors(int) -> primeFactors
    208:218:int[] findBestParams(int,int,int,int,int) -> findBestParams
    224:231:int[] bestMatMulMatch(int,int,int,int) -> bestMatMulMatch
    8:8:void <clinit>() -> <clinit>
neureka.devices.opencl.utility.WeakTensorReference -> neureka.devices.opencl.utility.WeakTensorReference:
    int _hash -> a
    24:26:void <init>(java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
    30:30:int hashCode() -> hashCode
    35:35:boolean equals(java.lang.Object) -> equals
neureka.devices.storage.AbstractFileHead -> neureka.devices.storage.AbstractFileHead:
    org.slf4j.Logger _LOG -> _LOG
    java.lang.String _fileName -> _fileName
    19:39:void <init>(java.lang.String) -> <init>
    java.lang.Object _loadData() -> _loadData
    45:52:java.io.File _loadFile() -> _loadFile
    57:69:java.io.FileInputStream _loadFileInputStream() -> _loadFileInputStream
    75:81:java.lang.Object free() -> free
    86:86:java.lang.String getLocation() -> getLocation
    91:92:java.lang.String getFileName() -> getFileName
    98:104:neureka.devices.Storage restore(neureka.Tsr) -> restore
neureka.devices.storage.FileDevice -> neureka.devices.storage.FileDevice:
    java.util.Map _DEVICES -> a
    java.lang.String _directory -> b
    java.util.Map _stored -> c
    73:77:neureka.devices.storage.FileDevice instance(java.lang.String) -> instance
    70:86:void <init>(java.lang.String) -> <init>
    89:89:neureka.devices.storage.FileHead fileHeadOf(neureka.Tsr) -> fileHeadOf
    94:96:void dispose() -> dispose
    100:108:neureka.devices.Device restore(neureka.Tsr) -> restore
    114:129:neureka.devices.Device store(neureka.Tsr) -> store
    134:151:neureka.devices.Device store(neureka.Tsr,java.lang.String) -> store
    156:156:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    161:161:boolean has(neureka.Tsr) -> has
    167:176:neureka.devices.Device free(neureka.Tsr) -> free
    181:181:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    186:186:neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    191:191:neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    196:196:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    201:201:neureka.devices.Device execute(neureka.backend.api.ExecutionCall) -> execute
    206:206:double[] value64f(neureka.Tsr) -> value64f
    211:211:float[] value32f(neureka.Tsr) -> value32f
    216:216:double value64f(neureka.Tsr,int) -> value64f
    221:221:float value32f(neureka.Tsr,int) -> value32f
    226:226:java.util.Collection getTensors() -> getTensors
    232:232:void update(neureka.Tsr,neureka.Tsr) -> update
    40:40:java.lang.String toString() -> toString
    68:68:java.lang.String getDirectory() -> getDirectory
    39:39:void update(java.lang.Object,java.lang.Object) -> update
    39:39:neureka.devices.Storage restore(neureka.Tsr) -> restore
    39:39:neureka.devices.Storage store(neureka.Tsr) -> store
    64:64:neureka.devices.storage.FileHead lambda$static$5(java.lang.String,neureka.Tsr) -> a
    61:61:neureka.devices.storage.FileHead lambda$static$4(java.lang.String,neureka.Tsr) -> b
    58:58:neureka.devices.storage.FileHead lambda$static$3(java.lang.String,neureka.Tsr) -> c
    53:53:neureka.devices.storage.FileHead lambda$static$2(java.lang.String) -> a
    50:50:neureka.devices.storage.FileHead lambda$static$1(java.lang.String) -> b
    47:47:neureka.devices.storage.FileHead lambda$static$0(java.lang.String) -> c
    43:56:void <clinit>() -> <clinit>
neureka.devices.storage.FileHead -> neureka.devices.storage.FileHead:
    neureka.Tsr load() -> load
    java.lang.Object free() -> free
    int getValueSize() -> getValueSize
    int getDataSize() -> getDataSize
    int getTotalSize() -> getTotalSize
    java.lang.String getLocation() -> getLocation
    java.lang.String getFileName() -> getFileName
    neureka.dtype.DataType getDataType() -> getDataType
    int[] getShape() -> getShape
    java.lang.String extension() -> extension
neureka.devices.storage.IDXHead -> neureka.devices.storage.IDXHead:
    neureka.dtype.DataType _dataType -> a
    int _dataOffset -> b
    int _valueSize -> c
    int[] _shape -> d
    java.util.Map TYPE_MAP -> e
    java.util.Map CODE_MAP -> f
    boolean $assertionsDisabled -> g
    54:61:void <init>(java.lang.String) -> <init>
    1073:1097:void _loadHead():73:97 -> <init>
    1073:1097:void <init>(java.lang.String):56 -> <init>
    64:69:void <init>(neureka.Tsr,java.lang.String) -> <init>
    103:148:neureka.devices.storage.IDXHead store(neureka.Tsr) -> store
    153:166:java.lang.Object _loadData() -> _loadData
    172:176:neureka.Tsr load() -> load
    181:184:int getDataSize() -> getDataSize
    189:189:int getTotalSize() -> getTotalSize
    194:194:java.lang.String extension() -> extension
    25:25:neureka.dtype.DataType getDataType() -> getDataType
    28:28:int getValueSize() -> getValueSize
    30:30:int[] getShape() -> getShape
    19:19:neureka.devices.Storage store(neureka.Tsr) -> store
    19:46:void <clinit>() -> <clinit>
neureka.devices.storage.JPEGHead -> neureka.devices.storage.JPEGHead:
    int _width -> a
    int _height -> b
    boolean $assertionsDisabled -> c
    31:37:void <init>(java.lang.String) -> <init>
    1052:1082:void _loadHead():52:82 -> <init>
    1052:1082:void <init>(java.lang.String):33 -> <init>
    40:47:void <init>(neureka.Tsr,java.lang.String) -> <init>
    86:88:neureka.Tsr load() -> load
    94:115:java.lang.Object _loadData() -> _loadData
    121:121:int getValueSize() -> getValueSize
    126:126:int getDataSize() -> getDataSize
    131:131:int getTotalSize() -> getTotalSize
    136:136:neureka.dtype.DataType getDataType() -> getDataType
    141:141:int[] getShape() -> getShape
    146:146:java.lang.String extension() -> extension
    152:166:neureka.devices.Storage store(neureka.Tsr) -> store
    107:108:void lambda$_loadData$0(short[],neureka.dtype.custom.UI8,byte[],int,int) -> a
    19:23:void <clinit>() -> <clinit>
neureka.devices.storage.NumberReader -> neureka.devices.storage.NumberReader:
    java.io.FileInputStream _fileInputStream -> a
    int _bytesRead -> b
    java.util.Map _byteMap -> c
    boolean $assertionsDisabled -> d
    12:22:void <init>(java.io.FileInputStream) -> <init>
    25:25:java.io.FileInputStream getStream() -> getStream
    29:31:java.lang.Object read(neureka.dtype.NumericType) -> read
    38:38:int bytesRead() -> bytesRead
    9:9:void <clinit>() -> <clinit>
neureka.dtype.AbstractNumericType -> neureka.dtype.AbstractNumericType:
    java.util.Map _NUMERIC_TYPE_RELATIONS -> a
    10:10:void <init>() -> <init>
    29:29:java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    35:39:void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    13:13:void <clinit>() -> <clinit>
neureka.dtype.AbstractNumericType$Conversion -> neureka.dtype.AbstractNumericType$Conversion:
    java.lang.Object go(java.lang.Object) -> go
neureka.dtype.DataType -> neureka.dtype.DataType:
    java.util.Map _instances -> a
    java.lang.Class _typeClass -> b
    58:70:java.lang.Class _trueType(java.lang.Class) -> a
    75:82:neureka.dtype.DataType of(java.lang.Class) -> of
    87:92:void forType(java.lang.Class,java.util.function.Consumer) -> forType
    96:98:void <init>(java.lang.Class) -> <init>
    102:116:java.lang.Object getTypeClassInstance() -> getTypeClassInstance
    120:120:boolean typeClassImplements(java.lang.Class) -> typeClassImplements
    127:141:java.lang.Object virtualize(java.lang.Object) -> virtualize
    146:173:java.lang.Object actualize(java.lang.Object,int) -> actualize
    178:189:java.lang.Object allocate(int) -> allocate
    52:52:boolean equals(java.lang.Object) -> equals
    52:52:int hashCode() -> hashCode
    51:51:java.lang.String toString() -> toString
    94:94:java.lang.Class getTypeClass() -> getTypeClass
    55:55:void <clinit>() -> <clinit>
neureka.dtype.NumericType -> neureka.dtype.NumericType:
    boolean signed() -> signed
    int numberOfBytes() -> numberOfBytes
    java.lang.Class targetType() -> targetType
    java.lang.Class targetArrayType() -> targetArrayType
    java.lang.Class holderType() -> holderType
    java.lang.Class holderArrayType() -> holderArrayType
    java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    java.lang.Object toTarget(java.lang.Object) -> toTarget
    byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
neureka.dtype.NumericType$Utility -> neureka.dtype.NumericType$Utility:
    106:106:void <init>() -> <init>
    110:113:int unsignedByteArrayToInt(byte[]) -> unsignedByteArrayToInt
    117:117:byte[] integerToByteArray(int) -> integerToByteArray
neureka.dtype.custom.F32 -> neureka.dtype.custom.F32:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Float foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    54:54:java.lang.Float toTarget(java.lang.Float) -> toTarget
    59:60:byte[] targetToForeignHolderBytes(java.lang.Float) -> targetToForeignHolderBytes
    70:70:float[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:77:float[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    83:83:float[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    88:88:float[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    94:107:java.lang.Float convertToHolder(java.lang.Object) -> convertToHolder
    112:112:float[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    117:117:java.lang.Float convertToTarget(java.lang.Object) -> convertToTarget
    122:122:float[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.F64 -> neureka.dtype.custom.F64:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Double foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Double toTarget(java.lang.Double) -> toTarget
    60:61:byte[] targetToForeignHolderBytes(java.lang.Double) -> targetToForeignHolderBytes
    75:75:double[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    80:82:double[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:double[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:94:double[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    99:112:java.lang.Double convertToHolder(java.lang.Object) -> convertToHolder
    117:117:double[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    122:122:java.lang.Double convertToTarget(java.lang.Object) -> convertToTarget
    127:127:double[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    131:137:double[] _readFrom(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I16 -> neureka.dtype.custom.I16:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Short toTarget(java.lang.Short) -> toTarget
    61:62:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    67:67:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    72:72:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    77:77:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    82:82:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    87:100:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    105:105:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    110:110:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    115:115:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    119:125:short[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I32 -> neureka.dtype.custom.I32:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Integer toTarget(java.lang.Integer) -> toTarget
    61:65:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:71:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    76:76:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    81:81:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    86:86:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    91:104:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    109:109:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    114:114:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    119:119:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    123:129:int[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I64 -> neureka.dtype.custom.I64:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    57:57:java.lang.Long toTarget(java.lang.Long) -> toTarget
    62:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:101:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    106:106:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    111:111:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    116:116:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I8 -> neureka.dtype.custom.I8:
    18:19:void <init>() -> <init>
    23:23:boolean signed() -> signed
    28:28:int numberOfBytes() -> numberOfBytes
    33:33:java.lang.Class targetType() -> targetType
    38:38:java.lang.Class targetArrayType() -> targetArrayType
    43:43:java.lang.Class holderType() -> holderType
    48:48:java.lang.Class holderArrayType() -> holderArrayType
    53:53:java.lang.Byte foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    58:58:java.lang.Byte toTarget(java.lang.Byte) -> toTarget
    63:63:byte[] targetToForeignHolderBytes(java.lang.Byte) -> targetToForeignHolderBytes
    68:70:byte[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:75:byte[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    80:82:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    87:87:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    92:105:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    110:110:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    115:115:java.lang.Byte convertToTarget(java.lang.Object) -> convertToTarget
    120:120:byte[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    15:15:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    15:15:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    15:15:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    15:15:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    15:15:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    15:15:java.lang.Object toTarget(java.lang.Object) -> toTarget
    15:15:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI16 -> neureka.dtype.custom.UI16:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:51:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    59:59:java.lang.Integer toTarget(java.lang.Short) -> toTarget
    64:66:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:77:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    82:82:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:92:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    97:97:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    102:102:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    107:107:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    112:112:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI32 -> neureka.dtype.custom.UI32:
    11:11:void <init>() -> <init>
    16:16:boolean signed() -> signed
    21:21:int numberOfBytes() -> numberOfBytes
    26:26:java.lang.Class targetType() -> targetType
    31:31:java.lang.Class targetArrayType() -> targetArrayType
    36:36:java.lang.Class holderType() -> holderType
    41:41:java.lang.Class holderArrayType() -> holderArrayType
    46:47:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Long toTarget(java.lang.Integer) -> toTarget
    60:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:88:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    93:93:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    98:98:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    103:103:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI64 -> neureka.dtype.custom.UI64:
    14:14:void <init>() -> <init>
    18:18:boolean signed() -> signed
    23:23:int numberOfBytes() -> numberOfBytes
    28:28:java.lang.Class targetType() -> targetType
    33:33:java.lang.Class targetArrayType() -> targetArrayType
    38:38:java.lang.Class holderType() -> holderType
    43:43:java.lang.Class holderArrayType() -> holderArrayType
    49:53:java.math.BigInteger foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    58:59:java.math.BigInteger toTarget(java.lang.Long) -> toTarget
    64:71:byte[] targetToForeignHolderBytes(java.math.BigInteger) -> targetToForeignHolderBytes
    76:76:java.math.BigInteger[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    81:81:java.math.BigInteger[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    86:86:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    91:91:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    96:96:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    101:101:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    106:106:java.math.BigInteger convertToTarget(java.lang.Object) -> convertToTarget
    111:111:java.math.BigInteger[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI8 -> neureka.dtype.custom.UI8:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Short toTarget(java.lang.Byte) -> toTarget
    61:61:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    66:72:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    77:77:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    82:88:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    93:93:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    98:98:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    103:103:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    108:121:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    126:126:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    10:10:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    10:10:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    10:10:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    10:10:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    10:10:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    10:10:java.lang.Object toTarget(java.lang.Object) -> toTarget
    10:10:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.framing.IndexAlias -> neureka.framing.IndexAlias:
    java.util.Map _mapping -> a
    13:23:void <init>(java.util.List) -> <init>
    25:28:void <init>(int) -> <init>
    30:43:void <init>(java.util.Map,neureka.Tsr) -> <init>
    46:46:int[] get(java.util.List) -> get
    50:61:int[] get(java.lang.Object[]) -> get
    66:68:int get(java.lang.Object,java.lang.Object) -> get
    73:76:void replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    79:85:void _initializeIdxmap(java.lang.Object,int,java.lang.Object,int) -> a
    89:92:void set(java.lang.Object,java.lang.Object,int) -> set
    96:100:java.util.List keysOf(java.lang.Object) -> keysOf
    104:108:java.util.List keysOf(java.lang.Object,int) -> keysOf
    112:120:java.lang.String _fixed(java.lang.String,int) -> a
    126:188:java.lang.String toString() -> toString
    195:195:void update(neureka.Tsr,neureka.Tsr) -> update
    8:8:void update(java.lang.Object,java.lang.Object) -> update
    159:174:void lambda$toString$6(java.lang.Object[],int[],java.lang.StringBuilder,int[],java.lang.Object,java.lang.Object) -> a
    162:163:void lambda$toString$5(int[],java.lang.Object[],java.lang.Object,java.lang.Integer) -> a
    141:147:void lambda$toString$4(int[],int[],java.lang.StringBuilder,java.lang.Object,java.lang.Object) -> a
    134:134:java.lang.Boolean lambda$toString$3(int,int,java.lang.Integer) -> a
    106:106:void lambda$keysOf$2(int,java.util.List,java.lang.Object,java.lang.Integer) -> a
    98:98:void lambda$keysOf$1(java.util.List,java.lang.Object,java.lang.Integer) -> a
    34:42:void lambda$new$0(neureka.Tsr,int[],java.lang.Object,java.util.List) -> a
neureka.framing.Relation -> neureka.framing.Relation:
    neureka.Tsr _parent -> a
    java.lang.ref.WeakReference[] _children -> b
    int[][] _shapeRelations -> c
    15:15:void <init>() -> <init>
    26:43:void update(neureka.Tsr,neureka.Tsr) -> update
    47:48:neureka.framing.Relation addParent(neureka.Tsr) -> addParent
    53:66:neureka.framing.Relation addChild(neureka.Tsr) -> addChild
    70:76:neureka.framing.Relation addReshapeRelationFor(neureka.Tsr,int[]) -> addReshapeRelationFor
    80:86:int[] getReshapeRelationFor(neureka.Tsr) -> getReshapeRelationFor
    90:100:neureka.framing.Relation foreachChild(java.util.function.Consumer) -> foreachChild
    104:107:neureka.Tsr findRootTensor() -> findRootTensor
    111:111:boolean hasParent() -> hasParent
    115:115:boolean hasChildren() -> hasChildren
    119:119:int childCount() -> childCount
    124:124:neureka.framing.Relation remove(neureka.Tsr) -> remove
    14:14:java.lang.String toString() -> toString
    17:17:neureka.Tsr getParent() -> getParent
    13:13:void update(java.lang.Object,java.lang.Object) -> update
neureka.ndim.AbstractComponentOwner -> neureka.ndim.AbstractComponentOwner:
    java.util.List _components -> _components
    55:61:void <init>() -> <init>
    75:80:java.lang.Object find(java.lang.Class) -> find
    92:100:java.lang.Object remove(java.lang.Class) -> remove
    111:111:boolean has(java.lang.Class) -> has
    126:137:java.lang.Object set(neureka.Component) -> set
    neureka.Component _setOrReject(neureka.Component) -> _setOrReject
    neureka.Component _removeOrReject(neureka.Component) -> _removeOrReject
    182:186:boolean forComponent(java.lang.Class,java.util.function.Consumer) -> forComponent
neureka.ndim.AbstractNDArray -> neureka.ndim.AbstractNDArray:
    org.slf4j.Logger _LOG -> _LOG
    neureka.ndim.config.NDConfiguration _NDConf -> _NDConf
    neureka.dtype.DataType _dataType -> a
    java.lang.Object _data -> b
    66:78:void <init>() -> <init>
    85:87:java.lang.Class getValueClass() -> getValueClass
    92:98:java.lang.Object setDataType(neureka.dtype.DataType) -> setDataType
    103:118:void _setData(java.lang.Object) -> _setData
    122:123:void _allocate(int) -> _allocate
    127:128:void _virtualize() -> _virtualize
    132:133:void _actualize() -> _actualize
    137:146:java.lang.Object _convertedDataOfType(java.lang.Class) -> _convertedDataOfType
    153:154:void forEach(java.util.function.Consumer) -> forEach
    159:159:java.util.Spliterator spliterator() -> spliterator
    java.lang.Object getValueAt(int) -> getValueAt
    188:189:boolean is(java.lang.Class) -> is
    193:193:boolean is64() -> is64
    197:197:boolean is32() -> is32
    203:203:int i_of_i(int) -> i_of_i
    207:207:int[] idx_of_i(int) -> idx_of_i
    211:211:int i_of_idx(int[]) -> i_of_idx
    218:219:java.lang.Object setNDConf(neureka.ndim.config.NDConfiguration) -> setNDConf
    226:226:int rank() -> rank
    230:230:java.util.List shape() -> shape
    234:234:int shape(int) -> shape
    238:238:java.util.List idxmap() -> idxmap
    242:242:java.util.List translation() -> translation
    246:246:java.util.List spread() -> spread
    250:250:java.util.List offset() -> offset
    254:254:int size() -> size
    258:260:java.util.List _asList(int[]) -> _asList
    74:74:neureka.ndim.config.NDConfiguration getNDConf() -> getNDConf
    77:77:neureka.dtype.DataType getDataType() -> getDataType
    80:80:java.lang.Object getData() -> getData
neureka.ndim.AbstractNDArray$1 -> neureka.ndim.AbstractNDArray$1:
    160:160:void <init>(neureka.ndim.AbstractNDArray) -> <init>
    163:163:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    168:168:java.util.Spliterator trySplit() -> trySplit
    173:173:long estimateSize() -> estimateSize
    178:178:int characteristics() -> characteristics
neureka.ndim.AbstractNDArray$Utility -> neureka.ndim.AbstractNDArray$Utility:
    271:271:void <init>() -> <init>
neureka.ndim.AbstractNDArray$Utility$Indexing -> neureka.ndim.AbstractNDArray$Utility$Indexing:
    308:308:void <init>() -> <init>
    312:317:int[] shpCheck(int[],neureka.Tsr) -> shpCheck
    322:343:int[][] makeFit(int[],int[]) -> makeFit
    348:350:int[] shpOfCon(int[],int[]) -> shpOfCon
    355:362:int[] shpOfBrc(int[],int[]) -> shpOfBrc
neureka.ndim.AbstractNDArray$Utility$Stringify -> neureka.ndim.AbstractNDArray$Utility$Stringify:
    273:273:void <init>() -> <init>
    277:292:java.lang.String formatFP(double) -> formatFP
    297:300:java.lang.String strConf(int[]) -> strConf
neureka.ndim.config.AbstractNDC -> neureka.ndim.config.AbstractNDC:
    java.util.Map _CACHED_NDCS -> a
    java.util.Map _CACHED_INT_ARRAYS -> b
    boolean $assertionsDisabled -> c
    11:11:void <init>() -> <init>
    34:57:int[] _cacheArray(int[]) -> _cacheArray
    67:74:int[] asInlineArray() -> asInlineArray
    83:87:long keyCode() -> keyCode
    93:97:boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    109:140:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    145:154:neureka.ndim.config.NDConfiguration _cached(neureka.ndim.config.NDConfiguration) -> _cached
    165:171:boolean _isSimpleConfiguration(int[],int[],int[],int[],int[]) -> a
    178:183:java.lang.String toString() -> toString
    188:201:neureka.ndim.config.NDConfiguration _simpleReshape(int[],neureka.ndim.config.NDConfiguration) -> _simpleReshape
    208:211:neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
    11:30:void <clinit>() -> <clinit>
neureka.ndim.config.NDConfiguration -> neureka.ndim.config.NDConfiguration:
    int rank() -> rank
    int[] shape() -> shape
    int shape(int) -> shape
    int[] idxmap() -> idxmap
    int idxmap(int) -> idxmap
    int[] translation() -> translation
    int translation(int) -> translation
    int[] spread() -> spread
    int spread(int) -> spread
    int[] offset() -> offset
    int offset(int) -> offset
    int i_of_i(int) -> i_of_i
    int[] idx_of_i(int) -> idx_of_i
    int i_of_idx(int[]) -> i_of_idx
    int[] asInlineArray() -> asInlineArray
    long keyCode() -> keyCode
    boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
neureka.ndim.config.NDConfiguration$Utility -> neureka.ndim.config.NDConfiguration$Utility:
    89:89:void <init>() -> <init>
    93:99:int[] rearrange(int[],int[],int[]) -> rearrange
    104:109:int[] rearrange(int[],int[]) -> rearrange
    114:127:int[] newTlnOf(int[]) -> newTlnOf
    133:136:void increment(int[],int[]) -> increment
    1140:1161:int _incrementAt(int,int[],int[]):140:161 -> increment
    1140:1161:void increment(int[],int[]):135 -> increment
    167:169:int szeOfShp(int[]) -> szeOfShp
neureka.ndim.config.types.D1C -> neureka.ndim.config.types.D1C:
    5:5:void <init>() -> <init>
    int i_of_idx(int) -> i_of_idx
neureka.ndim.config.types.D2C -> neureka.ndim.config.types.D2C:
    5:5:void <init>() -> <init>
    int i_of_idx(int,int) -> i_of_idx
neureka.ndim.config.types.D3C -> neureka.ndim.config.types.D3C:
    5:5:void <init>() -> <init>
    int i_of_idx(int,int,int) -> i_of_idx
neureka.ndim.config.types.complex.ComplexD1Configuration -> neureka.ndim.config.types.complex.ComplexD1Configuration:
    int _shape -> _shape
    int _translation -> a
    int _idxmap -> b
    int _spread -> c
    int _offset -> d
    boolean $assertionsDisabled -> e
    39:39:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    48:57:void <init>(int,int,int,int,int) -> <init>
    61:61:int rank() -> rank
    66:66:int[] shape() -> shape
    71:71:int shape(int) -> shape
    76:76:int[] idxmap() -> idxmap
    81:81:int idxmap(int) -> idxmap
    86:86:int[] translation() -> translation
    91:91:int translation(int) -> translation
    96:96:int[] spread() -> spread
    101:101:int spread(int) -> spread
    106:106:int[] offset() -> offset
    111:111:int offset(int) -> offset
    117:117:int i_of_i(int) -> i_of_i
    122:122:int[] idx_of_i(int) -> idx_of_i
    126:126:int i_of_idx(int[]) -> i_of_idx
    132:132:int i_of_idx(int) -> i_of_idx
    6:6:void <clinit>() -> <clinit>
neureka.ndim.config.types.complex.ComplexD2Configuration -> neureka.ndim.config.types.complex.ComplexD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    int _idxmap1 -> c
    int _idxmap2 -> d
    int _spread1 -> e
    int _spread2 -> f
    int _offset1 -> g
    int _offset2 -> h
    44:55:void <init>(int[],int[],int[],int[],int[]) -> <init>
    64:64:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    69:69:int rank() -> rank
    74:74:int[] shape() -> shape
    79:79:int shape(int) -> shape
    84:84:int[] idxmap() -> idxmap
    89:89:int idxmap(int) -> idxmap
    94:94:int[] translation() -> translation
    99:99:int translation(int) -> translation
    104:104:int[] spread() -> spread
    109:109:int spread(int) -> spread
    114:114:int[] offset() -> offset
    119:119:int offset(int) -> offset
    127:131:int i_of_i(int) -> i_of_i
    138:148:int[] idx_of_i(int) -> idx_of_i
    153:156:int i_of_idx(int[]) -> i_of_idx
    161:164:int i_of_idx(int,int) -> i_of_idx
neureka.ndim.config.types.complex.ComplexD3Configuration -> neureka.ndim.config.types.complex.ComplexD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    int _idxmap1 -> d
    int _idxmap2 -> e
    int _idxmap3 -> f
    int _spread1 -> g
    int _spread2 -> h
    int _spread3 -> i
    int _offset1 -> j
    int _offset2 -> k
    int _offset3 -> l
    49:65:void <init>(int[],int[],int[],int[],int[]) -> <init>
    74:74:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    79:79:int rank() -> rank
    84:84:int[] shape() -> shape
    89:89:int shape(int) -> shape
    94:94:int[] idxmap() -> idxmap
    99:99:int idxmap(int) -> idxmap
    104:104:int[] translation() -> translation
    109:109:int translation(int) -> translation
    114:114:int[] spread() -> spread
    119:119:int spread(int) -> spread
    124:124:int[] offset() -> offset
    129:129:int offset(int) -> offset
    138:151:int i_of_i(int) -> i_of_i
    159:172:int[] idx_of_i(int) -> idx_of_i
    177:177:int i_of_idx(int[]) -> i_of_idx
    184:184:int i_of_idx(int,int,int) -> i_of_idx
neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration -> neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation -> a
    int[] _idxmap -> b
    int[] _spread -> c
    int[] _offset -> d
    44:50:void <init>(int[],int[],int[],int[],int[]) -> <init>
    59:59:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    64:64:int rank() -> rank
    69:69:int[] shape() -> shape
    74:74:int shape(int) -> shape
    79:79:int[] idxmap() -> idxmap
    84:84:int idxmap(int) -> idxmap
    89:89:int[] translation() -> translation
    94:94:int translation(int) -> translation
    99:99:int[] spread() -> spread
    104:104:int spread(int) -> spread
    109:109:int[] offset() -> offset
    114:114:int offset(int) -> offset
    122:122:int i_of_i(int) -> i_of_i
    127:139:int[] idx_of_i(int) -> idx_of_i
    144:146:int i_of_idx(int[]) -> i_of_idx
neureka.ndim.config.types.complex.ComplexScalarConfiguration -> neureka.ndim.config.types.complex.ComplexScalarConfiguration:
    int _shape -> _shape
    int _offset -> a
    25:25:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    31:34:void <init>(int,int) -> <init>
    38:38:int rank() -> rank
    43:43:int[] shape() -> shape
    48:48:int shape(int) -> shape
    53:53:int[] idxmap() -> idxmap
    58:58:int idxmap(int) -> idxmap
    63:63:int[] translation() -> translation
    68:68:int translation(int) -> translation
    73:73:int[] spread() -> spread
    78:78:int spread(int) -> spread
    83:83:int[] offset() -> offset
    88:88:int offset(int) -> offset
    94:94:int i_of_i(int) -> i_of_i
    99:99:int[] idx_of_i(int) -> idx_of_i
    104:104:int i_of_idx(int[]) -> i_of_idx
neureka.ndim.config.types.simple.SimpleD1Configuration -> neureka.ndim.config.types.simple.SimpleD1Configuration:
    int _shape -> _shape
    int _translation_and_idxmap -> a
    23:23:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    29:32:void <init>(int,int) -> <init>
    36:36:int rank() -> rank
    41:41:int[] shape() -> shape
    46:46:int shape(int) -> shape
    51:51:int[] idxmap() -> idxmap
    56:56:int idxmap(int) -> idxmap
    61:61:int[] translation() -> translation
    66:66:int translation(int) -> translation
    71:71:int[] spread() -> spread
    76:76:int spread(int) -> spread
    81:81:int[] offset() -> offset
    86:86:int offset(int) -> offset
    92:92:int i_of_i(int) -> i_of_i
    97:97:int[] idx_of_i(int) -> idx_of_i
    102:102:int i_of_idx(int[]) -> i_of_idx
    107:107:int i_of_idx(int) -> i_of_idx
neureka.ndim.config.types.simple.SimpleD2Configuration -> neureka.ndim.config.types.simple.SimpleD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    25:30:void <init>(int[],int[]) -> <init>
    36:36:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    42:42:int rank() -> rank
    47:47:int[] shape() -> shape
    52:52:int shape(int) -> shape
    57:57:int[] idxmap() -> idxmap
    62:62:int idxmap(int) -> idxmap
    67:67:int[] translation() -> translation
    72:72:int translation(int) -> translation
    77:77:int[] spread() -> spread
    82:82:int spread(int) -> spread
    87:87:int[] offset() -> offset
    92:92:int offset(int) -> offset
    100:104:int i_of_i(int) -> i_of_i
    111:121:int[] idx_of_i(int) -> idx_of_i
    126:129:int i_of_idx(int[]) -> i_of_idx
    134:137:int i_of_idx(int,int) -> i_of_idx
neureka.ndim.config.types.simple.SimpleD3Configuration -> neureka.ndim.config.types.simple.SimpleD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    26:33:void <init>(int[],int[]) -> <init>
    39:39:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    44:44:int rank() -> rank
    49:49:int[] shape() -> shape
    54:54:int shape(int) -> shape
    59:59:int[] idxmap() -> idxmap
    64:64:int idxmap(int) -> idxmap
    69:69:int[] translation() -> translation
    74:74:int translation(int) -> translation
    79:79:int[] spread() -> spread
    84:84:int spread(int) -> spread
    89:89:int[] offset() -> offset
    94:94:int offset(int) -> offset
    103:116:int i_of_i(int) -> i_of_i
    124:137:int[] idx_of_i(int) -> idx_of_i
    142:142:int i_of_idx(int[]) -> i_of_idx
    149:149:int i_of_idx(int,int,int) -> i_of_idx
neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration -> neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation_and_idxmap -> a
    24:27:void <init>(int[],int[]) -> <init>
    33:33:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    38:38:int rank() -> rank
    43:43:int[] shape() -> shape
    48:48:int shape(int) -> shape
    53:53:int[] idxmap() -> idxmap
    58:58:int idxmap(int) -> idxmap
    63:63:int[] translation() -> translation
    68:68:int translation(int) -> translation
    73:75:int[] spread() -> spread
    80:80:int spread(int) -> spread
    85:85:int[] offset() -> offset
    90:90:int offset(int) -> offset
    98:98:int i_of_i(int) -> i_of_i
    103:115:int[] idx_of_i(int) -> idx_of_i
    120:122:int i_of_idx(int[]) -> i_of_idx
neureka.ndim.config.types.simple.SimpleScalarConfiguration -> neureka.ndim.config.types.simple.SimpleScalarConfiguration:
    9:9:neureka.ndim.config.NDConfiguration construct() -> construct
    12:12:void <init>() -> <init>
    16:16:int rank() -> rank
    21:21:int[] shape() -> shape
    26:26:int shape(int) -> shape
    31:31:int[] idxmap() -> idxmap
    36:36:int idxmap(int) -> idxmap
    41:41:int[] translation() -> translation
    46:46:int translation(int) -> translation
    51:51:int[] spread() -> spread
    56:56:int spread(int) -> spread
    61:61:int[] offset() -> offset
    66:66:int offset(int) -> offset
    71:71:int i_of_i(int) -> i_of_i
    76:76:int[] idx_of_i(int) -> idx_of_i
    81:81:int i_of_idx(int[]) -> i_of_idx
neureka.ndim.config.types.views.SimpleReshapeView -> neureka.ndim.config.types.views.SimpleReshapeView:
    neureka.ndim.config.NDConfiguration _toBeViewed -> a
    int[] _form -> b
    int[] _formTranslator -> c
    int[] _shape -> d
    int[] _translation -> e
    int[] _idxmap -> f
    int[] _spread -> g
    int[] _offset -> h
    24:45:void <init>(int[],neureka.ndim.config.NDConfiguration) -> <init>
    49:49:int rank() -> rank
    54:54:int[] shape() -> shape
    59:59:int shape(int) -> shape
    64:64:int[] idxmap() -> idxmap
    69:69:int idxmap(int) -> idxmap
    74:74:int[] translation() -> translation
    79:79:int translation(int) -> translation
    84:84:int[] spread() -> spread
    89:89:int spread(int) -> spread
    94:94:int[] offset() -> offset
    99:99:int offset(int) -> offset
    103:103:int i_of_i(int) -> i_of_i
    108:120:int[] idx_of_i(int) -> idx_of_i
    125:126:int i_of_idx(int[]) -> i_of_idx
    1131:1134:int[] _rearrange(int[],int[],int[]):131:134 -> i_of_idx
    1131:1134:int i_of_idx(int[]):125 -> i_of_idx
    36:36:int lambda$new$0(java.lang.Integer) -> a
neureka.ndim.config.types.virtual.VirtualNDConfiguration -> neureka.ndim.config.types.virtual.VirtualNDConfiguration:
    java.util.Map _Virtual_Cache -> a
    int[] _shape -> b
    16:18:void <init>(int[]) -> <init>
    23:30:neureka.ndim.config.NDConfiguration construct(int[]) -> construct
    35:35:int rank() -> rank
    40:40:int[] shape() -> shape
    45:45:int shape(int) -> shape
    50:50:int[] idxmap() -> idxmap
    55:55:int idxmap(int) -> idxmap
    60:60:int[] translation() -> translation
    65:65:int translation(int) -> translation
    70:70:int[] spread() -> spread
    75:75:int spread(int) -> spread
    80:80:int[] offset() -> offset
    85:85:int offset(int) -> offset
    90:90:int i_of_i(int) -> i_of_i
    95:95:int[] idx_of_i(int) -> idx_of_i
    100:100:int i_of_idx(int[]) -> i_of_idx
    12:12:void <clinit>() -> <clinit>
neureka.ndim.iterators.NDIterator -> neureka.ndim.iterators.NDIterator:
    68:88:neureka.ndim.iterators.NDIterator of(neureka.Tsr) -> of
    int shape(int) -> shape
    int[] shape() -> shape
    void increment() -> increment
    void decrement() -> decrement
    int i() -> i
    int get(int) -> get
    int[] get() -> get
    void set(int,int) -> set
    void set(int[]) -> set
    int rank() -> rank
    114:125:java.lang.String asString() -> asString
    123:123:void lambda$asString$1(java.util.StringJoiner,int) -> a
    118:118:void lambda$asString$0(java.util.StringJoiner,int) -> b
neureka.ndim.iterators.types.DefaultNDIterator -> neureka.ndim.iterators.types.DefaultNDIterator:
    int[] _idx -> a
    int[] _shape -> b
    neureka.ndim.config.NDConfiguration _conf -> c
    12:16:void <init>(neureka.ndim.config.NDConfiguration) -> <init>
    20:20:int shape(int) -> shape
    25:25:int[] shape() -> shape
    30:31:void increment() -> increment
    36:36:void decrement() -> decrement
    40:40:int i() -> i
    45:45:int get(int) -> get
    50:50:int[] get() -> get
    55:56:void set(int,int) -> set
    60:61:void set(int[]) -> set
    65:65:int rank() -> rank
neureka.ndim.iterators.types.VirtualNDIterator -> neureka.ndim.iterators.types.VirtualNDIterator:
    neureka.ndim.config.types.virtual.VirtualNDConfiguration _conf -> a
    10:12:void <init>(neureka.ndim.config.types.virtual.VirtualNDConfiguration) -> <init>
    16:16:int shape(int) -> shape
    21:21:int[] shape() -> shape
    27:27:void increment() -> increment
    32:32:void decrement() -> decrement
    36:36:int i() -> i
    41:41:int get(int) -> get
    46:46:int[] get() -> get
    52:52:void set(int,int) -> set
    57:57:void set(int[]) -> set
    61:61:int rank() -> rank
neureka.ndim.iterators.types.complex.ComplexD1CIterator -> neureka.ndim.iterators.types.complex.ComplexD1CIterator:
    int _d1 -> a
    11:12:void <init>(neureka.ndim.config.types.complex.ComplexD1Configuration) -> <init>
    16:17:void increment() -> increment
    21:22:void decrement() -> decrement
    27:27:int i() -> i
    32:32:int get(int) -> get
    37:37:int[] get() -> get
    42:43:void set(int,int) -> set
    47:48:void set(int[]) -> set
    52:52:int rank() -> rank
neureka.ndim.iterators.types.complex.legacy.ComplexLegacyD2CIterator -> neureka.ndim.iterators.types.complex.legacy.ComplexLegacyD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.complex.ComplexD2Configuration) -> <init>
    17:22:void increment() -> increment
    26:30:void decrement() -> decrement
    34:34:int i() -> i
    39:39:int get(int) -> get
    44:44:int[] get() -> get
    49:51:void set(int,int) -> set
    55:57:void set(int[]) -> set
neureka.ndim.iterators.types.complex.legacy.ComplexLegacyD3CIterator -> neureka.ndim.iterators.types.complex.legacy.ComplexLegacyD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.complex.ComplexD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.ndim.iterators.types.complex.main.ComplexD2CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.complex.ComplexD2Configuration) -> <init>
    18:23:void increment() -> increment
    27:31:void decrement() -> decrement
    35:35:int i() -> i
    40:40:int get(int) -> get
    45:45:int[] get() -> get
    50:52:void set(int,int) -> set
    56:58:void set(int[]) -> set
neureka.ndim.iterators.types.complex.main.ComplexD3CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.complex.ComplexD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.ndim.iterators.types.simple.SimpleD1CIterator -> neureka.ndim.iterators.types.simple.SimpleD1CIterator:
    int _d1 -> a
    12:13:void <init>(neureka.ndim.config.types.simple.SimpleD1Configuration) -> <init>
    18:19:void increment() -> increment
    23:24:void decrement() -> decrement
    29:29:int i() -> i
    34:34:int get(int) -> get
    39:39:int[] get() -> get
    44:45:void set(int,int) -> set
    49:50:void set(int[]) -> set
    54:54:int rank() -> rank
neureka.ndim.iterators.types.simple.legacy.SimpleLegacyD2CIterator -> neureka.ndim.iterators.types.simple.legacy.SimpleLegacyD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.simple.SimpleD2Configuration) -> <init>
    17:22:void increment() -> increment
    26:30:void decrement() -> decrement
    34:34:int i() -> i
    39:39:int get(int) -> get
    44:44:int[] get() -> get
    49:51:void set(int,int) -> set
    55:57:void set(int[]) -> set
neureka.ndim.iterators.types.simple.legacy.SimpleLegacyD3CIterator -> neureka.ndim.iterators.types.simple.legacy.SimpleLegacyD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.simple.SimpleD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.ndim.iterators.types.simple.main.SimpleD2CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.simple.SimpleD2Configuration) -> <init>
    17:22:void increment() -> increment
    26:30:void decrement() -> decrement
    34:34:int i() -> i
    39:39:int get(int) -> get
    44:44:int[] get() -> get
    49:51:void set(int,int) -> set
    55:57:void set(int[]) -> set
neureka.ndim.iterators.types.simple.main.SimpleD3CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.simple.SimpleD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.optimization.Optimizer -> neureka.optimization.Optimizer:
    void optimize(neureka.Tsr) -> optimize
neureka.optimization.implementations.ADAM -> neureka.optimization.implementations.ADAM:
    neureka.Tsr a -> a
    neureka.Tsr b1 -> b
    neureka.Tsr b2 -> c
    neureka.Tsr e -> d
    neureka.Tsr m -> e
    neureka.Tsr v -> f
    74:75:void optimize(neureka.Tsr) -> optimize
    1063:1070:void _optimize(neureka.Tsr):63:70 -> optimize
    1063:1070:void optimize(neureka.Tsr):74 -> optimize
    80:80:void update(neureka.Tsr,neureka.Tsr) -> update
    42:42:void update(java.lang.Object,java.lang.Object) -> update
neureka.optimization.implementations.SGD -> neureka.optimization.implementations.SGD:
    double _learningRate -> a
    neureka.calculus.Function _function -> b
    48:51:void <init>(double) -> <init>
    55:57:void optimize(neureka.Tsr) -> optimize
    60:60:double learningRate() -> learningRate
    66:66:void update(neureka.Tsr,neureka.Tsr) -> update
    42:42:void update(java.lang.Object,java.lang.Object) -> update
neureka.optimization.implementations.Template -> neureka.optimization.implementations.Template:
    5:5:void <init>() -> <init>
neureka.utility.DataConverter -> neureka.utility.DataConverter:
    java.util.Map _converters -> a
    neureka.utility.DataConverter _instance -> b
    89:89:neureka.utility.DataConverter instance() -> instance
    98:147:void <init>() -> <init>
    163:174:void _set(java.lang.Class,java.lang.Class,neureka.utility.DataConverter$Conversion) -> a
    187:189:java.lang.Object convert(java.lang.Object,java.lang.Class) -> convert
    143:143:long[] lambda$new$5(java.util.List) -> a
    143:143:long lambda$new$4(java.lang.Object) -> a
    142:142:double[] lambda$new$3(java.util.List) -> b
    142:142:double lambda$new$2(java.lang.Object) -> b
    141:141:int[] lambda$new$1(java.util.List) -> c
    141:141:int lambda$new$0(java.lang.Object) -> c
    75:81:void <clinit>() -> <clinit>
neureka.utility.DataConverter$Conversion -> neureka.utility.DataConverter$a:
    java.lang.Object go(java.lang.Object) -> go
neureka.utility.DataConverter$Utility -> neureka.utility.DataConverter$Utility:
    198:198:void <init>() -> <init>
    202:202:double[] newSeededDoubleArray(java.lang.String,int) -> newSeededDoubleArray
    206:206:double[] newSeededDoubleArray(long,int) -> newSeededDoubleArray
    210:210:double[] seededDoubleArray(double[],java.lang.String) -> seededDoubleArray
    214:217:double[] seededDoubleArray(double[],long) -> seededDoubleArray
    221:221:float[] newSeededFloatArray(java.lang.String,int) -> newSeededFloatArray
    225:225:float[] newSeededFloatArray(long,int) -> newSeededFloatArray
    229:229:float[] seededFloatArray(float[],java.lang.String) -> seededFloatArray
    233:236:float[] seededFloatArray(float[],long) -> seededFloatArray
    241:244:long _longStringHash(java.lang.String) -> a
    249:252:short[] byteToShort(byte[]) -> byteToShort
    256:259:java.math.BigInteger[] byteToBigInteger(byte[]) -> byteToBigInteger
    263:266:float[] doubleToFloat(double[]) -> doubleToFloat
    270:273:byte[] doubleToByte(double[]) -> doubleToByte
    277:280:short[] doubleToShort(double[]) -> doubleToShort
    284:287:long[] doubleToLong(double[]) -> doubleToLong
    291:294:double[] floatToDouble(float[]) -> floatToDouble
    298:301:byte[] floatToByte(float[]) -> floatToByte
    305:308:short[] floatToShort(float[]) -> floatToShort
    312:315:long[] floatToLong(float[]) -> floatToLong
    319:322:double[] shortToDouble(short[]) -> shortToDouble
    326:329:double[] byteToDouble(byte[]) -> byteToDouble
    333:336:float[] byteToFloat(byte[]) -> byteToFloat
    340:343:float[] shortToFloat(short[]) -> shortToFloat
    347:350:int[] byteToInt(byte[]) -> byteToInt
    354:357:int[] shortToInt(short[]) -> shortToInt
    361:364:byte[] shortToByte(short[]) -> shortToByte
    368:371:long[] byteToLong(byte[]) -> byteToLong
    375:378:long[] shortToLong(short[]) -> shortToLong
    382:385:java.math.BigInteger[] shortToBigInteger(short[]) -> shortToBigInteger
    389:392:float[] intToFloat(int[]) -> intToFloat
    396:399:int[] floatToInt(float[]) -> floatToInt
    403:406:java.math.BigInteger[] floatToBigInteger(float[]) -> floatToBigInteger
    410:413:int[] doubleToInt(double[]) -> doubleToInt
    417:420:java.math.BigInteger[] doubleToBigInteger(double[]) -> doubleToBigInteger
    424:427:double[] intToDouble(int[]) -> intToDouble
    431:434:long[] intToLong(int[]) -> intToLong
    438:441:short[] intToShort(int[]) -> intToShort
    445:448:byte[] intToByte(int[]) -> intToByte
    452:455:java.math.BigInteger[] intToBigInteger(int[]) -> intToBigInteger
    459:462:byte[] longToByte(long[]) -> longToByte
    466:469:short[] longToShort(long[]) -> longToShort
    473:476:int[] longToInt(long[]) -> longToInt
    480:483:float[] longToFloat(long[]) -> longToFloat
    487:490:double[] longToDouble(long[]) -> longToDouble
    494:497:java.math.BigInteger[] longToBigInteger(long[]) -> longToBigInteger
neureka.utility.SettingsLoader -> neureka.utility.SettingsLoader:
    java.lang.String _settings_source -> a
    java.lang.String _setup_source -> b
    55:55:void <init>() -> <init>
    61:62:java.lang.Object tryGroovyClosureOn(java.lang.Object,java.lang.Object) -> tryGroovyClosureOn
    67:86:void tryGroovyScriptsOn(neureka.Neureka) -> tryGroovyScriptsOn
