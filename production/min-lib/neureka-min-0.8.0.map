neureka.Neureka -> neureka.Neureka:
    java.lang.ThreadLocal _INSTANCES -> a
    org.slf4j.Logger log -> b
    java.lang.String _VERSION -> c
    boolean _OPENCL_AVAILABLE -> d
    neureka.Neureka$Settings _settings -> e
    neureka.Neureka$Utility _utility -> f
    neureka.backend.api.OperationContext _context -> g
    boolean $assertionsDisabled -> h
    102:121:neureka.backend.api.OperationContext context() -> context
    124:127:void <init>() -> <init>
    138:146:neureka.Neureka get() -> get
    160:161:void set(neureka.Neureka) -> set
    164:166:neureka.Neureka configure(java.lang.Object) -> configure
    172:172:boolean canAccessOpenCL() -> canAccessOpenCL
    177:177:neureka.Neureka$Settings settings() -> settings
    180:181:neureka.Neureka$Settings settings(java.lang.Object) -> settings
    187:187:neureka.Neureka$Utility utility() -> utility
    192:192:java.lang.String version() -> version
    201:212:void reset() -> reset
    219:219:java.lang.String toString() -> toString
    227:227:neureka.backend.api.OperationContext getContext() -> getContext
    231:232:void setContext(neureka.backend.api.OperationContext) -> setContext
    67:67:boolean access$200(neureka.Neureka) -> a
    1215:1215:boolean _currentThreadIsNotAuthorized():215:215 -> a
    1215:1215:boolean access$200(neureka.Neureka):67 -> a
    67:86:void <clinit>() -> <clinit>
neureka.Neureka$Settings -> neureka.Neureka$Settings:
    neureka.Neureka$Settings$Debug _debug -> b
    neureka.Neureka$Settings$AutoGrad _autograd -> c
    neureka.Neureka$Settings$Indexing _indexing -> d
    neureka.Neureka$Settings$View _view -> e
    neureka.Neureka$Settings$NDim _ndim -> f
    neureka.Neureka$Settings$DType _dtype -> g
    boolean _isLocked -> h
    neureka.Neureka this$0 -> a
    246:255:void <init>(neureka.Neureka) -> <init>
    257:257:neureka.Neureka$Settings$Debug debug() -> debug
    260:261:neureka.Neureka$Settings$Debug debug(java.lang.Object) -> debug
    264:264:neureka.Neureka$Settings$AutoGrad autograd() -> autograd
    267:268:neureka.Neureka$Settings$AutoGrad autograd(java.lang.Object) -> autograd
    271:271:neureka.Neureka$Settings$Indexing indexing() -> indexing
    274:275:neureka.Neureka$Settings$Indexing indexing(java.lang.Object) -> indexing
    278:278:neureka.Neureka$Settings$View view() -> view
    281:282:neureka.Neureka$Settings$View view(java.lang.Object) -> view
    285:285:neureka.Neureka$Settings$NDim ndim() -> ndim
    288:289:neureka.Neureka$Settings$NDim ndim(java.lang.Object) -> ndim
    292:292:neureka.Neureka$Settings$DType dtype() -> dtype
    295:296:neureka.Neureka$Settings$DType dtype(java.lang.Object) -> dtype
    299:299:boolean isLocked() -> isLocked
    301:301:void setIsLocked(boolean) -> setIsLocked
    304:311:java.lang.String toString() -> toString
    237:237:void <init>(neureka.Neureka,byte) -> <init>
    237:237:boolean access$100(neureka.Neureka$Settings) -> a
neureka.Neureka$Settings$AutoGrad -> neureka.Neureka$Settings$AutoGrad:
    boolean _isPreventingInlineOperations -> a
    boolean _isRetainingPendingErrorForJITProp -> b
    boolean _isApplyingGradientWhenTensorIsUsed -> c
    boolean _isApplyingGradientWhenRequested -> d
    neureka.Neureka$Settings this$1 -> e
    365:370:void <init>(neureka.Neureka$Settings) -> <init>
    377:377:boolean isPreventingInlineOperations() -> isPreventingInlineOperations
    385:387:void setIsPreventingInlineOperations(boolean) -> setIsPreventingInlineOperations
    399:399:boolean isRetainingPendingErrorForJITProp() -> isRetainingPendingErrorForJITProp
    412:414:void setIsRetainingPendingErrorForJITProp(boolean) -> setIsRetainingPendingErrorForJITProp
    421:421:boolean isApplyingGradientWhenTensorIsUsed() -> isApplyingGradientWhenTensorIsUsed
    429:431:void setIsApplyingGradientWhenTensorIsUsed(boolean) -> setIsApplyingGradientWhenTensorIsUsed
    453:453:boolean isApplyingGradientWhenRequested() -> isApplyingGradientWhenRequested
    464:466:void setIsApplyingGradientWhenRequested(boolean) -> setIsApplyingGradientWhenRequested
    469:473:java.lang.String toString() -> toString
neureka.Neureka$Settings$DType -> neureka.Neureka$Settings$DType:
    java.lang.Class _defaultDataTypeClass -> a
    boolean _isAutoConvertingExternalDataToJVMTypes -> b
    neureka.Neureka$Settings this$1 -> c
    564:568:void <init>(neureka.Neureka$Settings) -> <init>
    570:570:java.lang.Class getDefaultDataTypeClass() -> getDefaultDataTypeClass
    573:575:void setDefaultDataTypeClass(java.lang.Class) -> setDefaultDataTypeClass
    577:577:boolean getIsAutoConvertingExternalDataToJVMTypes() -> getIsAutoConvertingExternalDataToJVMTypes
    580:582:void setIsAutoConvertingExternalDataToJVMTypes(boolean) -> setIsAutoConvertingExternalDataToJVMTypes
    585:586:java.lang.String toString() -> toString
neureka.Neureka$Settings$Debug -> neureka.Neureka$Settings$Debug:
    boolean _isKeepingDerivativeTargetPayloads -> a
    neureka.Neureka$Settings this$1 -> b
    316:318:void <init>(neureka.Neureka$Settings) -> <init>
    335:335:boolean isKeepingDerivativeTargetPayloads() -> isKeepingDerivativeTargetPayloads
    353:355:void setIsKeepingDerivativeTargetPayloads(boolean) -> setIsKeepingDerivativeTargetPayloads
    358:359:java.lang.String toString() -> toString
neureka.Neureka$Settings$Indexing -> neureka.Neureka$Settings$Indexing:
    boolean _isUsingArrayBasedIndexing -> a
    neureka.Neureka$Settings this$1 -> b
    479:481:void <init>(neureka.Neureka$Settings) -> <init>
    483:483:boolean isUsingArrayBasedIndexing() -> isUsingArrayBasedIndexing
    486:488:void setIsUsingArrayBasedIndexing(boolean) -> setIsUsingArrayBasedIndexing
    491:492:java.lang.String toString() -> toString
neureka.Neureka$Settings$NDim -> neureka.Neureka$Settings$NDim:
    boolean _isOnlyUsingDefaultNDConfiguration -> a
    neureka.Neureka$Settings this$1 -> b
    540:547:void <init>(neureka.Neureka$Settings) -> <init>
    549:549:boolean isOnlyUsingDefaultNDConfiguration() -> isOnlyUsingDefaultNDConfiguration
    552:554:void setIsOnlyUsingDefaultNDConfiguration(boolean) -> setIsOnlyUsingDefaultNDConfiguration
    557:558:java.lang.String toString() -> toString
neureka.Neureka$Settings$View -> neureka.Neureka$Settings$View:
    boolean _isUsingLegacyView -> a
    java.util.Map _asString -> b
    neureka.Neureka$Settings this$1 -> c
    500:516:void <init>(neureka.Neureka$Settings) -> <init>
    518:518:boolean isUsingLegacyView() -> isUsingLegacyView
    521:523:void setIsUsingLegacyView(boolean) -> setIsUsingLegacyView
    525:525:java.util.Map getAsString() -> getAsString
    527:527:void setAsString(java.util.Map) -> setAsString
    529:529:void setAsString(java.lang.String) -> setAsString
    532:534:java.lang.String toString() -> toString
neureka.Neureka$Utility -> neureka.Neureka$Utility:
    594:594:void <init>() -> <init>
    605:618:java.lang.String readResource(java.lang.String) -> readResource
    629:645:boolean isPresent(java.lang.String) -> isPresent
neureka.Tsr -> neureka.Tsr:
    neureka.devices.Device _CPU -> a
    int _flags -> b
    int _version -> c
    boolean $assertionsDisabled -> d
    201:201:neureka.Tsr newInstance() -> newInstance
    156:211:void <init>() -> <init>
    220:220:neureka.Tsr of(java.lang.Object[]) -> of
    224:304:neureka.Tsr _of(java.lang.Object[]) -> a
    324:324:neureka.Tsr of(java.util.List,java.lang.Object) -> of
    337:339:neureka.Tsr of(java.util.List,java.lang.String) -> of
    343:345:neureka.Tsr of(java.util.List,java.util.List) -> of
    351:352:neureka.Tsr of(int[],java.util.List) -> of
    366:387:neureka.Tsr of(java.util.List) -> of
    392:392:neureka.Tsr ofShape(java.util.List) -> ofShape
    397:398:neureka.Tsr ofShape(java.lang.Number[]) -> ofShape
    156:406:void <init>(java.util.List) -> <init>
    414:414:neureka.utility.fluent.states.WithShapeOrScalarOrVector of(java.lang.Class) -> of
    416:416:neureka.utility.fluent.states.WithShapeOrScalarOrVector ofDoubles() -> ofDoubles
    418:418:neureka.utility.fluent.states.WithShapeOrScalarOrVector ofFloats() -> ofFloats
    420:420:neureka.utility.fluent.states.WithShapeOrScalarOrVector ofInts() -> ofInts
    422:422:neureka.Tsr of(double) -> of
    156:424:void <init>(double) -> <init>
    426:426:neureka.Tsr of(float[]) -> of
    156:428:void <init>(float[]) -> <init>
    430:430:neureka.Tsr of(int[],java.lang.String) -> of
    156:439:void <init>(int[],java.lang.String) -> <init>
    441:441:neureka.Tsr ofShape(int[]) -> ofShape
    156:443:void <init>(int[]) -> <init>
    445:445:neureka.Tsr of(int[],double) -> of
    156:447:void <init>(int[],double) -> <init>
    449:449:neureka.Tsr of(int[],double[]) -> of
    156:451:void <init>(int[],double[]) -> <init>
    453:453:neureka.Tsr of(neureka.dtype.DataType,int[]) -> of
    156:460:void <init>(int[],neureka.dtype.DataType) -> <init>
    462:462:neureka.Tsr of(java.lang.Class,int[],java.lang.Object) -> of
    464:464:neureka.Tsr of(java.lang.Class,java.util.List,java.lang.Object) -> of
    156:471:void <init>(int[],java.lang.Class,java.lang.Object) -> <init>
    474:476:neureka.Tsr of(java.lang.Class,java.util.List,java.util.List) -> of
    494:494:neureka.Tsr of(neureka.dtype.DataType,int[],java.lang.Object) -> of
    156:496:void <init>(int[],neureka.dtype.DataType,java.lang.Object) -> <init>
    499:502:neureka.Tsr of(neureka.dtype.DataType,java.util.List,java.util.List) -> of
    510:511:void _construct$1c8ec8fd(int[],boolean) -> a
    514:520:int[] _intArray(java.lang.Object[]) -> b
    525:532:double[] _doubleArray(java.lang.Object[]) -> c
    557:559:neureka.Tsr of(neureka.dtype.DataType,java.util.List,neureka.ndim.Initializer) -> of
    580:580:neureka.Tsr of(neureka.dtype.DataType,int[],neureka.ndim.Initializer) -> of
    156:594:void <init>(int[],neureka.dtype.DataType,neureka.ndim.Initializer) -> <init>
    3604:3607:void _constructFromInitializer(int[],neureka.dtype.DataType,neureka.ndim.Initializer):604:607 -> <init>
    3604:3607:void <init>(int[],neureka.dtype.DataType,neureka.ndim.Initializer):593 -> <init>
    636:646:neureka.Tsr of(java.lang.String,java.util.List) -> of
    670:670:neureka.Tsr of(java.lang.String,neureka.Tsr) -> of
    691:691:neureka.Tsr of(java.lang.String,neureka.Tsr[]) -> of
    718:718:neureka.Tsr of(java.lang.String,boolean,neureka.Tsr[]) -> of
    743:744:neureka.Tsr _constructFunctional(neureka.Tsr,neureka.Tsr[],java.lang.String,boolean) -> a
    771:773:neureka.Tsr setRqsGradient(boolean) -> setRqsGradient
    785:785:boolean rqsGradient() -> rqsGradient
    788:792:void _setRqsGradient(boolean) -> _setRqsGradient
    801:843:neureka.Tsr setIsOutsourced(boolean) -> setIsOutsourced
    852:852:boolean isOutsourced() -> isOutsourced
    855:859:void _setIsOutsourced(boolean) -> _setIsOutsourced
    885:930:neureka.Tsr setIsVirtual(boolean) -> setIsVirtual
    946:946:boolean isVirtual() -> isVirtual
    956:960:void _setIsVirtual(boolean) -> _setIsVirtual
    985:997:neureka.Tsr setGradientApplyRequested(boolean) -> setGradientApplyRequested
    1015:1015:boolean gradientApplyRequested() -> gradientApplyRequested
    1024:1024:boolean isDeleted() -> isDeleted
    1040:1054:neureka.Tsr delete() -> delete
    1080:1080:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    1100:1121:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
    1137:1152:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    1162:1162:neureka.Tsr to(neureka.devices.Device) -> to
    1181:1181:boolean isEmpty() -> isEmpty
    1190:1190:boolean isUndefined() -> isUndefined
    1199:1200:boolean isSlice() -> isSlice
    1212:1213:int sliceCount() -> sliceCount
    1223:1224:boolean isSliceParent() -> isSliceParent
    1237:1237:boolean belongsToGraph() -> belongsToGraph
    1249:1249:boolean isLeave() -> isLeave
    1261:1261:boolean isBranch() -> isBranch
    1269:1269:boolean hasGradient() -> hasGradient
    1280:1280:neureka.Tsr getGradient() -> getGradient
    1286:1287:neureka.devices.Device getDevice() -> getDevice
    1293:1293:neureka.autograd.GraphNode getGraphNode() -> getGraphNode
    1298:1298:neureka.framing.NDFrame frame() -> frame
    1324:1336:neureka.Tsr incrementVersionBecauseOf(neureka.backend.api.ExecutionCall) -> incrementVersionBecauseOf
    1360:1370:neureka.Tsr _become(neureka.Tsr) -> _become
    1390:1391:java.util.Iterator iterator() -> iterator
    1435:1443:neureka.Tsr backward(neureka.Tsr) -> backward
    1462:1463:neureka.Tsr backward(double) -> backward
    1481:1482:neureka.Tsr backward() -> backward
    1497:1519:void applyGradient() -> applyGradient
    1530:1530:neureka.Tsr detach() -> detach
    1558:1559:neureka.Tsr label(java.lang.String[][]) -> label
    1583:1584:neureka.Tsr label(java.lang.String,java.lang.String[][]) -> label
    1596:1611:void _label(java.lang.String,java.lang.String[][]) -> a
    1631:1633:neureka.Tsr label(java.util.List) -> label
    1655:1657:neureka.Tsr label(java.lang.String,java.util.List) -> label
    1678:1679:neureka.Tsr label(java.util.Map) -> label
    1684:1685:neureka.Tsr label(java.lang.String,java.util.Map) -> label
    1717:1717:neureka.Tsr plus(neureka.Tsr) -> plus
    1721:1721:neureka.Tsr plusAssign(neureka.Tsr) -> plusAssign
    1725:1725:neureka.Tsr plus(double) -> plus
    1745:1745:neureka.Tsr minus(neureka.Tsr) -> minus
    1749:1752:neureka.Tsr minus(java.lang.Object) -> minus
    1757:1757:neureka.Tsr minusAssign(neureka.Tsr) -> minusAssign
    1761:1761:neureka.Tsr negative() -> negative
    1782:1782:neureka.Tsr multiply(neureka.Tsr) -> multiply
    1786:1789:neureka.Tsr multiply(java.lang.Object) -> multiply
    1810:1810:neureka.Tsr times(neureka.Tsr) -> times
    1812:1812:neureka.Tsr times(java.lang.Object) -> times
    1815:1815:neureka.Tsr timesAssign(neureka.Tsr) -> timesAssign
    1819:1819:neureka.Tsr multiply(double) -> multiply
    1839:1839:neureka.Tsr div(neureka.Tsr) -> div
    1843:1843:neureka.Tsr div(double) -> div
    1847:1847:neureka.Tsr divAssign(neureka.Tsr) -> divAssign
    1867:1867:neureka.Tsr mod(neureka.Tsr) -> mod
    1871:1871:neureka.Tsr mod(int) -> mod
    1875:1875:neureka.Tsr rem(int) -> rem
    1879:1879:neureka.Tsr modAssign(neureka.Tsr) -> modAssign
    1899:1899:neureka.Tsr power(neureka.Tsr) -> power
    1903:1903:neureka.Tsr power(double) -> power
    1910:1910:neureka.Tsr xor(neureka.Tsr) -> xor
    1914:1914:neureka.Tsr xor(double) -> xor
    1931:1934:neureka.Tsr T() -> T
    1946:1948:neureka.Tsr mean() -> mean
    1959:1973:neureka.Tsr convDot(neureka.Tsr) -> convDot
    1986:1988:neureka.Tsr dot(neureka.Tsr) -> dot
    2000:2006:neureka.Tsr matMul(neureka.Tsr) -> matMul
    2020:2020:neureka.Tsr dimtrim() -> dimtrim
    2033:2037:boolean isCase(neureka.Tsr) -> isCase
    2050:2050:boolean contains(neureka.Tsr) -> contains
    2074:2074:java.lang.Object getAt(int[]) -> getAt
    2086:2087:neureka.Tsr getAt(java.lang.Object[]) -> getAt
    2099:2099:neureka.Tsr getAt(int) -> getAt
    2110:2110:java.lang.Object getValueAt(int) -> getValueAt
    2124:2124:java.lang.Object getValueAt(int[]) -> getValueAt
    2139:2140:neureka.Tsr setAt(int,java.lang.Object) -> setAt
    2144:2144:neureka.Tsr getAt(double) -> getAt
    2148:2148:neureka.Tsr getAt(java.math.BigDecimal) -> getAt
    2153:2155:neureka.Tsr getAt(java.util.Map) -> getAt
    2164:2171:neureka.Tsr shallowCopy() -> shallowCopy
    2176:2181:neureka.Tsr clone() -> clone
    2195:2230:neureka.Tsr getAt(java.lang.Object) -> getAt
    2251:2251:neureka.utility.slicing.SliceBuilder slice() -> slice
    2268:2346:neureka.Tsr _sliceOf(int[],int[],int[]) -> a
    2369:2371:neureka.Tsr putAt(java.util.List,neureka.Tsr) -> putAt
    2385:2387:neureka.Tsr putAt(java.util.Map,neureka.Tsr) -> putAt
    2391:2396:void _putAtCheckFor(neureka.Tsr) -> b
    2400:2419:neureka.Tsr _putAt(neureka.Tsr,neureka.Tsr) -> a
    2431:2444:java.lang.Object getDataAt(int) -> getDataAt
    2456:2464:neureka.Tsr setDataAt(int,java.lang.Object) -> setDataAt
    2471:2480:void _setValue64(double[]) -> a
    2486:2495:void _setValue32(float[]) -> a
    2509:2538:neureka.Tsr setValue(java.lang.Object) -> setValue
    2542:2550:java.lang.Object getValue() -> getValue
    2561:2577:neureka.Tsr addToGradient(neureka.Tsr) -> addToGradient
    2600:2610:neureka.Tsr asType(java.lang.Class) -> asType
    2636:2647:neureka.Tsr toType(java.lang.Class) -> toType
    2651:2661:double value64(int) -> value64
    2666:2680:double[] value64() -> value64
    2684:2694:float value32(int) -> value32
    2699:2709:float[] value32() -> value32
    2715:2715:java.lang.String toString(java.lang.String) -> toString
    2719:2719:java.lang.String toString(java.util.Map,java.lang.String) -> toString
    2723:2723:java.lang.String toString(java.util.Map) -> toString
    2729:2729:java.lang.String _toString(java.lang.String,java.lang.String) -> _toString
    2735:2736:java.lang.String toString() -> toString
    2742:2771:void makeFit(neureka.Tsr[],boolean) -> makeFit
    2774:2774:int getVersion() -> getVersion
    138:138:java.lang.Object setDataAt(int,java.lang.Object) -> setDataAt
    138:138:java.lang.Object setIsVirtual(boolean) -> setIsVirtual
    138:138:java.lang.Object clone() -> clone
    2646:2646:void lambda$toType$25(java.lang.Class,neureka.Tsr) -> a
    2571:2576:void lambda$addToGradient$24(neureka.Tsr,neureka.devices.Device) -> a
    2565:2566:void lambda$addToGradient$23(neureka.Tsr,neureka.Tsr) -> b
    2034:2034:void lambda$isCase$22(neureka.Tsr,boolean[],neureka.framing.Relation) -> a
    2035:2036:void lambda$isCase$21(neureka.Tsr,boolean[],java.lang.Object) -> a
    1505:1517:void lambda$applyGradient$20(neureka.Tsr) -> c
    1440:1440:void lambda$backward$19(neureka.Tsr,neureka.autograd.GraphNode) -> a
    1047:1047:void lambda$delete$18(neureka.devices.Device) -> a
    1041:1046:void lambda$delete$17(neureka.autograd.GraphNode) -> a
    910:912:void lambda$setIsVirtual$16(neureka.Tsr) -> d
    809:837:void lambda$setIsOutsourced$15(neureka.devices.Device) -> b
    821:821:void lambda$setIsOutsourced$14(neureka.Tsr) -> e
    825:835:void lambda$setIsOutsourced$13(neureka.Tsr,neureka.devices.Device) -> b
    646:646:neureka.Tsr[] lambda$of$12(int) -> a
    646:646:neureka.Tsr lambda$of$11(java.lang.Object) -> a
    639:639:neureka.Tsr[] lambda$of$10(int) -> b
    636:636:boolean lambda$of$9(java.lang.Object) -> b
    559:559:int lambda$of$8(java.lang.Integer) -> a
    501:501:int lambda$of$7(java.lang.Integer) -> b
    476:476:int lambda$of$6(java.lang.Integer) -> c
    464:464:int lambda$of$5(java.lang.Integer) -> d
    405:405:java.util.List lambda$new$4(java.lang.Object) -> c
    386:386:int lambda$of$3(java.lang.Integer) -> e
    382:382:java.lang.Object lambda$of$2(java.lang.Object) -> d
    368:369:boolean lambda$of$1(java.lang.Object) -> e
    369:369:boolean lambda$of$0(java.lang.Object) -> f
    138:138:void <init>(int[],double,byte) -> <init>
    138:138:void access$100(neureka.Tsr,float[]) -> a
    138:138:void access$200(neureka.Tsr,double[]) -> a
    138:138:neureka.ndim.NDAConstructor access$300(neureka.Tsr) -> a
    138:143:void <clinit>() -> <clinit>
neureka.Tsr$1 -> neureka.Tsr$1:
    int _count -> a
    int _size -> b
    neureka.ndim.iterators.NDIterator val$_ndi -> c
    neureka.Tsr this$0 -> d
    1392:1394:void <init>(neureka.Tsr,neureka.ndim.iterators.NDIterator) -> <init>
    1398:1398:boolean hasNext() -> hasNext
    1403:1406:java.lang.Object next() -> next
neureka.Tsr$Create -> neureka.Tsr$Create:
    2871:2871:void <init>() -> <init>
    2874:2874:neureka.Tsr E(java.util.List) -> E
    2878:2878:neureka.Tsr E(int[]) -> E
    2882:2882:neureka.Tsr newRandom(int[]) -> newRandom
    2886:2887:neureka.Tsr newRandom(int[],long) -> newRandom
    2891:2900:neureka.Tsr newTsrLike(neureka.Tsr,double) -> newTsrLike
    2904:2913:neureka.Tsr newTsrLike(neureka.Tsr) -> newTsrLike
    2917:2919:neureka.Tsr _newEmptyLike(neureka.Tsr) -> a
    2874:2874:int lambda$E$0(java.lang.Integer) -> a
neureka.Tsr$IO -> neureka.Tsr$IO:
    2787:2788:void <init>() -> <init>
    2791:2793:double getFrom(neureka.Tsr,int) -> getFrom
    2797:2798:double getFrom(neureka.Tsr,int[]) -> getFrom
    2802:2804:void setInto(neureka.Tsr,int,double) -> setInto
    2807:2809:void setInto(neureka.Tsr,int[],double) -> setInto
    2812:2814:void addInto(neureka.Tsr,int,double) -> addInto
    2817:2819:void addInto(neureka.Tsr,int[],double) -> addInto
    2822:2824:neureka.Tsr addInto(neureka.Tsr,neureka.Tsr) -> addInto
    2828:2830:void subInto(neureka.Tsr,int,double) -> subInto
    2833:2835:void subInto(neureka.Tsr,int[],double) -> subInto
    2838:2849:void subInto(neureka.Tsr,neureka.Tsr) -> subInto
    2852:2854:void mulInto(neureka.Tsr,int,double) -> mulInto
    2857:2859:void mulInto(neureka.Tsr,int[],double) -> mulInto
neureka.autograd.ADAgent -> neureka.autograd.ADAgent:
    56:56:neureka.autograd.DefaultADAgent of(neureka.Tsr) -> of
    neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    neureka.Tsr derivative() -> derivative
    boolean hasForward() -> hasForward
    boolean hasBackward() -> hasBackward
    java.lang.String toString() -> toString
neureka.autograd.DefaultADAgent -> neureka.autograd.DefaultADAgent:
    neureka.autograd.DefaultADAgent$ADAction _forward -> a
    neureka.autograd.DefaultADAgent$ADAction _backward -> b
    37:37:neureka.autograd.DefaultADAgent ofDerivative(neureka.Tsr) -> ofDerivative
    43:53:void <init>(neureka.Tsr) -> <init>
    56:56:neureka.autograd.DefaultADAgent setForward(neureka.autograd.DefaultADAgent$ADAction) -> setForward
    58:58:neureka.autograd.DefaultADAgent setBackward(neureka.autograd.DefaultADAgent$ADAction) -> setBackward
    67:68:neureka.autograd.DefaultADAgent withArgs(java.util.List) -> withArgs
    72:72:neureka.Tsr forward(neureka.autograd.GraphNode,neureka.Tsr) -> forward
    75:75:neureka.Tsr backward(neureka.autograd.GraphNode,neureka.Tsr) -> backward
    79:80:neureka.Tsr derivative() -> derivative
    84:84:boolean hasForward() -> hasForward
    87:87:boolean hasBackward() -> hasBackward
    103:106:java.lang.String toString() -> toString
    105:105:java.lang.String lambda$toString$2(neureka.calculus.args.Arg) -> a
    48:48:neureka.Tsr lambda$new$1(neureka.autograd.GraphNode,neureka.Tsr) -> a
    43:43:neureka.Tsr lambda$new$0(neureka.autograd.GraphNode,neureka.Tsr) -> b
neureka.autograd.DefaultADAgent$ADAction -> neureka.autograd.DefaultADAgent$ADAction:
    neureka.Tsr execute(neureka.autograd.GraphNode,neureka.Tsr) -> execute
neureka.autograd.GraphLock -> neureka.autograd.GraphLock:
    neureka.calculus.Function _owner -> a
    boolean _isLocked -> b
    25:33:void <init>(neureka.calculus.Function) -> <init>
    40:41:void release() -> release
    48:48:java.lang.String toString() -> toString
    52:52:boolean isLocked() -> isLocked
neureka.autograd.GraphNode -> neureka.autograd.GraphNode:
    org.slf4j.Logger _LOG -> a
    int _mode -> b
    boolean _allows_forward -> c
    boolean _allows_backward -> d
    boolean _reliesOnJustInTimeProp -> e
    neureka.autograd.PendingError _pendingError -> f
    boolean _isUsedAsDerivative -> g
    neureka.calculus.Function _function -> h
    neureka.autograd.GraphNode[] _parents -> i
    java.lang.ref.WeakReference _payload -> j
    int _payloadReferenceVersion -> k
    java.util.TreeMap _targetsToAgents -> l
    neureka.autograd.GraphLock _lock -> m
    java.util.List _children -> n
    long _nodeID -> o
    boolean $assertionsDisabled -> p
    132:258:void <init>(neureka.calculus.Function,java.lang.Object,java.util.function.Supplier) -> <init>
    270:387:void _construct(neureka.Tsr,neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.autograd.GraphLock) -> a
    404:425:int _modeOf(neureka.backend.api.ExecutionCall) -> a
    436:452:void _migrateAndOrApplyError(neureka.Tsr,java.util.function.Consumer) -> a
    460:460:boolean usesAD() -> usesAD
    467:467:boolean usesForwardAD() -> usesForwardAD
    474:474:boolean usesReverseAD() -> usesReverseAD
    483:483:boolean isCacheable() -> isCacheable
    489:490:void obtainLocking(neureka.autograd.GraphLock) -> obtainLocking
    497:497:boolean isLeave() -> isLeave
    500:504:boolean isGraphLeave() -> isGraphLeave
    510:510:boolean isVirtual() -> isVirtual
    516:519:void _attachChild(neureka.autograd.GraphNode) -> a
    535:535:neureka.Tsr getPayload() -> getPayload
    542:559:void _setPayload(neureka.Tsr) -> a
    563:565:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    576:578:neureka.autograd.PendingError getAndRemovePendingError() -> getAndRemovePendingError
    591:607:void backward(neureka.Tsr) -> backward
    625:646:void _backward(neureka.Tsr,java.util.Set,boolean) -> a
    658:666:void _carryPendingBackPropToGradients(java.util.Set) -> a
    682:684:void backwardJIT(neureka.Tsr) -> backwardJIT
    687:712:void _backwardJIT(neureka.Tsr,neureka.autograd.GraphNode) -> a
    724:728:void _deleteDerivativesRecursively() -> a
    736:745:int _numberOfReverseModeADChildren() -> b
    754:763:void put(neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> put
    772:773:java.util.List get(neureka.autograd.GraphNode) -> get
    784:785:boolean has(neureka.autograd.GraphNode) -> has
    794:794:int size() -> size
    800:804:void forEachDerivative(java.util.function.BiConsumer) -> forEachDerivative
    810:814:void forEachBackward(neureka.Tsr,java.util.function.BiConsumer) -> forEachBackward
    820:822:void forEachTarget(java.util.function.Consumer) -> forEachTarget
    828:836:void forEachTargetAgentPair(java.util.function.BiConsumer) -> forEachTargetAgentPair
    842:842:boolean hasDerivatives() -> hasDerivatives
    872:872:int getMode() -> getMode
    886:886:boolean isReliesOnJustInTimeProp() -> isReliesOnJustInTimeProp
    888:888:neureka.autograd.PendingError getPendingError() -> getPendingError
    890:890:boolean isUsedAsDerivative() -> isUsedAsDerivative
    892:892:neureka.calculus.Function getFunction() -> getFunction
    894:894:neureka.autograd.GraphNode[] getParents() -> getParents
    896:896:int getPayloadReferenceVersion() -> getPayloadReferenceVersion
    898:898:neureka.autograd.GraphLock getLock() -> getLock
    900:900:java.util.List getChildren() -> getChildren
    905:905:long getNodeID() -> getNodeID
    911:916:java.lang.String type() -> type
    920:920:java.lang.String toString() -> toString
    927:953:java.lang.String toString(java.lang.String) -> toString
    968:981:java.lang.String _toString(java.lang.String,boolean,java.lang.String) -> a
    930:930:java.lang.String lambda$toString$15(neureka.Tsr) -> b
    832:832:void lambda$forEachTargetAgentPair$14(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> a
    833:833:void lambda$forEachTargetAgentPair$13(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    821:821:void lambda$forEachTarget$12(java.util.function.Consumer,neureka.autograd.GraphNode,java.util.List) -> a
    812:813:void lambda$forEachBackward$11(java.util.function.BiConsumer,neureka.Tsr,neureka.autograd.GraphNode,java.util.List) -> a
    802:802:void lambda$forEachDerivative$10(java.util.function.BiConsumer,neureka.autograd.GraphNode,java.util.List) -> b
    802:802:void lambda$forEachDerivative$9(java.util.function.BiConsumer,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> b
    754:754:int lambda$put$8(neureka.autograd.GraphNode,neureka.autograd.GraphNode) -> a
    709:709:void lambda$_backwardJIT$7(neureka.autograd.GraphNode,neureka.autograd.GraphNode,neureka.Tsr) -> a
    689:694:void lambda$_backwardJIT$6(neureka.autograd.GraphNode,neureka.Tsr) -> a
    659:659:void lambda$_carryPendingBackPropToGradients$5(java.util.Set,neureka.autograd.GraphNode) -> a
    643:643:void lambda$_backward$4(java.util.Set,neureka.autograd.GraphNode,neureka.Tsr) -> a
    597:604:void lambda$backward$3(neureka.autograd.GraphNode) -> b
    594:594:void lambda$backward$2(java.util.Set,neureka.autograd.GraphNode) -> b
    547:557:void lambda$_setPayload$1() -> c
    341:360:void lambda$_construct$0(neureka.Tsr,neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    74:76:void <clinit>() -> <clinit>
neureka.autograd.JITProp -> neureka.autograd.JITProp:
    java.util.Set _finished -> a
    java.util.Set _pending -> b
    16:20:void <init>(java.util.Set) -> <init>
    27:30:void addPending(java.util.Set) -> addPending
    37:46:void noteFinished(neureka.autograd.GraphNode) -> noteFinished
    49:49:int finishedCount() -> finishedCount
    53:53:int pendingCount() -> pendingCount
    66:76:void execute() -> execute
    82:82:boolean isDone() -> isDone
    90:92:java.lang.String toString() -> toString
    98:99:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    68:73:void lambda$execute$0(neureka.autograd.GraphNode) -> a
neureka.autograd.PendingError -> neureka.autograd.PendingError:
    int _toBeReceived -> a
    neureka.Tsr _accumulatedError -> b
    12:15:void <init>(neureka.Tsr,int) -> <init>
    18:22:void accumulate(neureka.Tsr) -> accumulate
    25:25:boolean isFullyAccumulated() -> isFullyAccumulated
    29:29:java.lang.String toString() -> toString
    33:33:int getToBeReceived() -> getToBeReceived
    37:37:neureka.Tsr getAccumulatedError() -> getAccumulatedError
neureka.backend.api.Algorithm -> neureka.backend.api.Algorithm:
    63:63:neureka.backend.standard.algorithms.FunAlgorithm withName(java.lang.String) -> withName
    java.lang.String getName() -> getName
    neureka.backend.api.Algorithm setImplementationFor(java.lang.Class,neureka.backend.api.ImplementationFor) -> setImplementationFor
    neureka.backend.api.ImplementationFor getImplementationFor(java.lang.Class) -> getImplementationFor
neureka.backend.api.Call -> neureka.backend.api.Call:
    neureka.Tsr[] _tensors -> _tensors
    java.lang.Object _device -> _device
    neureka.calculus.args.Args _arguments -> _arguments
    23:23:neureka.backend.api.Call$Builder to(neureka.devices.Device) -> to
    38:45:void <init>(neureka.Tsr[],java.lang.Object,java.util.List) -> <init>
    47:47:java.lang.Object getDevice() -> getDevice
    52:52:neureka.Tsr[] getTensors() -> getTensors
    55:60:void mutateTensors(int[]) -> mutateTensors
    64:64:neureka.devices.Device getDeviceFor(java.lang.Class) -> getDeviceFor
    68:68:java.util.List allMetaArgs() -> allMetaArgs
    72:72:neureka.calculus.args.Arg get(java.lang.Class) -> get
    76:76:java.lang.Object getValOf(java.lang.Class) -> getValOf
    80:80:int getDerivativeIndex() -> getDerivativeIndex
    84:101:neureka.Tsr getTsrOfType(java.lang.Class,int) -> getTsrOfType
    105:105:neureka.backend.api.Call$Validator validate() -> validate
    68:68:neureka.calculus.args.Arg lambda$allMetaArgs$0(neureka.calculus.args.Arg) -> a
neureka.backend.api.Call$Builder -> neureka.backend.api.Call$Builder:
    neureka.devices.Device _device -> a
    neureka.Tsr[] _tensors -> b
    neureka.calculus.args.Args _arguments -> c
    112:114:void <init>(neureka.devices.Device) -> <init>
    118:119:neureka.backend.api.Call$Builder with(neureka.Tsr[]) -> with
    123:124:neureka.backend.api.Call$Builder andArgs(java.util.List) -> andArgs
    128:128:neureka.backend.api.Call$Builder andArgs(neureka.calculus.args.Arg[]) -> andArgs
    132:132:neureka.backend.api.Call get() -> get
    108:108:void <init>(neureka.devices.Device,byte) -> <init>
neureka.backend.api.Call$DeviceCondition -> neureka.backend.api.Call$DeviceCondition:
    boolean check(neureka.devices.Device) -> check
neureka.backend.api.Call$OperationCondition -> neureka.backend.api.Call$OperationCondition:
    boolean check(neureka.backend.api.Operation) -> check
neureka.backend.api.Call$TensorCompare -> neureka.backend.api.Call$TensorCompare:
    boolean check(neureka.Tsr,neureka.Tsr) -> check
neureka.backend.api.Call$TensorCondition -> neureka.backend.api.Call$TensorCondition:
    boolean check(neureka.Tsr) -> check
neureka.backend.api.Call$Validator -> neureka.backend.api.Call$Validator:
    boolean _isValid -> a
    neureka.backend.api.Call this$0 -> b
    145:147:void <init>(neureka.backend.api.Call) -> <init>
    150:150:boolean isValid() -> isValid
    158:158:float estimation() -> estimation
    161:161:neureka.backend.api.Call$Validator$Estimator getEstimator() -> getEstimator
    164:165:neureka.backend.api.Call$Validator first(neureka.backend.api.Call$TensorCondition) -> first
    170:171:neureka.backend.api.Call$Validator any(neureka.backend.api.Call$TensorCondition) -> any
    176:178:boolean _anyMatch(neureka.backend.api.Call$TensorCondition) -> a
    183:184:neureka.backend.api.Call$Validator anyNotNull(neureka.backend.api.Call$TensorCondition) -> anyNotNull
    1189:1192:boolean _anyNotNullMatch(neureka.backend.api.Call$TensorCondition):189:192 -> anyNotNull
    1189:1192:neureka.backend.api.Call$Validator anyNotNull(neureka.backend.api.Call$TensorCondition):183 -> anyNotNull
    197:198:neureka.backend.api.Call$Validator all(neureka.backend.api.Call$TensorCondition) -> all
    202:204:boolean _allMatch(neureka.backend.api.Call$TensorCondition) -> b
    209:210:neureka.backend.api.Call$Validator allNotNull(neureka.backend.api.Call$TensorCondition) -> allNotNull
    1215:1218:boolean _allNotNullMatch(neureka.backend.api.Call$TensorCondition):215:218 -> allNotNull
    1215:1218:neureka.backend.api.Call$Validator allNotNull(neureka.backend.api.Call$TensorCondition):209 -> allNotNull
    223:224:neureka.backend.api.Call$Validator all(neureka.backend.api.Call$TensorCompare) -> all
    228:234:boolean _allMatch(neureka.backend.api.Call$TensorCompare) -> a
    145:145:boolean access$100(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCondition) -> a
    145:145:boolean access$200(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCondition) -> b
    145:145:boolean access$300(neureka.backend.api.Call$Validator,neureka.backend.api.Call$TensorCompare) -> a
neureka.backend.api.Call$Validator$Estimator -> neureka.backend.api.Call$Validator$Estimator:
    float _estimation -> a
    neureka.backend.api.Call$Validator this$1 -> b
    241:243:void <init>(neureka.backend.api.Call$Validator,boolean) -> <init>
    246:249:void _mod(float) -> a
    251:251:neureka.backend.api.Call$Validator$Estimator goodIfAll(neureka.backend.api.Call$TensorCondition) -> goodIfAll
    253:253:neureka.backend.api.Call$Validator$Estimator badIfAll(neureka.backend.api.Call$TensorCondition) -> badIfAll
    255:255:neureka.backend.api.Call$Validator$Estimator goodIfAnyNonNull(neureka.backend.api.Call$TensorCondition) -> goodIfAnyNonNull
    257:257:neureka.backend.api.Call$Validator$Estimator goodIfAny(neureka.backend.api.Call$TensorCondition) -> goodIfAny
    259:259:neureka.backend.api.Call$Validator$Estimator badIfAnyNonNull(neureka.backend.api.Call$TensorCondition) -> badIfAnyNonNull
    261:261:neureka.backend.api.Call$Validator$Estimator badIfAny(neureka.backend.api.Call$TensorCondition) -> badIfAny
    263:263:neureka.backend.api.Call$Validator$Estimator goodIfAll(neureka.backend.api.Call$TensorCompare) -> goodIfAll
    265:265:neureka.backend.api.Call$Validator$Estimator badIfAll(neureka.backend.api.Call$TensorCompare) -> badIfAll
    268:268:float getEstimation() -> getEstimation
    259:259:boolean lambda$badIfAnyNonNull$1(neureka.backend.api.Call$TensorCondition,neureka.Tsr) -> a
    255:255:boolean lambda$goodIfAnyNonNull$0(neureka.backend.api.Call$TensorCondition,neureka.Tsr) -> b
neureka.backend.api.ExecutionCall -> neureka.backend.api.ExecutionCall:
    neureka.backend.api.Operation _operation -> a
    neureka.backend.api.Algorithm _algorithm -> b
    boolean $assertionsDisabled -> c
    79:102:void <init>(neureka.devices.Device,neureka.backend.api.Operation,neureka.Tsr[],neureka.backend.api.Algorithm,java.util.List) -> <init>
    105:105:neureka.backend.api.ExecutionCall$Builder of(neureka.Tsr[]) -> of
    117:117:neureka.backend.api.ExecutionCall setMetaArg(neureka.calculus.args.Arg) -> setMetaArg
    120:127:java.lang.String toString() -> toString
    131:131:neureka.backend.api.Operation getOperation() -> getOperation
    133:133:int getJ() -> getJ
    136:140:neureka.backend.api.ExecutionCall withTensors(neureka.Tsr[]) -> withTensors
    145:146:neureka.backend.api.ExecutionCall forDeviceType(java.lang.Class) -> forDeviceType
    150:152:neureka.backend.api.Algorithm getAlgorithm() -> getAlgorithm
    156:156:boolean allowsForward() -> allowsForward
    160:160:boolean allowsBackward() -> allowsBackward
    168:173:neureka.autograd.ADAgent getADAgentFrom(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> getADAgentFrom
    63:63:void <init>(neureka.devices.Device,neureka.backend.api.Operation,neureka.Tsr[],neureka.backend.api.Algorithm,java.util.List,byte) -> <init>
    63:63:void <clinit>() -> <clinit>
neureka.backend.api.ExecutionCall$Builder -> neureka.backend.api.ExecutionCall$Builder:
    neureka.backend.api.Operation _operation -> a
    neureka.Tsr[] _tensors -> b
    neureka.backend.api.Algorithm _algorithm -> c
    java.util.List _arguments -> d
    181:187:void <init>(neureka.Tsr[]) -> <init>
    190:190:neureka.backend.api.ExecutionCall on(neureka.devices.Device) -> on
    200:201:neureka.backend.api.ExecutionCall$Builder running(neureka.backend.api.Operation) -> running
    205:206:neureka.backend.api.ExecutionCall$Builder algorithm(neureka.backend.api.Algorithm) -> algorithm
    210:211:neureka.backend.api.ExecutionCall$Builder andArgs(java.util.List) -> andArgs
    215:215:neureka.backend.api.ExecutionCall$Builder andArgs(neureka.calculus.args.Arg[]) -> andArgs
    176:176:void <init>(neureka.Tsr[],byte) -> <init>
neureka.backend.api.ImplementationFor -> neureka.backend.api.ImplementationFor:
    void run(neureka.backend.api.ExecutionCall) -> run
    72:73:neureka.Tsr runAndGetFirstTensor(neureka.backend.api.ExecutionCall) -> runAndGetFirstTensor
neureka.backend.api.Operation -> neureka.backend.api.Operation:
    65:65:neureka.backend.api.operations.OperationBuilder builder() -> builder
    neureka.backend.api.Algorithm[] getAllAlgorithms() -> getAllAlgorithms
    neureka.backend.api.Algorithm getAlgorithmFor(neureka.backend.api.ExecutionCall) -> getAlgorithmFor
    java.lang.String getFunction() -> getFunction
    neureka.backend.api.Operation setAlgorithm(java.lang.Class,neureka.backend.api.Algorithm) -> setAlgorithm
    130:130:neureka.backend.api.Operation setAlgorithm(neureka.backend.api.Algorithm) -> setAlgorithm
    neureka.backend.api.Algorithm getAlgorithm(java.lang.Class) -> getAlgorithm
    boolean supportsAlgorithm(java.lang.Class) -> supportsAlgorithm
    java.lang.String stringify(java.lang.String[]) -> stringify
    java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    java.lang.String getOperator() -> getOperator
    int getArity() -> getArity
    boolean isOperator() -> isOperator
    boolean isIndexer() -> isIndexer
    boolean isDifferentiable() -> isDifferentiable
    boolean isInline() -> isInline
    boolean supports(java.lang.Class) -> supports
    double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.api.Operation$DefaultOperatorCreator -> neureka.backend.api.Operation$DefaultOperatorCreator:
    java.lang.Object create(neureka.Tsr[],int) -> create
neureka.backend.api.Operation$PrimaryNDAConsumer -> neureka.backend.api.Operation$PrimaryNDAConsumer:
    double execute(int[]) -> execute
neureka.backend.api.Operation$PrimaryNDIConsumer -> neureka.backend.api.Operation$PrimaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$ScalarOperatorCreator -> neureka.backend.api.Operation$ScalarOperatorCreator:
    java.lang.Object create(neureka.Tsr[],double,int) -> create
neureka.backend.api.Operation$SecondaryNDAConsumer -> neureka.backend.api.Operation$SecondaryNDAConsumer:
    double execute(int[],int[]) -> execute
neureka.backend.api.Operation$SecondaryNDIConsumer -> neureka.backend.api.Operation$SecondaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$TertiaryNDAConsumer -> neureka.backend.api.Operation$TertiaryNDAConsumer:
    double execute(int[],int[],int[]) -> execute
neureka.backend.api.Operation$TertiaryNDIConsumer -> neureka.backend.api.Operation$TertiaryNDIConsumer:
    double execute(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> execute
neureka.backend.api.Operation$Utility -> neureka.backend.api.Operation$Utility:
    263:263:void <init>() -> <init>
    266:272:neureka.Tsr[] subset(neureka.Tsr[],int,int,int) -> subset
    276:278:neureka.Tsr[] without(neureka.Tsr[],int) -> without
    282:294:neureka.Tsr[] offsetted(neureka.Tsr[],int) -> offsetted
neureka.backend.api.OperationContext -> neureka.backend.api.OperationContext:
    org.slf4j.Logger log -> a
    java.util.Map _lookup -> b
    java.util.List _operations -> c
    int _size -> d
    neureka.calculus.Cache _functionCache -> e
    neureka.calculus.Functions _getAutogradFunction -> f
    neureka.calculus.Functions _getFunction -> g
    boolean $assertionsDisabled -> h
    79:79:neureka.backend.api.OperationContext$Runner runner() -> runner
    90:90:java.util.Map getOperationLookupMap() -> getOperationLookupMap
    101:101:java.util.List getOperations() -> getOperations
    106:106:int size() -> size
    111:111:neureka.calculus.Cache getFunctionCache() -> getFunctionCache
    120:121:neureka.calculus.Functions getFunction() -> getFunction
    131:132:neureka.calculus.Functions getAutogradFunction() -> getAutogradFunction
    58:144:void <init>() -> <init>
    155:176:neureka.backend.api.OperationContext addOperation(neureka.backend.api.Operation) -> addOperation
    184:184:boolean hasOperation(neureka.backend.api.Operation) -> hasOperation
    196:196:neureka.backend.api.Operation getOperation(int) -> getOperation
    206:206:neureka.backend.api.Operation getOperation(java.lang.String) -> getOperation
    217:221:neureka.backend.api.OperationContext clone() -> clone
    225:225:java.lang.String toString() -> toString
    230:230:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    235:235:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
    39:39:java.lang.Object clone() -> clone
    39:39:org.slf4j.Logger access$100() -> a
    39:41:void <clinit>() -> <clinit>
neureka.backend.api.OperationContext$Runner -> neureka.backend.api.OperationContext$Runner:
    neureka.backend.api.OperationContext originalContext -> a
    neureka.backend.api.OperationContext visitedContext -> b
    257:261:void <init>(neureka.backend.api.OperationContext,neureka.backend.api.OperationContext) -> <init>
    273:276:neureka.backend.api.OperationContext$Runner run(java.lang.Runnable) -> run
    293:296:java.lang.Object runAndGet(java.util.function.Supplier) -> runAndGet
    315:315:java.lang.Object call(java.util.function.Supplier) -> call
    334:334:java.lang.Object invoke(java.util.function.Supplier) -> invoke
    252:252:void <init>(neureka.backend.api.OperationContext,neureka.backend.api.OperationContext,byte) -> <init>
neureka.backend.api.algorithms.AbstractBaseAlgorithm -> neureka.backend.api.algorithms.AbstractBaseAlgorithm:
    java.lang.String _name -> a
    java.util.Map _implementations -> _implementations
    27:29:void <init>(java.lang.String) -> <init>
    40:40:java.lang.String getName() -> getName
    44:48:neureka.backend.api.Algorithm setImplementationFor(java.lang.Class,neureka.backend.api.ImplementationFor) -> setImplementationFor
    53:59:neureka.backend.api.ImplementationFor getImplementationFor(java.lang.Class) -> getImplementationFor
neureka.backend.api.algorithms.AbstractFunctionalAlgorithm -> neureka.backend.api.algorithms.AbstractFunctionalAlgorithm:
    neureka.backend.api.algorithms.fun.SuitabilityPredicate _isSuitableFor -> a
    neureka.backend.api.algorithms.fun.ForwardADPredicate _canPerformForwardADFor -> b
    neureka.backend.api.algorithms.fun.BackwardADPredicate _canPerformBackwardADFor -> c
    neureka.backend.api.algorithms.fun.ADAgentSupplier _supplyADAgentFor -> d
    neureka.backend.api.algorithms.fun.ExecutionDispatcher _handleInsteadOfDevice -> e
    neureka.backend.api.algorithms.fun.ExecutionPreparation _instantiateNewTensorsForExecutionIn -> f
    44:44:void <init>(java.lang.String) -> <init>
    50:50:float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
    57:57:boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
    64:64:boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
    71:71:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    98:98:neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
    105:105:neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
    110:110:neureka.backend.api.Algorithm buildFunAlgorithm() -> buildFunAlgorithm
    121:122:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setIsSuitableFor(neureka.backend.api.algorithms.fun.SuitabilityPredicate) -> setIsSuitableFor
    133:134:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCanPerformForwardADFor(neureka.backend.api.algorithms.fun.ForwardADPredicate) -> setCanPerformForwardADFor
    145:146:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCanPerformBackwardADFor(neureka.backend.api.algorithms.fun.BackwardADPredicate) -> setCanPerformBackwardADFor
    157:158:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setSupplyADAgentFor(neureka.backend.api.algorithms.fun.ADAgentSupplier) -> setSupplyADAgentFor
    162:163:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setExecutionDispatcher(neureka.backend.api.algorithms.fun.ExecutionDispatcher) -> setExecutionDispatcher
    167:168:neureka.backend.api.algorithms.AbstractFunctionalAlgorithm setCallPreparation(neureka.backend.api.algorithms.fun.ExecutionPreparation) -> setCallPreparation
neureka.backend.api.algorithms.FallbackAlgorithm -> neureka.backend.api.algorithms.FallbackAlgorithm:
    org.slf4j.Logger _LOG -> a
    32:93:void <init>(java.lang.String,int,neureka.backend.api.Operation) -> <init>
    97:105:float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
    109:109:boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
    112:112:boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
    117:127:neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
    132:132:neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
    138:152:neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
    188:196:java.lang.Object _tryExecute(java.lang.reflect.Method,java.lang.Object[],int) -> a
    202:227:java.lang.reflect.Method _findMethod(java.lang.String,java.lang.Class) -> a
    176:183:void lambda$_tryExecute$9(neureka.backend.api.ExecutionCall,java.lang.reflect.Method,int,int) -> a
    127:127:neureka.Tsr lambda$supplyADAgentFor$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    126:126:neureka.Tsr lambda$supplyADAgentFor$7(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    122:122:neureka.Tsr lambda$supplyADAgentFor$6(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    121:121:neureka.Tsr lambda$supplyADAgentFor$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    39:90:void lambda$new$4(neureka.backend.api.Operation,neureka.backend.api.ExecutionCall) -> a
    1156:1185:void _tryExecute(neureka.backend.api.ExecutionCall,java.lang.Class):156:185 -> a
    1156:1185:void lambda$new$4(neureka.backend.api.Operation,neureka.backend.api.ExecutionCall):89 -> a
    78:85:void lambda$new$3(neureka.backend.api.ExecutionCall,int,int) -> a
    62:68:void lambda$new$2(double[],neureka.backend.api.ExecutionCall,neureka.calculus.Function,int,int) -> a
    52:52:java.lang.Class lambda$new$1(neureka.Tsr) -> a
    49:49:boolean lambda$new$0(neureka.Tsr) -> b
    28:28:void <clinit>() -> <clinit>
neureka.backend.api.algorithms.fun.ADAgentSupplier -> neureka.backend.api.algorithms.fun.ADAgentSupplier:
    neureka.autograd.ADAgent supplyADAgentFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> supplyADAgentFor
neureka.backend.api.algorithms.fun.BackwardADPredicate -> neureka.backend.api.algorithms.fun.BackwardADPredicate:
    boolean canPerformBackwardADFor(neureka.backend.api.ExecutionCall) -> canPerformBackwardADFor
neureka.backend.api.algorithms.fun.ExecutionDispatcher -> neureka.backend.api.algorithms.fun.ExecutionDispatcher:
    neureka.Tsr dispatch(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> dispatch
neureka.backend.api.algorithms.fun.ExecutionPreparation -> neureka.backend.api.algorithms.fun.ExecutionPreparation:
    neureka.backend.api.ExecutionCall prepare(neureka.backend.api.ExecutionCall) -> prepare
neureka.backend.api.algorithms.fun.ForwardADPredicate -> neureka.backend.api.algorithms.fun.ForwardADPredicate:
    boolean canPerformForwardADFor(neureka.backend.api.ExecutionCall) -> canPerformForwardADFor
neureka.backend.api.algorithms.fun.SuitabilityPredicate -> neureka.backend.api.algorithms.fun.SuitabilityPredicate:
    float isSuitableFor(neureka.backend.api.ExecutionCall) -> isSuitableFor
neureka.backend.api.implementations.AbstractImplementationFor -> neureka.backend.api.implementations.AbstractImplementationFor:
    neureka.backend.api.ImplementationFor _lambda -> a
    9:15:void <init>(neureka.backend.api.ImplementationFor,int) -> <init>
    21:22:void run(neureka.backend.api.ExecutionCall) -> run
neureka.backend.api.operations.AbstractOperation -> neureka.backend.api.operations.AbstractOperation:
    org.slf4j.Logger _LOG -> a
    java.lang.String _function -> _function
    java.lang.String _operator -> _operator
    int _arity -> _arity
    boolean _isIndexer -> _isIndexer
    boolean _isDifferentiable -> _isDifferentiable
    boolean _isInline -> _isInline
    boolean _isOperator -> _isOperator
    java.util.Map _algorithms -> b
    neureka.backend.api.Algorithm _defaultAlgorithm -> c
    83:113:void <init>(neureka.backend.api.operations.OperationBuilder) -> <init>
    119:119:neureka.backend.api.Algorithm[] getAllAlgorithms() -> getAllAlgorithms
    136:146:neureka.backend.api.Algorithm getAlgorithm(java.lang.Class) -> getAlgorithm
    159:159:boolean supportsAlgorithm(java.lang.Class) -> supportsAlgorithm
    175:176:neureka.backend.api.Operation setAlgorithm(java.lang.Class,neureka.backend.api.Algorithm) -> setAlgorithm
    183:209:neureka.backend.api.Algorithm getAlgorithmFor(neureka.backend.api.ExecutionCall) -> getAlgorithmFor
    216:216:boolean supports(java.lang.Class) -> supports
    221:221:boolean isOperator() -> isOperator
    226:226:java.lang.String getFunction() -> getFunction
    230:230:java.lang.String getOperator() -> getOperator
    234:234:int getArity() -> getArity
    238:238:boolean isIndexer() -> isIndexer
    242:242:boolean isDifferentiable() -> isDifferentiable
    246:246:boolean isInline() -> isInline
    250:250:neureka.backend.api.Algorithm getDefaultAlgorithm() -> getDefaultAlgorithm
    141:141:neureka.backend.api.Algorithm lambda$getAlgorithm$1(java.util.Map$Entry) -> a
    140:140:boolean lambda$getAlgorithm$0(java.lang.Class,java.util.Map$Entry) -> a
    26:26:void <clinit>() -> <clinit>
neureka.backend.api.operations.OperationBuilder -> neureka.backend.api.operations.OperationBuilder:
    neureka.backend.api.operations.OperationBuilder$Stringifier _stringifier -> a
    neureka.backend.api.operations.OperationBuilder$Derivator _derivator -> b
    java.lang.String _function -> c
    java.lang.String _operator -> d
    java.lang.Integer _arity -> e
    java.lang.Boolean _isOperator -> f
    java.lang.Boolean _isIndexer -> g
    java.lang.Boolean _isDifferentiable -> h
    java.lang.Boolean _isInline -> i
    boolean _disposed -> j
    17:55:void <init>() -> <init>
    67:67:neureka.backend.api.operations.OperationBuilder$Stringifier getStringifier() -> getStringifier
    69:69:neureka.backend.api.operations.OperationBuilder$Derivator getDerivator() -> getDerivator
    71:71:java.lang.String getFunction() -> getFunction
    73:73:java.lang.String getOperator() -> getOperator
    75:75:java.lang.Integer getArity() -> getArity
    77:77:java.lang.Boolean getIsOperator() -> getIsOperator
    79:79:java.lang.Boolean getIsIndexer() -> getIsIndexer
    81:81:java.lang.Boolean getIsDifferentiable() -> getIsDifferentiable
    83:83:java.lang.Boolean getIsInline() -> getIsInline
    86:87:neureka.backend.api.operations.OperationBuilder setStringifier(neureka.backend.api.operations.OperationBuilder$Stringifier) -> setStringifier
    91:92:neureka.backend.api.operations.OperationBuilder setDerivator(neureka.backend.api.operations.OperationBuilder$Derivator) -> setDerivator
    96:97:neureka.backend.api.operations.OperationBuilder setFunction(java.lang.String) -> setFunction
    101:102:neureka.backend.api.operations.OperationBuilder setOperator(java.lang.String) -> setOperator
    106:107:neureka.backend.api.operations.OperationBuilder setArity(java.lang.Integer) -> setArity
    111:112:neureka.backend.api.operations.OperationBuilder setIsOperator(java.lang.Boolean) -> setIsOperator
    116:117:neureka.backend.api.operations.OperationBuilder setIsIndexer(java.lang.Boolean) -> setIsIndexer
    121:122:neureka.backend.api.operations.OperationBuilder setIsDifferentiable(java.lang.Boolean) -> setIsDifferentiable
    126:127:neureka.backend.api.operations.OperationBuilder setIsInline(java.lang.Boolean) -> setIsInline
    131:132:void dispose() -> dispose
    148:153:neureka.backend.api.Operation build() -> build
    1135:1143:java.util.List _listOfMissingProperties():135:143 -> build
    1135:1143:neureka.backend.api.Operation build():149 -> build
    17:17:neureka.backend.api.operations.OperationBuilder$Stringifier access$000(neureka.backend.api.operations.OperationBuilder) -> a
    17:17:neureka.backend.api.operations.OperationBuilder$Derivator access$100(neureka.backend.api.operations.OperationBuilder) -> b
neureka.backend.api.operations.OperationBuilder$1 -> neureka.backend.api.operations.OperationBuilder$1:
    neureka.backend.api.operations.OperationBuilder this$0 -> a
    153:153:void <init>(neureka.backend.api.operations.OperationBuilder,neureka.backend.api.operations.OperationBuilder) -> <init>
    156:156:java.lang.String stringify(java.lang.String[]) -> stringify
    161:161:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    166:166:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.api.operations.OperationBuilder$Derivator -> neureka.backend.api.operations.OperationBuilder$Derivator:
    java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
neureka.backend.api.operations.OperationBuilder$Stringifier -> neureka.backend.api.operations.OperationBuilder$Stringifier:
    java.lang.String stringify(java.lang.String[]) -> stringify
neureka.backend.standard.algorithms.Activation -> neureka.backend.standard.algorithms.Activation:
    18:51:void <init>() -> <init>
    54:54:java.lang.String getKernelSource() -> getKernelSource
    63:76:void activate(neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> activate
    85:99:void activate(neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> activate
    34:48:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    26:29:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    28:28:boolean lambda$new$3(neureka.Tsr,neureka.Tsr) -> a
    24:24:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> c
    20:22:float lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    21:21:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.algorithms.Broadcast -> neureka.backend.standard.algorithms.Broadcast:
    boolean $assertionsDisabled -> a
    20:100:void <init>(neureka.calculus.RecursiveExecutor) -> <init>
    103:103:java.lang.String getKernelSource() -> getKernelSource
    112:199:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> broadcast
    209:293:void broadcast(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> broadcast
    72:97:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    56:67:neureka.Tsr lambda$new$4(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    64:64:neureka.Tsr lambda$new$3(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    47:52:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    24:43:float lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    26:26:boolean lambda$new$0(neureka.Tsr) -> a
    16:16:void <clinit>() -> <clinit>
neureka.backend.standard.algorithms.Convolution -> neureka.backend.standard.algorithms.Convolution:
    16:22:void <init>() -> <init>
    26:26:java.lang.String getKernelSource() -> getKernelSource
    35:37:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> convolve
    1115:1194:void _deConvolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer):115:194 -> convolve
    1115:1194:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer):36 -> convolve
    45:108:void _convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDIConsumer) -> _convolve
    205:207:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer) -> convolve
    1216:1282:void _convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):216:282 -> convolve
    1216:1282:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):205 -> convolve
    1290:1370:void _deConvolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):290:370 -> convolve
    1290:1370:void convolve(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$TertiaryNDAConsumer):206 -> convolve
    18:20:float lambda$new$1(neureka.backend.api.ExecutionCall) -> a
    19:19:boolean lambda$new$0(neureka.Tsr) -> a
neureka.backend.standard.algorithms.FunAlgorithm -> neureka.backend.standard.algorithms.FunAlgorithm:
    7:7:void <init>(java.lang.String) -> <init>
neureka.backend.standard.algorithms.Operator -> neureka.backend.standard.algorithms.Operator:
    20:53:void <init>(neureka.calculus.RecursiveExecutor) -> <init>
    56:56:java.lang.String getKernelSource() -> getKernelSource
    66:87:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$SecondaryNDIConsumer) -> operate
    97:112:void operate(neureka.Tsr,neureka.Tsr,neureka.Tsr,int,int,int,neureka.backend.api.Operation$PrimaryNDAConsumer) -> operate
    36:50:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    33:33:neureka.Tsr lambda$new$6(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    32:32:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    23:28:float lambda$new$3(neureka.backend.api.ExecutionCall) -> d
    27:27:boolean lambda$new$2(neureka.Tsr) -> a
    26:26:boolean lambda$new$1(int,java.util.List,neureka.Tsr) -> a
    24:24:java.lang.Integer lambda$new$0(java.lang.Integer,java.lang.Integer) -> a
neureka.backend.standard.algorithms.Scalarization -> neureka.backend.standard.algorithms.Scalarization:
    boolean $assertionsDisabled -> a
    17:51:void <init>() -> <init>
    55:55:java.lang.String getKernelSource() -> getKernelSource
    65:77:void scalarize(neureka.Tsr,int,int,neureka.backend.api.Operation$PrimaryNDIConsumer) -> scalarize
    85:96:void scalarize(neureka.Tsr,int,int,neureka.backend.api.Operation$PrimaryNDAConsumer) -> scalarize
    34:48:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    21:30:float lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    24:24:boolean lambda$new$3(neureka.Tsr) -> a
    23:23:boolean lambda$new$2(neureka.Tsr) -> b
    19:19:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    18:18:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    13:13:void <clinit>() -> <clinit>
neureka.backend.standard.implementations.CLImplementation -> neureka.backend.standard.implementations.CLImplementation:
    java.util.function.Function _aliasSwapper -> a
    java.util.function.Function asAdvanced -> b
    java.lang.String _source -> c
    java.lang.String _name -> d
    boolean isSimple -> e
    20:56:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String) -> <init>
    20:87:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    1121:1149:java.util.Map _getParsedKernelsFromTemplate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String):121:149 -> <init>
    1121:1149:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String):76 -> <init>
    90:90:boolean isSimpleSource() -> isSimpleSource
    94:94:neureka.backend.standard.implementations.CLImplementation$SourceBuilder fromSource() -> fromSource
    98:98:neureka.backend.standard.implementations.CLImplementation$Compiler compiler() -> compiler
    102:102:java.lang.String getSource() -> getSource
    106:106:java.lang.String getName() -> getName
    127:137:void lambda$_getParsedKernelsFromTemplate$2(java.lang.String[],java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String) -> a
    37:40:java.lang.String lambda$new$1(java.lang.String) -> a
    22:32:java.lang.String lambda$new$0(java.lang.String) -> b
    17:17:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,byte) -> <init>
    17:17:void <init>(neureka.backend.api.ImplementationFor,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte) -> <init>
neureka.backend.standard.implementations.CLImplementation$Compiler -> neureka.backend.standard.implementations.CLImplementation$Compiler:
    neureka.backend.api.ImplementationFor lambda -> a
    int arity -> b
    java.lang.String kernelSource -> c
    java.lang.String activationSource -> d
    java.lang.String differentiationSource -> e
    java.lang.String type -> f
    179:179:void <init>() -> <init>
    181:181:neureka.backend.standard.implementations.CLImplementation$Compiler execution(neureka.backend.api.ImplementationFor) -> execution
    182:182:neureka.backend.standard.implementations.CLImplementation$Compiler arity(int) -> arity
    183:183:neureka.backend.standard.implementations.CLImplementation$Compiler kernelSource(java.lang.String) -> kernelSource
    184:184:neureka.backend.standard.implementations.CLImplementation$Compiler activationSource(java.lang.String) -> activationSource
    185:185:neureka.backend.standard.implementations.CLImplementation$Compiler differentiationSource(java.lang.String) -> differentiationSource
    186:186:neureka.backend.standard.implementations.CLImplementation$Compiler kernelPostfix(java.lang.String) -> kernelPostfix
    188:191:neureka.backend.standard.implementations.CLImplementation build() -> build
neureka.backend.standard.implementations.CLImplementation$Parser -> neureka.backend.standard.implementations.CLImplementation$a:
    void apply(java.lang.String,java.lang.String,java.lang.String) -> apply
neureka.backend.standard.implementations.CLImplementation$SourceBuilder -> neureka.backend.standard.implementations.CLImplementation$SourceBuilder:
    neureka.backend.api.ImplementationFor lambda -> a
    int arity -> b
    java.lang.String kernelName -> c
    java.lang.String kernelSource -> d
    162:162:void <init>() -> <init>
    164:164:neureka.backend.standard.implementations.CLImplementation$SourceBuilder lambda(neureka.backend.api.ImplementationFor) -> lambda
    165:165:neureka.backend.standard.implementations.CLImplementation$SourceBuilder arity(int) -> arity
    166:166:neureka.backend.standard.implementations.CLImplementation$SourceBuilder kernelName(java.lang.String) -> kernelName
    167:167:neureka.backend.standard.implementations.CLImplementation$SourceBuilder kernelSource(java.lang.String) -> kernelSource
    168:168:neureka.backend.standard.implementations.CLImplementation build() -> build
neureka.backend.standard.implementations.HostImplementation -> neureka.backend.standard.implementations.HostImplementation:
    19:19:neureka.backend.standard.implementations.HostImplementation$AndImplementation withArity(int) -> withArity
    24:25:void <init>(neureka.backend.api.ImplementationFor,int) -> <init>
    19:19:neureka.backend.standard.implementations.HostImplementation lambda$withArity$0(int,neureka.backend.api.ImplementationFor) -> a
neureka.backend.standard.implementations.HostImplementation$AndImplementation -> neureka.backend.standard.implementations.HostImplementation$AndImplementation:
    neureka.backend.standard.implementations.HostImplementation andImplementation(neureka.backend.api.ImplementationFor) -> andImplementation
neureka.backend.standard.operations.ConvUtil -> neureka.backend.standard.operations.ConvUtil:
    neureka.backend.standard.algorithms.Convolution conv -> a
    boolean $assertionsDisabled -> b
    14:14:void <init>() -> <init>
    19:110:neureka.backend.standard.algorithms.Convolution createDeconvolutionFor(java.lang.String) -> createDeconvolutionFor
    114:115:neureka.backend.standard.algorithms.Convolution getConv() -> getConv
    93:107:neureka.backend.api.ExecutionCall lambda$createDeconvolutionFor$6(neureka.backend.api.ExecutionCall) -> a
    58:88:neureka.Tsr lambda$createDeconvolutionFor$5(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    36:53:neureka.autograd.ADAgent lambda$createDeconvolutionFor$4(java.lang.String,neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    53:53:neureka.Tsr lambda$createDeconvolutionFor$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    52:52:neureka.Tsr lambda$createDeconvolutionFor$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    23:30:boolean lambda$createDeconvolutionFor$1(neureka.backend.api.ExecutionCall) -> b
    20:20:boolean lambda$createDeconvolutionFor$0(neureka.backend.api.ExecutionCall) -> c
    14:16:void <clinit>() -> <clinit>
neureka.backend.standard.operations.JunctionUtil -> neureka.backend.standard.operations.JunctionUtil:
    12:12:void <init>() -> <init>
    19:58:neureka.Tsr forConvolution(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forConvolution
    66:100:neureka.Tsr forMultiplications(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forMultiplications
    109:175:neureka.Tsr forDivisionsOrModuli(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forDivisionsOrModuli
    183:183:neureka.Tsr forAdditions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forAdditions
    191:191:neureka.Tsr forSubtractions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> forSubtractions
    200:231:neureka.Tsr _forAdditionsOrSubtractions(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor,boolean) -> a
neureka.backend.standard.operations.function.Absolute -> neureka.backend.standard.operations.function.Absolute:
    neureka.backend.api.Operation$DefaultOperatorCreator _activationCreator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _activationXCreator -> b
    20:102:void <init>() -> <init>
    106:108:java.lang.String stringify(java.lang.String[]) -> stringify
    113:113:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    118:121:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    126:127:double calculate(double,boolean) -> calculate
    89:97:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    60:70:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    71:74:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    65:68:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Cosinus -> neureka.backend.standard.operations.function.Cosinus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:103:void <init>() -> <init>
    107:109:java.lang.String stringify(java.lang.String[]) -> stringify
    114:114:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    119:122:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    127:128:double calculate(double,boolean) -> calculate
    90:98:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    61:71:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    72:75:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    66:69:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Gaussian -> neureka.backend.standard.operations.function.Gaussian:
    24:165:void <init>() -> <init>
    169:171:java.lang.String stringify(java.lang.String[]) -> stringify
    176:176:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    181:184:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    189:190:double calculate(double,boolean) -> calculate
    152:160:void lambda$new$13(neureka.backend.api.ExecutionCall) -> a
    111:121:void lambda$new$12(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    122:125:void lambda$new$11(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    116:119:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    84:98:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    79:79:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    69:74:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> c
    66:66:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> d
    53:57:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    58:59:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    55:55:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    38:42:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    43:44:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    40:40:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Identity -> neureka.backend.standard.operations.function.Identity:
    25:224:void <init>() -> <init>
    228:230:java.lang.String stringify(java.lang.String[]) -> stringify
    235:235:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    240:243:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    248:249:double calculate(double,boolean) -> calculate
    208:217:void lambda$new$23(neureka.backend.api.ExecutionCall) -> a
    183:195:void lambda$new$22(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    188:191:void lambda$new$21(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    156:170:neureka.backend.api.ExecutionCall lambda$new$20(neureka.backend.api.ExecutionCall) -> b
    151:151:neureka.autograd.ADAgent lambda$new$19(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    141:146:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> c
    138:138:boolean lambda$new$17(neureka.backend.api.ExecutionCall) -> d
    134:135:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$16(neureka.Tsr[],double,int) -> a
    135:135:double lambda$new$15(double,neureka.ndim.iterators.NDIterator) -> a
    134:134:double lambda$new$14(double,neureka.ndim.iterators.NDIterator) -> b
    116:126:void lambda$new$13(neureka.backend.api.ExecutionCall) -> e
    87:97:void lambda$new$12(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    98:101:void lambda$new$11(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    92:95:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    69:74:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> f
    64:64:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    54:59:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> g
    51:51:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> h
    45:47:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    47:47:double lambda$new$4(int[],int[],int[]) -> a
    46:46:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> a
    38:40:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    40:40:double lambda$new$1(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    39:39:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.function.Logarithm -> neureka.backend.standard.operations.function.Logarithm:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:104:void <init>() -> <init>
    108:110:java.lang.String stringify(java.lang.String[]) -> stringify
    115:116:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    121:124:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    129:130:double calculate(double,boolean) -> calculate
    90:98:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    61:71:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    72:75:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    66:69:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    49:49:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    28:30:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    30:30:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    29:29:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Quadratic -> neureka.backend.standard.operations.function.Quadratic:
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorNDI -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorNDX -> b
    20:111:void <init>() -> <init>
    115:117:java.lang.String stringify(java.lang.String[]) -> stringify
    122:122:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    127:130:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    135:136:double calculate(double,boolean) -> calculate
    98:106:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    69:79:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    80:83:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    74:77:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    57:57:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    33:39:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    39:39:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    36:37:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:28:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    28:28:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:26:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.ReLU -> neureka.backend.standard.operations.function.ReLU:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:122:void <init>() -> <init>
    126:128:java.lang.String stringify(java.lang.String[]) -> stringify
    133:133:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    138:141:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    147:154:double calculate(double,boolean) -> calculate
    109:117:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    80:90:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    91:94:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    85:88:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    68:68:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    38:45:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    46:47:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    41:42:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:29:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    30:31:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:26:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sigmoid -> neureka.backend.standard.operations.function.Sigmoid:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:106:void <init>() -> <init>
    110:112:java.lang.String stringify(java.lang.String[]) -> stringify
    117:117:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    122:125:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    130:133:double calculate(double,boolean) -> calculate
    93:101:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    64:74:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    75:78:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    69:72:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    51:51:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    29:31:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    31:31:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    30:30:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    22:24:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    24:24:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    23:23:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Sinus -> neureka.backend.standard.operations.function.Sinus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    22:138:void <init>() -> <init>
    142:144:java.lang.String stringify(java.lang.String[]) -> stringify
    149:149:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    154:157:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    162:163:double calculate(double,boolean) -> calculate
    125:133:void lambda$new$13(neureka.backend.api.ExecutionCall) -> a
    96:106:void lambda$new$12(neureka.backend.api.ExecutionCall) -> b
    107:110:void lambda$new$11(neureka.backend.api.ExecutionCall,int,int) -> a
    101:104:void lambda$new$10(neureka.backend.api.ExecutionCall,int,int) -> b
    69:83:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    64:64:neureka.autograd.ADAgent lambda$new$8(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    54:59:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> d
    51:51:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> e
    31:33:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    33:33:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    32:32:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    24:26:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    26:26:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    25:25:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Softplus -> neureka.backend.standard.operations.function.Softplus:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    21:129:void <init>() -> <init>
    133:135:java.lang.String stringify(java.lang.String[]) -> stringify
    140:140:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    145:148:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    153:154:double calculate(double,boolean) -> calculate
    113:121:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    65:75:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    76:79:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    70:73:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    51:51:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    30:32:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    32:32:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    31:31:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    23:25:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    25:25:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    24:24:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.function.Tanh -> neureka.backend.standard.operations.function.Tanh:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    20:127:void <init>() -> <init>
    131:133:java.lang.String stringify(java.lang.String[]) -> stringify
    138:138:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    143:146:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    151:155:double calculate(double,boolean) -> calculate
    110:118:void lambda$new$10(neureka.backend.api.ExecutionCall) -> a
    82:92:void lambda$new$9(neureka.backend.api.ExecutionCall) -> b
    93:96:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> a
    87:90:void lambda$new$7(neureka.backend.api.ExecutionCall,int,int) -> b
    70:70:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    40:47:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    48:49:double lambda$new$4(double[],neureka.Tsr[],int[],int[],int[]) -> a
    43:44:double lambda$new$3(double[],neureka.Tsr[],int[],int[],int[]) -> b
    23:30:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    31:32:double lambda$new$1(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    26:27:double lambda$new$0(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
neureka.backend.standard.operations.indexer.Product -> neureka.backend.standard.operations.indexer.Product:
    29:297:void <init>() -> <init>
    303:307:java.lang.String stringify(java.lang.String[]) -> stringify
    312:312:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    318:338:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    344:363:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    280:288:void lambda$new$39(neureka.backend.api.ExecutionCall) -> a
    251:261:void lambda$new$38(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    262:265:void lambda$new$37(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    256:259:void lambda$new$36(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    223:237:neureka.backend.api.ExecutionCall lambda$new$35(neureka.backend.api.ExecutionCall) -> b
    220:220:neureka.Tsr lambda$new$34(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    181:215:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    215:215:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    214:214:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    208:208:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    207:207:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    195:195:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    194:194:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    186:186:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    185:185:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    177:177:boolean lambda$new$24(neureka.backend.api.ExecutionCall) -> c
    176:176:boolean lambda$new$23(neureka.backend.api.ExecutionCall) -> d
    170:172:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$22(neureka.Tsr[],int) -> a
    172:172:double lambda$new$21(double[],neureka.Tsr[],int[],int[],int[]) -> a
    171:171:double lambda$new$20(double[],neureka.Tsr[],int[],int[],int[]) -> b
    163:165:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$19(neureka.Tsr[],int) -> b
    165:165:double lambda$new$18(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    164:164:double lambda$new$17(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    143:152:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    108:121:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    122:128:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    113:119:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    79:94:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    94:94:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    93:93:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    84:84:neureka.Tsr lambda$new$9(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    83:83:neureka.Tsr lambda$new$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    75:75:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> f
    74:74:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> g
    61:66:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    67:68:double lambda$new$4(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    64:64:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    46:51:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    52:53:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    49:49:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.indexer.Summation -> neureka.backend.standard.operations.indexer.Summation:
    29:286:void <init>() -> <init>
    290:294:java.lang.String stringify(java.lang.String[]) -> stringify
    299:299:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    304:306:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    311:322:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    328:335:double _calculate(double[],neureka.calculus.Function[]) -> a
    269:280:void lambda$new$39(neureka.backend.api.ExecutionCall) -> a
    240:250:void lambda$new$38(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    251:254:void lambda$new$37(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    245:248:void lambda$new$36(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    213:227:neureka.backend.api.ExecutionCall lambda$new$35(neureka.backend.api.ExecutionCall) -> b
    210:210:neureka.Tsr lambda$new$34(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    171:205:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    205:205:neureka.Tsr lambda$new$32(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    204:204:neureka.Tsr lambda$new$31(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    198:198:neureka.Tsr lambda$new$30(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    197:197:neureka.Tsr lambda$new$29(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    185:185:neureka.Tsr lambda$new$28(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    184:184:neureka.Tsr lambda$new$27(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    176:176:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    175:175:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    167:167:boolean lambda$new$24(neureka.backend.api.ExecutionCall) -> c
    166:166:boolean lambda$new$23(neureka.backend.api.ExecutionCall) -> d
    160:162:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$22(neureka.Tsr[],int) -> a
    162:162:double lambda$new$21(double[],neureka.Tsr[],int[],int[],int[]) -> a
    161:161:double lambda$new$20(double[],neureka.Tsr[],int[],int[],int[]) -> b
    153:155:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$19(neureka.Tsr[],int) -> b
    155:155:double lambda$new$18(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    154:154:double lambda$new$17(double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    132:141:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    97:110:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    111:117:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    102:108:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    67:82:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    82:82:neureka.Tsr lambda$new$11(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> i
    81:81:neureka.Tsr lambda$new$10(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> j
    72:72:neureka.Tsr lambda$new$9(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> k
    71:71:neureka.Tsr lambda$new$8(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> l
    63:63:boolean lambda$new$7(neureka.backend.api.ExecutionCall) -> f
    62:62:boolean lambda$new$6(neureka.backend.api.ExecutionCall) -> g
    55:58:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    58:58:double lambda$new$4(int[],int[],int[]) -> a
    57:57:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    46:49:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    49:49:double lambda$new$1(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    48:48:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.linear.MatMul -> neureka.backend.standard.operations.linear.MatMul:
    org.slf4j.Logger _LOG -> a
    29:198:void <init>() -> <init>
    211:218:java.lang.String stringify(java.lang.String[]) -> stringify
    223:223:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    228:228:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    152:164:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    115:124:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    86:101:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall) -> c
    1201:1207:void _autoClone(neureka.Tsr[]):201:207 -> c
    1201:1207:neureka.backend.api.ExecutionCall lambda$new$9(neureka.backend.api.ExecutionCall):100 -> c
    73:81:neureka.Tsr lambda$new$8(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    55:63:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    64:67:neureka.Tsr lambda$new$6(int,neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    51:51:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> d
    50:50:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> e
    43:48:float lambda$new$3(neureka.backend.api.ExecutionCall) -> f
    47:47:boolean lambda$new$2(neureka.Tsr) -> a
    46:46:boolean lambda$new$1(neureka.Tsr) -> b
    44:44:boolean lambda$new$0(neureka.Tsr) -> c
    25:25:void <clinit>() -> <clinit>
neureka.backend.standard.operations.linear.SimpleMatMul -> neureka.backend.standard.operations.linear.SimpleMatMul:
    3:3:void <init>() -> <init>
    14:24:void execute(double[],int[],double[],int[],double[],int[]) -> execute
    29:36:void execute(double[],double[],double[],int,int,int) -> execute
neureka.backend.standard.operations.linear.XConv -> neureka.backend.standard.operations.linear.XConv:
    20:119:void <init>() -> <init>
    124:131:java.lang.String stringify(java.lang.String[]) -> stringify
    136:136:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    141:141:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    104:113:void lambda$new$9(neureka.backend.api.ExecutionCall) -> a
    69:82:void lambda$new$8(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    83:87:void lambda$new$7(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    74:78:void lambda$new$6(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    46:51:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> a
    52:53:double lambda$new$4(int,double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    49:49:double lambda$new$3(double[],neureka.Tsr[],double[],int[],int[],int[]) -> a
    33:38:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> b
    39:40:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    36:36:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.linear.XConvLeft -> neureka.backend.standard.operations.linear.XConvLeft:
    12:23:void <init>() -> <init>
    27:34:java.lang.String stringify(java.lang.String[]) -> stringify
    39:39:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    44:44:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.linear.XConvRight -> neureka.backend.standard.operations.linear.XConvRight:
    12:23:void <init>() -> <init>
    27:34:java.lang.String stringify(java.lang.String[]) -> stringify
    39:39:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    44:44:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Addition -> neureka.backend.standard.operations.operator.Addition:
    neureka.backend.api.Operation$DefaultOperatorCreator _broadcastCreator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _broadcastCreatorX -> b
    neureka.backend.standard.algorithms.Broadcast _broadcast -> c
    boolean $assertionsDisabled -> d
    48:320:void <init>() -> <init>
    325:332:java.lang.String stringify(java.lang.String[]) -> stringify
    337:342:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    347:360:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    366:378:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    339:339:neureka.calculus.Function lambda$asDerivative$36(int,neureka.calculus.Function) -> a
    338:338:boolean lambda$asDerivative$35(int,neureka.calculus.Function) -> b
    306:315:void lambda$new$34(neureka.backend.api.ExecutionCall) -> a
    275:293:void lambda$new$33(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    287:290:void lambda$new$32(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    281:284:void lambda$new$31(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    261:265:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$30(neureka.Tsr[],double,int) -> a
    265:265:double lambda$new$29(int[]) -> a
    263:263:double lambda$new$28(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    253:256:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$27(neureka.Tsr[],double,int) -> b
    256:256:double lambda$new$26(neureka.ndim.iterators.NDIterator) -> a
    254:254:double lambda$new$25(double[],double,neureka.ndim.iterators.NDIterator) -> a
    248:248:neureka.Tsr lambda$new$24(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    246:246:neureka.autograd.ADAgent lambda$new$23(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    225:234:void lambda$new$22(neureka.backend.api.ExecutionCall) -> b
    196:206:void lambda$new$21(neureka.backend.api.ExecutionCall) -> c
    207:210:void lambda$new$20(neureka.backend.api.ExecutionCall,int,int) -> a
    201:204:void lambda$new$19(neureka.backend.api.ExecutionCall,int,int) -> b
    169:179:void lambda$new$18(neureka.backend.api.ExecutionCall) -> d
    133:147:void lambda$new$17(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    148:154:void lambda$new$16(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    139:145:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    121:121:neureka.autograd.ADAgent lambda$new$14(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    110:115:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$13(neureka.Tsr[],int) -> a
    115:115:double lambda$new$12(int[]) -> b
    114:114:double lambda$new$11(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    102:105:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$10(neureka.Tsr[],int) -> b
    105:105:double lambda$new$9(neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    104:104:double lambda$new$8(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    53:64:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    66:76:neureka.Tsr lambda$new$6(neureka.devices.Device,neureka.Tsr,neureka.Tsr[],int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    49:49:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> e
    48:48:neureka.Tsr lambda$new$4(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    39:44:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$3(neureka.Tsr[],int) -> c
    44:44:double lambda$static$2(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    31:34:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$1(neureka.Tsr[],int) -> d
    34:34:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    27:37:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.AdditionConv -> neureka.backend.standard.operations.operator.AdditionConv:
    18:78:void <init>() -> <init>
    82:89:java.lang.String stringify(java.lang.String[]) -> stringify
    94:94:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    99:99:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    68:73:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    45:61:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    61:61:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    60:60:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    50:50:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    49:49:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    34:39:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.AdditionLeftConv -> neureka.backend.standard.operations.operator.AdditionLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.AdditionRightConv -> neureka.backend.standard.operations.operator.AdditionRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Division -> neureka.backend.standard.operations.operator.Division:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    63:372:void <init>() -> <init>
    377:384:java.lang.String stringify(java.lang.String[]) -> stringify
    389:389:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    393:414:java.lang.String _asDerivative(neureka.calculus.Function[],int,int) -> a
    420:438:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    444:465:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    358:367:void lambda$new$43(neureka.backend.api.ExecutionCall) -> a
    320:338:void lambda$new$42(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    332:335:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    326:329:void lambda$new$40(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    309:309:neureka.Tsr lambda$new$39(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    307:307:neureka.autograd.ADAgent lambda$new$38(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    304:304:boolean lambda$new$37(neureka.backend.api.ExecutionCall) -> b
    303:303:boolean lambda$new$36(neureka.backend.api.ExecutionCall) -> c
    292:298:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$35(neureka.Tsr[],double,int) -> a
    298:298:double lambda$new$34(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    297:297:double lambda$new$33(double,int[]) -> a
    295:295:double lambda$new$32(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    281:286:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$31(neureka.Tsr[],double,int) -> b
    286:286:double lambda$new$30(double,double[],neureka.ndim.iterators.NDIterator) -> a
    285:285:double lambda$new$29(double,neureka.ndim.iterators.NDIterator) -> a
    283:283:double lambda$new$28(double[],double,neureka.ndim.iterators.NDIterator) -> a
    261:270:void lambda$new$27(neureka.backend.api.ExecutionCall) -> d
    227:237:void lambda$new$26(neureka.backend.api.ExecutionCall) -> e
    238:241:void lambda$new$25(neureka.backend.api.ExecutionCall,int,int) -> a
    232:235:void lambda$new$24(neureka.backend.api.ExecutionCall,int,int) -> b
    198:213:neureka.autograd.ADAgent lambda$new$23(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    213:213:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    212:212:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    203:203:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    202:202:neureka.Tsr lambda$new$19(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    188:193:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> f
    186:186:boolean lambda$new$17(neureka.backend.api.ExecutionCall) -> g
    166:175:void lambda$new$16(neureka.backend.api.ExecutionCall) -> h
    125:138:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    139:145:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    130:136:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    112:112:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    95:100:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    101:104:double lambda$new$10(int,double[],neureka.Tsr[],double[],int[]) -> a
    98:98:double lambda$new$9(double[],neureka.Tsr[],double[],int[]) -> a
    79:84:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    85:88:double lambda$new$7(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    82:82:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    45:52:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    53:56:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    50:50:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    29:34:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    35:38:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    32:32:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    27:43:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.DivisionConv -> neureka.backend.standard.operations.operator.DivisionConv:
    18:75:void <init>() -> <init>
    79:86:java.lang.String stringify(java.lang.String[]) -> stringify
    91:91:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    96:96:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    68:70:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    45:61:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    61:61:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    60:60:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    50:50:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    49:49:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    34:39:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    31:31:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.DivisionLeftConv -> neureka.backend.standard.operations.operator.DivisionLeftConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.DivisionRightConv -> neureka.backend.standard.operations.operator.DivisionRightConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Modulo -> neureka.backend.standard.operations.operator.Modulo:
    28:387:void <init>() -> <init>
    393:400:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    407:414:java.lang.String stringify(java.lang.String[]) -> stringify
    419:419:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    424:433:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    372:381:void lambda$new$43(neureka.backend.api.ExecutionCall) -> a
    335:353:void lambda$new$42(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    347:350:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    341:344:void lambda$new$40(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    322:322:neureka.autograd.ADAgent lambda$new$39(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    312:317:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> b
    309:309:boolean lambda$new$37(neureka.backend.api.ExecutionCall) -> c
    298:304:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$36(neureka.Tsr[],double,int) -> a
    304:304:double lambda$new$35(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    303:303:double lambda$new$34(double,int[]) -> a
    301:301:double lambda$new$33(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    287:292:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$32(neureka.Tsr[],double,int) -> b
    292:292:double lambda$new$31(double,double[],neureka.ndim.iterators.NDIterator) -> a
    291:291:double lambda$new$30(double,neureka.ndim.iterators.NDIterator) -> a
    289:289:double lambda$new$29(double[],double,neureka.ndim.iterators.NDIterator) -> a
    267:276:void lambda$new$28(neureka.backend.api.ExecutionCall) -> d
    232:242:void lambda$new$27(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    243:246:void lambda$new$26(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    237:240:void lambda$new$25(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    203:218:neureka.autograd.ADAgent lambda$new$24(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    218:218:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    217:217:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    208:208:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    207:207:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    192:197:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> e
    189:189:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> f
    188:188:neureka.Tsr lambda$new$17(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    172:179:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$new$16(neureka.Tsr[],int) -> a
    180:183:double lambda$new$15(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    177:177:double lambda$new$14(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    152:157:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$new$13(neureka.Tsr[],int) -> b
    158:164:double lambda$new$12(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    155:155:double lambda$new$11(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    130:139:void lambda$new$10(neureka.backend.api.ExecutionCall) -> g
    90:103:void lambda$new$9(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> b
    104:110:void lambda$new$8(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> c
    95:101:void lambda$new$7(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> d
    78:78:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    59:65:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$5(neureka.Tsr[],int) -> c
    66:69:double lambda$new$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    63:63:double lambda$new$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    44:48:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$2(neureka.Tsr[],int) -> d
    49:52:double lambda$new$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    46:46:double lambda$new$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.operator.Multiplication -> neureka.backend.standard.operations.operator.Multiplication:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    neureka.backend.api.Operation$DefaultOperatorCreator xBCCreator -> xBCCreator
    neureka.backend.api.Operation$DefaultOperatorCreator xBCCreatorX -> xBCCreatorX
    73:386:void <init>() -> <init>
    392:399:java.lang.String stringify(java.lang.String[]) -> stringify
    404:416:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    421:440:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    446:464:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    407:412:java.lang.String lambda$asDerivative$54(int,neureka.calculus.Function[],neureka.calculus.Function) -> a
    410:410:boolean lambda$asDerivative$53(neureka.calculus.Function,neureka.calculus.Function) -> a
    405:405:boolean lambda$asDerivative$52(int,neureka.calculus.Function) -> a
    371:380:void lambda$new$51(neureka.backend.api.ExecutionCall) -> a
    340:358:void lambda$new$50(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    352:355:void lambda$new$49(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    346:349:void lambda$new$48(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    329:329:neureka.Tsr lambda$new$47(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    304:325:neureka.autograd.ADAgent lambda$new$46(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    325:325:neureka.Tsr lambda$new$45(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    324:324:neureka.Tsr lambda$new$44(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    317:317:neureka.Tsr lambda$new$43(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    308:308:neureka.Tsr lambda$new$42(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    300:300:boolean lambda$new$41(neureka.backend.api.ExecutionCall) -> b
    299:299:boolean lambda$new$40(neureka.backend.api.ExecutionCall) -> c
    289:294:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$39(neureka.Tsr[],double,int) -> a
    294:294:double lambda$new$38(double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    293:293:double lambda$new$37(double,int[]) -> a
    291:291:double lambda$new$36(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    279:283:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$35(neureka.Tsr[],double,int) -> b
    283:283:double lambda$new$34(double[],neureka.ndim.iterators.NDIterator) -> a
    282:282:double lambda$new$33(double,neureka.ndim.iterators.NDIterator) -> a
    280:280:double lambda$new$32(double[],double,neureka.ndim.iterators.NDIterator) -> a
    256:265:void lambda$new$31(neureka.backend.api.ExecutionCall) -> d
    227:237:void lambda$new$30(neureka.backend.api.ExecutionCall) -> e
    238:241:void lambda$new$29(neureka.backend.api.ExecutionCall,int,int) -> a
    232:235:void lambda$new$28(neureka.backend.api.ExecutionCall,int,int) -> b
    197:212:neureka.autograd.ADAgent lambda$new$27(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    212:212:neureka.Tsr lambda$new$26(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> e
    211:211:neureka.Tsr lambda$new$25(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> f
    202:202:neureka.Tsr lambda$new$24(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> g
    201:201:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> h
    193:193:boolean lambda$new$22(neureka.backend.api.ExecutionCall) -> f
    192:192:boolean lambda$new$21(neureka.backend.api.ExecutionCall) -> g
    172:181:void lambda$new$20(neureka.backend.api.ExecutionCall) -> h
    137:150:void lambda$new$19(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    151:157:void lambda$new$18(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    142:148:void lambda$new$17(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    125:125:neureka.autograd.ADAgent lambda$new$16(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    106:115:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$15(neureka.Tsr[],int) -> a
    116:117:double lambda$new$14(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    113:113:double lambda$new$13(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    89:96:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$12(neureka.Tsr[],int) -> b
    97:98:double lambda$new$11(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    94:94:double lambda$new$10(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    64:68:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$9(neureka.Tsr[],int) -> c
    68:68:double lambda$static$8(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    57:59:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$7(neureka.Tsr[],int) -> d
    59:59:double lambda$static$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    41:48:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> e
    49:50:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    46:46:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> b
    33:36:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> f
    36:36:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    35:35:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> b
    31:62:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.MultiplicationLeftConv -> neureka.backend.standard.operations.operator.MultiplicationLeftConv:
    22:129:void <init>() -> <init>
    133:133:java.lang.String stringify(java.lang.String[]) -> stringify
    138:138:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    143:143:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    115:124:void lambda$new$11(neureka.backend.api.ExecutionCall) -> a
    86:96:void lambda$new$10(neureka.backend.api.ExecutionCall) -> b
    97:100:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> a
    91:94:void lambda$new$8(neureka.backend.api.ExecutionCall,int,int) -> b
    70:72:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> c
    48:63:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    63:63:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    62:62:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    52:52:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    37:42:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> d
    34:34:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> e
    33:33:neureka.Tsr lambda$new$0(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
neureka.backend.standard.operations.operator.MultiplicationRightConv -> neureka.backend.standard.operations.operator.MultiplicationRightConv:
    23:131:void <init>() -> <init>
    135:135:java.lang.String stringify(java.lang.String[]) -> stringify
    140:140:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    145:145:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    116:125:void lambda$new$12(neureka.backend.api.ExecutionCall) -> a
    87:97:void lambda$new$11(neureka.backend.api.ExecutionCall) -> b
    98:101:void lambda$new$10(neureka.backend.api.ExecutionCall,int,int) -> a
    92:95:void lambda$new$9(neureka.backend.api.ExecutionCall,int,int) -> b
    71:74:neureka.backend.api.ExecutionCall lambda$new$8(neureka.backend.api.ExecutionCall) -> c
    49:64:neureka.autograd.ADAgent lambda$new$7(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    64:64:neureka.Tsr lambda$new$6(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    63:63:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    54:54:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    53:53:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    38:43:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> d
    35:35:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> e
    34:34:neureka.Tsr lambda$new$0(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
neureka.backend.standard.operations.operator.Power -> neureka.backend.standard.operations.operator.Power:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    77:471:void <init>() -> <init>
    480:485:java.lang.String stringify(java.lang.String[]) -> stringify
    490:519:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    524:546:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    552:577:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    493:493:java.lang.String lambda$asDerivative$45(neureka.calculus.Function[],int) -> a
    455:464:void lambda$new$44(neureka.backend.api.ExecutionCall) -> a
    418:436:void lambda$new$43(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    430:433:void lambda$new$42(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    424:427:void lambda$new$41(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    407:407:neureka.Tsr lambda$new$40(neureka.calculus.RecursiveExecutor,neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    405:405:neureka.autograd.ADAgent lambda$new$39(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    402:402:boolean lambda$new$38(neureka.backend.api.ExecutionCall) -> b
    401:401:boolean lambda$new$37(neureka.backend.api.ExecutionCall) -> c
    391:396:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$36(neureka.Tsr[],double,int) -> a
    396:396:double lambda$new$35(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    395:395:double lambda$new$34(double,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    393:393:double lambda$new$33(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> b
    381:385:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$32(neureka.Tsr[],double,int) -> b
    385:385:double lambda$new$31(double[],double,neureka.ndim.iterators.NDIterator) -> a
    384:384:double lambda$new$30(double,double[],neureka.ndim.iterators.NDIterator) -> a
    382:382:double lambda$new$29(double[],double,neureka.ndim.iterators.NDIterator) -> b
    361:370:void lambda$new$28(neureka.backend.api.ExecutionCall) -> d
    326:336:void lambda$new$27(neureka.backend.api.ExecutionCall) -> e
    337:340:void lambda$new$26(neureka.backend.api.ExecutionCall,int,int) -> a
    331:334:void lambda$new$25(neureka.backend.api.ExecutionCall,int,int) -> b
    297:312:neureka.autograd.ADAgent lambda$new$24(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    312:312:neureka.Tsr lambda$new$23(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    311:311:neureka.Tsr lambda$new$22(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    302:302:neureka.Tsr lambda$new$21(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    301:301:neureka.Tsr lambda$new$20(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    293:293:boolean lambda$new$19(neureka.backend.api.ExecutionCall) -> f
    292:292:boolean lambda$new$18(neureka.backend.api.ExecutionCall) -> g
    271:282:void lambda$new$17(neureka.backend.api.ExecutionCall) -> h
    229:242:void lambda$new$16(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    243:249:void lambda$new$15(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    234:240:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    218:218:neureka.autograd.ADAgent lambda$new$13(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    135:212:neureka.Tsr lambda$new$12(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    116:123:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    125:128:double lambda$new$10(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int,int[]) -> a
    121:121:double lambda$new$9(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    93:98:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    100:109:double lambda$new$7(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    96:96:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    56:63:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    64:69:double lambda$static$4(int,double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    61:61:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    33:37:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    38:48:double lambda$static$1(int,double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    35:35:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    31:54:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.PowerConv -> neureka.backend.standard.operations.operator.PowerConv:
    18:77:void <init>() -> <init>
    81:88:java.lang.String stringify(java.lang.String[]) -> stringify
    93:93:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    98:98:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    69:72:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    46:62:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    62:62:neureka.Tsr lambda$new$5(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> a
    61:61:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> b
    51:51:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> c
    50:50:neureka.Tsr lambda$new$2(neureka.calculus.Function,neureka.Tsr,neureka.autograd.GraphNode,neureka.Tsr) -> d
    35:40:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> b
    32:32:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> c
neureka.backend.standard.operations.operator.PowerLeftConv -> neureka.backend.standard.operations.operator.PowerLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.PowerRightConv -> neureka.backend.standard.operations.operator.PowerRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.Subtraction -> neureka.backend.standard.operations.operator.Subtraction:
    neureka.backend.api.Operation$DefaultOperatorCreator _creator -> a
    neureka.backend.api.Operation$DefaultOperatorCreator _creatorX -> b
    boolean $assertionsDisabled -> c
    67:348:void <init>() -> <init>
    354:361:java.lang.String stringify(java.lang.String[]) -> stringify
    366:371:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    376:393:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    399:415:double calculate(double[],int,neureka.calculus.Function[]) -> calculate
    369:369:neureka.calculus.Function lambda$asDerivative$39(int,neureka.calculus.Function) -> a
    368:368:boolean lambda$asDerivative$38(int,neureka.calculus.Function) -> b
    334:343:void lambda$new$37(neureka.backend.api.ExecutionCall) -> a
    305:315:void lambda$new$36(neureka.backend.api.ExecutionCall) -> b
    316:319:void lambda$new$35(neureka.backend.api.ExecutionCall,int,int) -> a
    310:313:void lambda$new$34(neureka.backend.api.ExecutionCall,int,int) -> b
    265:276:neureka.autograd.ADAgent lambda$new$33(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    278:288:neureka.Tsr lambda$new$32(neureka.devices.Device,neureka.Tsr,neureka.Tsr[],int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    261:261:boolean lambda$new$31(neureka.backend.api.ExecutionCall) -> c
    242:251:void lambda$new$30(neureka.backend.api.ExecutionCall) -> d
    204:223:void lambda$new$29(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    217:220:void lambda$new$28(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    211:214:void lambda$new$27(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    193:193:neureka.Tsr lambda$new$26(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    191:191:neureka.autograd.ADAgent lambda$new$25(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    182:185:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$24(neureka.Tsr[],double,int) -> a
    185:185:double lambda$new$23(int[]) -> a
    185:185:double lambda$new$22(int[]) -> b
    184:184:double lambda$new$21(double[],neureka.ndim.config.NDConfiguration,double,int[]) -> a
    175:177:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$20(neureka.Tsr[],double,int) -> b
    177:177:double lambda$new$19(neureka.ndim.iterators.NDIterator) -> a
    177:177:double lambda$new$18(neureka.ndim.iterators.NDIterator) -> b
    176:176:double lambda$new$17(double[],double,neureka.ndim.iterators.NDIterator) -> a
    155:164:void lambda$new$16(neureka.backend.api.ExecutionCall) -> e
    114:127:void lambda$new$15(neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.Operation$DefaultOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    128:134:void lambda$new$14(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> a
    119:125:void lambda$new$13(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$DefaultOperatorCreator,int,int) -> b
    103:103:neureka.autograd.ADAgent lambda$new$12(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> c
    91:97:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$11(neureka.Tsr[],int) -> a
    97:97:double lambda$new$10(int,int[]) -> a
    96:96:double lambda$new$9(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[]) -> a
    83:87:neureka.backend.api.Operation$SecondaryNDIConsumer lambda$new$8(neureka.Tsr[],int) -> b
    87:87:double lambda$new$7(int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    86:86:double lambda$new$6(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    48:57:neureka.backend.api.Operation$TertiaryNDAConsumer lambda$static$5(neureka.Tsr[],int) -> c
    57:57:double lambda$static$4(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int,int[],int[],int[]) -> a
    53:53:double lambda$static$3(double[],neureka.ndim.config.NDConfiguration,double[],neureka.ndim.config.NDConfiguration,int[],int[],int[]) -> a
    31:38:neureka.backend.api.Operation$TertiaryNDIConsumer lambda$static$2(neureka.Tsr[],int) -> d
    38:38:double lambda$static$1(double[],double[],int,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    34:34:double lambda$static$0(double[],double[],neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator,neureka.ndim.iterators.NDIterator) -> a
    27:46:void <clinit>() -> <clinit>
neureka.backend.standard.operations.operator.SubtractionConv -> neureka.backend.standard.operations.operator.SubtractionConv:
    10:20:void <init>() -> <init>
    24:31:java.lang.String stringify(java.lang.String[]) -> stringify
    36:36:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    41:41:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.SubtractionLeftConv -> neureka.backend.standard.operations.operator.SubtractionLeftConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.operator.SubtractionRightConv -> neureka.backend.standard.operations.operator.SubtractionRightConv:
    10:20:void <init>() -> <init>
    24:24:java.lang.String stringify(java.lang.String[]) -> stringify
    29:29:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    34:34:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
neureka.backend.standard.operations.other.CopyLeft -> neureka.backend.standard.operations.other.CopyLeft:
    22:185:void <init>() -> <init>
    190:195:java.lang.String stringify(java.lang.String[]) -> stringify
    200:200:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    205:205:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    177:182:void lambda$new$18(neureka.backend.api.ExecutionCall) -> a
    166:171:void lambda$new$17(neureka.backend.api.ExecutionCall) -> b
    145:151:neureka.backend.api.ExecutionCall lambda$new$16(neureka.backend.api.ExecutionCall) -> c
    139:139:neureka.autograd.ADAgent lambda$new$15(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    136:136:boolean lambda$new$14(neureka.backend.api.ExecutionCall) -> d
    135:135:boolean lambda$new$13(neureka.backend.api.ExecutionCall) -> e
    119:128:void lambda$new$12(neureka.backend.api.ExecutionCall) -> f
    88:106:void lambda$new$11(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    100:103:void lambda$new$10(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> a
    94:97:void lambda$new$9(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,double,int,int) -> b
    74:76:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$8(neureka.Tsr[],double,int) -> a
    75:75:double lambda$new$7(double[],neureka.Tsr[],double,int[]) -> a
    67:69:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$6(neureka.Tsr[],double,int) -> b
    68:68:double lambda$new$5(double[],double,neureka.ndim.iterators.NDIterator) -> a
    52:60:neureka.backend.api.ExecutionCall lambda$new$4(neureka.backend.api.ExecutionCall) -> g
    46:46:neureka.autograd.ADAgent lambda$new$3(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> b
    43:43:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> h
    42:42:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> i
    37:39:float lambda$new$0(neureka.backend.api.ExecutionCall) -> j
neureka.backend.standard.operations.other.CopyRight -> neureka.backend.standard.operations.other.CopyRight:
    21:95:void <init>() -> <init>
    99:106:java.lang.String stringify(java.lang.String[]) -> stringify
    111:111:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    116:116:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    80:92:void lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    61:74:void lambda$new$4(neureka.backend.api.ExecutionCall) -> b
    42:48:neureka.backend.api.ExecutionCall lambda$new$3(neureka.backend.api.ExecutionCall) -> c
    37:37:neureka.autograd.ADAgent lambda$new$2(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    34:34:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> d
    33:33:boolean lambda$new$0(neureka.backend.api.ExecutionCall) -> e
neureka.backend.standard.operations.other.DimFit -> neureka.backend.standard.operations.other.DimFit:
    boolean $assertionsDisabled -> a
    21:114:void <init>() -> <init>
    119:123:java.lang.String stringify(java.lang.String[]) -> stringify
    128:128:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    133:133:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    107:107:neureka.backend.api.ExecutionCall lambda$new$5(neureka.backend.api.ExecutionCall) -> a
    57:94:neureka.Tsr lambda$new$4(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    43:49:neureka.autograd.ADAgent lambda$new$3(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    36:36:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    35:35:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    34:34:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    16:16:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.DimTrim -> neureka.backend.standard.operations.other.DimTrim:
    boolean $assertionsDisabled -> a
    26:85:void <init>() -> <init>
    88:127:neureka.Tsr _pad(neureka.Tsr,int[],boolean) -> a
    132:161:neureka.Tsr _trim(neureka.Tsr,int[],boolean) -> b
    167:171:java.lang.String stringify(java.lang.String[]) -> stringify
    176:176:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    181:181:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    156:156:int lambda$_trim$17(java.lang.Integer) -> a
    155:155:int lambda$_trim$16(java.lang.Integer) -> b
    154:154:int lambda$_trim$15(java.lang.Integer) -> c
    153:153:int lambda$_trim$14(java.lang.Integer) -> d
    152:152:int lambda$_trim$13(java.lang.Integer) -> e
    124:124:int lambda$_pad$12(java.lang.Integer) -> f
    123:123:int lambda$_pad$11(java.lang.Integer) -> g
    122:122:int lambda$_pad$10(java.lang.Integer) -> h
    121:121:int lambda$_pad$9(java.lang.Integer) -> i
    120:120:int lambda$_pad$8(java.lang.Integer) -> j
    82:82:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    65:78:neureka.Tsr lambda$new$6(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    46:59:neureka.autograd.ADAgent lambda$new$5(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    59:59:neureka.Tsr lambda$new$4(int,int,neureka.autograd.GraphNode,neureka.Tsr) -> a
    55:57:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    42:42:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    41:41:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    40:40:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
    21:21:void <clinit>() -> <clinit>
neureka.backend.standard.operations.other.Randomization -> neureka.backend.standard.operations.other.Randomization:
    24:119:void <init>() -> <init>
    123:127:java.lang.String stringify(java.lang.String[]) -> stringify
    132:132:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    137:137:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    90:104:void lambda$new$10(neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.Operation$ScalarOperatorCreator,neureka.backend.api.ExecutionCall) -> a
    105:111:void lambda$new$9(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,int,int) -> a
    95:101:void lambda$new$8(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation$ScalarOperatorCreator,int,int) -> b
    75:78:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    70:70:neureka.autograd.ADAgent lambda$new$6(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    58:65:boolean lambda$new$5(neureka.backend.api.ExecutionCall) -> b
    55:55:boolean lambda$new$4(neureka.backend.api.ExecutionCall) -> c
    46:46:neureka.backend.api.Operation$PrimaryNDAConsumer lambda$new$3(neureka.Tsr[],double,int) -> a
    47:51:double lambda$new$2(double,int[]) -> a
    36:36:neureka.backend.api.Operation$PrimaryNDIConsumer lambda$new$1(neureka.Tsr[],double,int) -> b
    37:42:double lambda$new$0(double,neureka.ndim.iterators.NDIterator) -> a
neureka.backend.standard.operations.other.Reshape -> neureka.backend.standard.operations.other.Reshape:
    27:78:void <init>() -> <init>
    83:92:neureka.Tsr reshaped(neureka.Tsr,int[],boolean) -> reshaped
    97:111:int[] invert(int[]) -> invert
    116:144:java.lang.String stringify(java.lang.String[]) -> stringify
    149:149:java.lang.String asDerivative(neureka.calculus.Function[],int) -> asDerivative
    155:155:double calculate(double[],int,int,neureka.calculus.Function[]) -> calculate
    120:122:java.lang.Boolean lambda$stringify$8(java.lang.String) -> a
    70:70:neureka.backend.api.ExecutionCall lambda$new$7(neureka.backend.api.ExecutionCall) -> a
    58:67:neureka.Tsr lambda$new$6(neureka.calculus.implementations.FunctionNode,neureka.backend.api.ExecutionCall) -> a
    47:52:neureka.autograd.ADAgent lambda$new$5(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    52:52:neureka.Tsr lambda$new$4(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    51:51:neureka.Tsr lambda$new$3(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> b
    42:42:boolean lambda$new$2(neureka.backend.api.ExecutionCall) -> b
    41:41:boolean lambda$new$1(neureka.backend.api.ExecutionCall) -> c
    40:40:float lambda$new$0(neureka.backend.api.ExecutionCall) -> d
neureka.calculus.Cache -> neureka.calculus.Cache:
    java.util.Map _functionCache -> a
    43:47:void <init>() -> <init>
    50:55:void put(neureka.calculus.Function) -> put
    58:59:neureka.calculus.Function get(java.lang.String,boolean) -> get
    63:64:boolean has(java.lang.String,boolean) -> has
neureka.calculus.CalcUtil -> neureka.calculus.CalcUtil:
    org.slf4j.Logger _LOG -> a
    31:31:void <init>() -> <init>
    41:41:neureka.Tsr defaultRecursiveExecution(neureka.calculus.Function,neureka.backend.api.ExecutionCall) -> defaultRecursiveExecution
    50:57:neureka.Tsr executeFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor) -> executeFor
    1069:1103:neureka.Tsr _deepActivation(neureka.backend.api.ExecutionCall,neureka.calculus.Function[],neureka.backend.api.Operation,boolean,boolean,neureka.calculus.RecursiveExecutor):69:103 -> executeFor
    1069:1103:neureka.Tsr executeFor(neureka.calculus.Function,neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor):55 -> executeFor
    143:246:neureka.Tsr _deepDerivative(neureka.backend.api.ExecutionCall,neureka.calculus.Function[],neureka.backend.api.Operation,neureka.calculus.RecursiveExecutor) -> a
    253:295:void recursiveExecution(neureka.backend.api.ExecutionCall,neureka.calculus.RecursiveExecutor) -> recursiveExecution
    321:377:neureka.Tsr _recursiveReductionOf(neureka.backend.api.ExecutionCall,java.util.function.Consumer,neureka.calculus.RecursiveExecutor) -> a
    385:410:neureka.Tsr[] srcActivation(neureka.Tsr[],int,int,int,neureka.calculus.Function[]) -> srcActivation
    361:361:neureka.Tsr lambda$_recursiveReductionOf$6(java.util.function.Consumer,neureka.calculus.RecursiveExecutor,neureka.backend.api.ExecutionCall) -> a
    343:343:void lambda$_recursiveReductionOf$5(neureka.Tsr) -> a
    337:341:void lambda$_recursiveReductionOf$4(neureka.devices.Device,neureka.Tsr) -> a
    263:292:void lambda$recursiveExecution$3(neureka.backend.api.ExecutionCall) -> a
    144:226:neureka.Tsr lambda$_deepDerivative$2(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation,neureka.calculus.Function[],neureka.calculus.RecursiveExecutor) -> a
    1119:1133:int _indexOfFoundDerivative(neureka.Tsr[]):119:133 -> a
    1119:1133:neureka.Tsr lambda$_deepDerivative$2(neureka.backend.api.ExecutionCall,neureka.backend.api.Operation,neureka.calculus.Function[],neureka.calculus.RecursiveExecutor):172 -> a
    87:87:java.lang.String[] lambda$_deepActivation$1(int) -> a
    87:87:java.lang.String lambda$_deepActivation$0(int) -> b
    34:34:void <clinit>() -> <clinit>
neureka.calculus.CallExecutor -> neureka.calculus.CallExecutor:
    neureka.Tsr execute(neureka.backend.api.ExecutionCall) -> execute
neureka.calculus.Function -> neureka.calculus.Function:
    81:81:neureka.calculus.Function of(java.lang.String) -> of
    95:95:neureka.calculus.Function of(java.lang.String,boolean) -> of
    neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    boolean isDoingAD() -> isDoingAD
    boolean isFlat() -> isFlat
    neureka.backend.api.Operation getOperation() -> getOperation
    boolean dependsOn(int) -> dependsOn
    neureka.calculus.Function getDerivative(int) -> getDerivative
    java.util.List getSubFunctions() -> getSubFunctions
    136:141:java.util.List getAllFunctions() -> getAllFunctions
    145:151:int numberOfArgs() -> numberOfArgs
    156:156:double call(double) -> call
    157:157:double invoke(double) -> invoke
    double call(double[],int) -> call
    162:162:double invoke(double[],int) -> invoke
    165:165:double call(double[]) -> call
    166:166:double invoke(double[]) -> invoke
    double derive(double[],int,int) -> derive
    double derive(double[],int) -> derive
    175:175:neureka.Tsr call(neureka.backend.api.Call$Builder) -> call
    176:176:neureka.Tsr invoke(neureka.backend.api.Call$Builder) -> invoke
    178:182:neureka.Tsr execute(neureka.backend.api.Call) -> execute
    191:191:neureka.calculus.Function$CallOptions callWith(neureka.calculus.args.Arg[]) -> callWith
    194:194:neureka.calculus.Function$CallOptions callWith(neureka.calculus.args.Args) -> callWith
    201:201:neureka.Tsr call(neureka.calculus.args.Args,neureka.Tsr[]) -> call
    202:202:neureka.Tsr invoke(neureka.calculus.args.Args,neureka.Tsr[]) -> invoke
    neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    205:205:neureka.Tsr execute(neureka.Tsr[]) -> execute
    206:206:neureka.Tsr execute(neureka.Tsr[],int) -> execute
    207:207:neureka.Tsr executeDerive(neureka.Tsr[],int,int) -> executeDerive
    208:208:neureka.Tsr executeDerive(neureka.Tsr[],int) -> executeDerive
    212:212:neureka.Tsr call(neureka.Tsr) -> call
    213:213:neureka.Tsr invoke(neureka.Tsr) -> invoke
    215:215:neureka.Tsr call(java.util.List) -> call
    216:216:neureka.Tsr invoke(java.util.List) -> invoke
    220:220:neureka.Tsr call(neureka.Tsr[],int) -> call
    221:221:neureka.Tsr invoke(neureka.Tsr[],int) -> invoke
    223:223:neureka.Tsr call(neureka.Tsr[]) -> call
    224:224:neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    228:228:neureka.Tsr derive(neureka.Tsr[],int,int) -> derive
    229:229:neureka.Tsr derive(neureka.Tsr[],int) -> derive
    233:233:neureka.Tsr derive(java.util.List,int,int) -> derive
    234:234:neureka.Tsr derive(java.util.List,int) -> derive
    java.lang.String toString() -> toString
    148:148:neureka.calculus.implementations.FunctionInput lambda$numberOfArgs$1(neureka.calculus.Function) -> a
    147:147:boolean lambda$numberOfArgs$0(neureka.calculus.Function) -> b
neureka.calculus.Function$1 -> neureka.calculus.Function$1:
    neureka.calculus.args.Args val$arguments -> a
    neureka.calculus.Function this$0 -> b
    194:194:void <init>(neureka.calculus.Function,neureka.calculus.args.Args) -> <init>
    195:195:neureka.Tsr call(neureka.Tsr[]) -> call
    196:196:neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    197:197:neureka.Tsr execute(neureka.Tsr[]) -> execute
neureka.calculus.Function$CallOptions -> neureka.calculus.Function$CallOptions:
    neureka.Tsr call(neureka.Tsr[]) -> call
    neureka.Tsr invoke(neureka.Tsr[]) -> invoke
    neureka.Tsr execute(neureka.Tsr[]) -> execute
neureka.calculus.Functions -> neureka.calculus.Functions:
    neureka.calculus.Function dimTrim -> a
    neureka.calculus.Function idy -> b
    neureka.calculus.Function conv -> c
    neureka.calculus.Function plus -> d
    neureka.calculus.Function plusAssign -> e
    neureka.calculus.Function minus -> f
    neureka.calculus.Function minusAssign -> g
    neureka.calculus.Function div -> h
    neureka.calculus.Function divAssign -> i
    neureka.calculus.Function pow -> j
    neureka.calculus.Function powAssign -> k
    neureka.calculus.Function mul -> l
    neureka.calculus.Function mulAssign -> m
    neureka.calculus.Function add -> n
    neureka.calculus.Function addAssign -> o
    neureka.calculus.Function mod -> p
    neureka.calculus.Function modAssign -> q
    neureka.calculus.Function neg -> r
    neureka.calculus.Function matMul -> s
    26:46:void <init>(boolean) -> <init>
    49:49:neureka.calculus.Function getDimTrim() -> getDimTrim
    51:51:neureka.calculus.Function getIdy() -> getIdy
    53:53:neureka.calculus.Function getConv() -> getConv
    55:55:neureka.calculus.Function getPlus() -> getPlus
    57:57:neureka.calculus.Function getPlusAssign() -> getPlusAssign
    59:59:neureka.calculus.Function getMinus() -> getMinus
    61:61:neureka.calculus.Function getMinusAssign() -> getMinusAssign
    63:63:neureka.calculus.Function getDiv() -> getDiv
    65:65:neureka.calculus.Function getDivAssign() -> getDivAssign
    67:67:neureka.calculus.Function getPow() -> getPow
    69:69:neureka.calculus.Function getPowAssign() -> getPowAssign
    71:71:neureka.calculus.Function getMul() -> getMul
    73:73:neureka.calculus.Function getMulAssign() -> getMulAssign
    75:75:neureka.calculus.Function getAdd() -> getAdd
    77:77:neureka.calculus.Function getAddAssign() -> getAddAssign
    79:79:neureka.calculus.Function getMod() -> getMod
    81:81:neureka.calculus.Function getModAssign() -> getModAssign
    83:83:neureka.calculus.Function getNeg() -> getNeg
    86:86:neureka.calculus.Function dimTrim() -> dimTrim
    90:90:neureka.calculus.Function idy() -> idy
    94:94:neureka.calculus.Function conv() -> conv
    98:98:neureka.calculus.Function plus() -> plus
    102:102:neureka.calculus.Function plusAssign() -> plusAssign
    106:106:neureka.calculus.Function minus() -> minus
    110:110:neureka.calculus.Function minusAssign() -> minusAssign
    114:114:neureka.calculus.Function div() -> div
    118:118:neureka.calculus.Function divAssign() -> divAssign
    122:122:neureka.calculus.Function pow() -> pow
    126:126:neureka.calculus.Function powAssign() -> powAssign
    130:130:neureka.calculus.Function mul() -> mul
    134:134:neureka.calculus.Function mulAssign() -> mulAssign
    138:138:neureka.calculus.Function add() -> add
    142:142:neureka.calculus.Function addAssign() -> addAssign
    146:146:neureka.calculus.Function mod() -> mod
    150:150:neureka.calculus.Function modAssign() -> modAssign
    154:154:neureka.calculus.Function neg() -> neg
    157:157:neureka.calculus.Function matMul() -> matMul
neureka.calculus.RecursiveExecutor -> neureka.calculus.RecursiveExecutor:
    neureka.Tsr execute(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> execute
neureka.calculus.args.Arg -> neureka.calculus.args.Arg:
    java.lang.Object _value -> a
    11:11:void <init>(java.lang.Object) -> <init>
    13:13:java.lang.Object get() -> get
    17:17:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    69:70:java.lang.String toString() -> toString
neureka.calculus.args.Arg$DerivIdx -> neureka.calculus.args.Arg$DerivIdx:
    37:37:neureka.calculus.args.Arg$DerivIdx of(int) -> of
    38:38:void <init>(int) -> <init>
neureka.calculus.args.Arg$Derivative -> neureka.calculus.args.Arg$Derivative:
    22:22:neureka.calculus.args.Arg$Derivative of(neureka.Tsr) -> of
    23:23:void <init>(neureka.Tsr) -> <init>
neureka.calculus.args.Arg$Ends -> neureka.calculus.args.Arg$Ends:
    42:42:neureka.calculus.args.Arg$Ends of(int[]) -> of
    43:43:void <init>(int[]) -> <init>
neureka.calculus.args.Arg$MinRank -> neureka.calculus.args.Arg$MinRank:
    63:63:neureka.calculus.args.Arg$MinRank of(int) -> of
    64:64:void <init>(int) -> <init>
neureka.calculus.args.Arg$TargetDevice -> neureka.calculus.args.Arg$TargetDevice:
    47:47:neureka.calculus.args.Arg$TargetDevice of(neureka.devices.Device) -> of
    48:48:void <init>(neureka.devices.Device) -> <init>
neureka.calculus.args.Arg$VarIdx -> neureka.calculus.args.Arg$VarIdx:
    58:58:neureka.calculus.args.Arg$VarIdx of(int) -> of
    59:59:void <init>(int) -> <init>
neureka.calculus.args.Args -> neureka.calculus.args.Args:
    6:6:void <init>() -> <init>
    9:13:neureka.calculus.args.Args of(neureka.calculus.args.Arg[]) -> of
    17:18:java.lang.Object valOf(java.lang.Class) -> valOf
    23:23:neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    28:28:neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
neureka.calculus.assembly.FunctionBuilder -> neureka.calculus.assembly.FunctionBuilder:
    org.slf4j.Logger _LOG -> a
    java.util.regex.Pattern variablePattern -> b
    java.util.regex.Pattern inputPattern -> c
    java.util.regex.Pattern constantPattern -> d
    java.util.regex.Pattern reshapePattern -> e
    neureka.backend.api.OperationContext _context -> f
    boolean $assertionsDisabled -> g
    37:37:void <init>(neureka.backend.api.OperationContext) -> <init>
    47:55:neureka.calculus.Function build(neureka.backend.api.Operation,int,boolean) -> build
    65:79:neureka.calculus.Function build(java.lang.String,boolean) -> build
    89:196:neureka.calculus.Function _build(java.lang.String,boolean) -> a
    201:236:neureka.calculus.Function _buildFunction(java.lang.String,boolean) -> b
    245:298:neureka.calculus.Function _buildOperators(java.util.List,java.util.List,boolean) -> a
    302:314:java.util.List _groupAccordingToArity(int,java.util.List,java.lang.String) -> a
    305:305:int lambda$_groupAccordingToArity$2(int) -> a
    52:52:java.lang.String lambda$build$1(int) -> b
    50:50:int lambda$build$0(int) -> c
    20:29:void <clinit>() -> <clinit>
neureka.calculus.assembly.ParseUtil -> neureka.calculus.assembly.ParseUtil:
    boolean $assertionsDisabled -> a
    15:15:void <init>() -> <init>
    19:23:int numberOfOperationsWithin(java.util.List) -> numberOfOperationsWithin
    28:36:java.lang.String parsedOperation(java.lang.String,int) -> parsedOperation
    41:75:java.lang.String findComponentIn(java.lang.String,int) -> findComponentIn
    80:103:java.util.List findParametersIn(java.lang.String,int) -> findParametersIn
    108:110:boolean isAnOperation(java.lang.String) -> isAnOperation
    120:127:java.lang.String groupBy(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> groupBy
    132:132:boolean isForbiddenChar(char) -> a
    138:177:java.lang.String cleanedHeadAndTail(java.lang.String) -> cleanedHeadAndTail
    182:235:java.lang.String unpackAndCorrect(java.lang.String) -> unpackAndCorrect
    246:256:java.lang.String assumptionBasedOn(java.lang.String) -> assumptionBasedOn
    268:302:double similarity(java.lang.String,java.lang.String) -> similarity
    15:15:void <clinit>() -> <clinit>
neureka.calculus.implementations.FunctionConstant -> neureka.calculus.implementations.FunctionConstant:
    double _value -> a
    24:24:void <init>() -> <init>
    28:28:double value() -> value
    33:33:boolean isFlat() -> isFlat
    36:36:boolean isDoingAD() -> isDoingAD
    39:39:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    42:42:boolean dependsOn(int) -> dependsOn
    45:45:neureka.calculus.Function getDerivative(int) -> getDerivative
    48:48:java.util.List getSubFunctions() -> getSubFunctions
    53:66:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    72:72:double call(double[],int) -> call
    75:75:double derive(double[],int) -> derive
    78:78:double derive(double[],int,int) -> derive
    84:87:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    93:93:java.lang.String toString() -> toString
    24:24:neureka.backend.api.Operation getOperation() -> getOperation
neureka.calculus.implementations.FunctionInput -> neureka.calculus.implementations.FunctionInput:
    int _index -> a
    31:31:void <init>() -> <init>
    37:37:boolean providesGradient() -> providesGradient
    42:42:boolean isFlat() -> isFlat
    45:45:boolean isDoingAD() -> isDoingAD
    48:48:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    51:51:boolean dependsOn(int) -> dependsOn
    54:54:neureka.calculus.Function getDerivative(int) -> getDerivative
    57:57:java.util.List getSubFunctions() -> getSubFunctions
    64:81:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    104:107:double call(double[],int) -> call
    111:111:double derive(double[],int) -> derive
    114:114:double derive(double[],int,int) -> derive
    120:125:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    1086:1097:neureka.Tsr _extract(neureka.Tsr):86:97 -> execute
    1086:1097:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):125 -> execute
    131:131:java.lang.String toString() -> toString
    133:133:int index() -> index
    31:31:neureka.backend.api.Operation getOperation() -> getOperation
neureka.calculus.implementations.FunctionNode -> neureka.calculus.implementations.FunctionNode:
    neureka.backend.api.Operation _operation -> a
    boolean _isFlat -> b
    boolean _isDoingAD -> c
    neureka.calculus.Function[] _src -> d
    43:63:void <init>(neureka.backend.api.Operation,java.util.List,boolean) -> <init>
    69:69:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    77:80:java.lang.String toString() -> toString
    86:87:boolean dependsOn(int) -> dependsOn
    91:91:neureka.calculus.Function getDerivative(int) -> getDerivative
    94:94:java.util.List getSubFunctions() -> getSubFunctions
    101:101:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    1200:1218:neureka.Tsr preprocess(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):200:218 -> execute
    1200:1218:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):101 -> execute
    1224:1233:neureka.Tsr commit(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):224:233 -> execute
    1224:1233:neureka.Tsr preprocess(neureka.Tsr[],neureka.calculus.Function,java.util.function.Supplier):214 -> execute
    1224:1233:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]):101 -> execute
    132:135:neureka.Tsr _execute(neureka.backend.api.ExecutionCall) -> a
    175:175:double call(double[],int) -> call
    180:180:double derive(double[],int,int) -> derive
    185:185:double derive(double[],int) -> derive
    188:188:neureka.backend.api.Operation getOperation() -> getOperation
    190:190:boolean isFlat() -> isFlat
    192:192:boolean isDoingAD() -> isDoingAD
    241:245:void attachGraph(neureka.Tsr[],neureka.calculus.Function,neureka.autograd.GraphLock) -> a
    243:243:neureka.Tsr lambda$attachGraph$4(neureka.Tsr) -> a
    105:124:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args) -> a
    2147:2151:neureka.devices.Device _deviceFor(neureka.Tsr[]):147:151 -> a
    2147:2151:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args):108 -> a
    2156:2168:boolean _shareGuestDevice(neureka.Tsr[]):156:168 -> a
    2156:2168:neureka.devices.Device _deviceFor(neureka.Tsr[]):149 -> a
    2156:2168:neureka.Tsr lambda$execute$3(neureka.Tsr[],neureka.calculus.args.Args):108 -> a
    121:121:neureka.Tsr lambda$execute$2(neureka.backend.api.ExecutionCall) -> b
    80:80:java.lang.String[] lambda$toString$1(int) -> a
    79:79:java.lang.String lambda$toString$0(neureka.calculus.Function) -> a
    26:26:void <clinit>() -> <clinit>
neureka.calculus.implementations.FunctionVariable -> neureka.calculus.implementations.FunctionVariable:
    boolean _providesGradient -> a
    27:29:void <init>() -> <init>
    31:31:boolean providesGradient() -> providesGradient
    34:34:boolean isFlat() -> isFlat
    37:37:boolean isDoingAD() -> isDoingAD
    40:40:neureka.backend.api.operations.AbstractOperation getOperation() -> getOperation
    43:43:boolean dependsOn(int) -> dependsOn
    46:46:neureka.calculus.Function getDerivative(int) -> getDerivative
    49:49:java.util.List getSubFunctions() -> getSubFunctions
    55:56:neureka.calculus.Function newBuild(java.lang.String) -> newBuild
    61:66:double call(double[],int) -> call
    70:70:double derive(double[],int) -> derive
    74:75:double derive(double[],int,int) -> derive
    81:99:neureka.Tsr execute(neureka.calculus.args.Args,neureka.Tsr[]) -> execute
    106:106:java.lang.String toString() -> toString
    27:27:neureka.backend.api.Operation getOperation() -> getOperation
neureka.common.composition.AbstractComponentOwner -> neureka.common.composition.AbstractComponentOwner:
    java.util.Map _CLASS_ORDER -> a
    neureka.common.composition.Component[] _components -> b
    76:104:void <init>() -> <init>
    106:106:java.lang.Object _this() -> _this
    109:110:void _setComps(neureka.common.composition.Component[]) -> a
    113:146:void _addOrRemoveComp(neureka.common.composition.Component,boolean) -> a
    149:163:void _remove(neureka.common.composition.Component) -> a
    166:185:void _add(neureka.common.composition.Component) -> b
    199:209:void _transferFrom(neureka.common.composition.AbstractComponentOwner) -> _transferFrom
    215:215:void _deleteComponents() -> _deleteComponents
    229:234:neureka.common.composition.Component get(java.lang.Class) -> get
    248:258:java.util.List getAll(java.lang.Class) -> getAll
    271:274:java.lang.Object remove(java.lang.Class) -> remove
    285:285:boolean has(java.lang.Class) -> has
    300:309:java.lang.Object set(neureka.common.composition.Component) -> set
    313:314:void _set(neureka.common.composition.Component) -> _set
    neureka.common.composition.Component _setOrReject(neureka.common.composition.Component) -> _setOrReject
    neureka.common.composition.Component _removeOrReject(neureka.common.composition.Component) -> _removeOrReject
    358:363:boolean forComponent(java.lang.Class,java.util.function.Consumer) -> forComponent
    76:76:void access$000(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component) -> a
    76:76:void access$100(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component) -> b
    90:99:void <clinit>() -> <clinit>
neureka.common.composition.AbstractComponentOwner$1 -> neureka.common.composition.AbstractComponentOwner$1:
    neureka.common.composition.Component val$component -> a
    boolean[] val$changeExecuted -> b
    neureka.common.composition.AbstractComponentOwner this$0 -> c
    117:117:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component,boolean[]) -> <init>
    118:118:java.lang.Object getOldOwner() -> getOldOwner
    119:119:java.lang.Object getNewOwner() -> getNewOwner
    121:123:boolean executeChange() -> executeChange
neureka.common.composition.AbstractComponentOwner$2 -> neureka.common.composition.AbstractComponentOwner$2:
    neureka.common.composition.Component val$component -> a
    boolean[] val$changeExecuted -> b
    neureka.common.composition.AbstractComponentOwner this$0 -> c
    133:133:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.Component,boolean[]) -> <init>
    134:134:java.lang.Object getOldOwner() -> getOldOwner
    135:135:java.lang.Object getNewOwner() -> getNewOwner
    137:139:boolean executeChange() -> executeChange
neureka.common.composition.AbstractComponentOwner$3 -> neureka.common.composition.AbstractComponentOwner$3:
    neureka.common.composition.AbstractComponentOwner val$other -> a
    neureka.common.composition.AbstractComponentOwner this$0 -> b
    202:202:void <init>(neureka.common.composition.AbstractComponentOwner,neureka.common.composition.AbstractComponentOwner) -> <init>
    203:203:java.lang.Object getOldOwner() -> getOldOwner
    204:204:java.lang.Object getNewOwner() -> getNewOwner
    205:205:boolean executeChange() -> executeChange
neureka.common.composition.Component -> neureka.common.composition.Component:
    boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.common.composition.Component$IsBeing -> neureka.common.composition.Component$IsBeing:
    neureka.common.composition.Component$IsBeing REMOVED -> REMOVED
    neureka.common.composition.Component$IsBeing ADDED -> ADDED
    neureka.common.composition.Component$IsBeing REPLACED -> REPLACED
    neureka.common.composition.Component$IsBeing UPDATED -> UPDATED
    neureka.common.composition.Component$IsBeing[] $VALUES -> a
    20:20:neureka.common.composition.Component$IsBeing[] values() -> values
    20:20:neureka.common.composition.Component$IsBeing valueOf(java.lang.String) -> valueOf
    20:20:void <init>(java.lang.String,int) -> <init>
    20:20:void <clinit>() -> <clinit>
neureka.common.composition.Component$OwnerChangeRequest -> neureka.common.composition.Component$OwnerChangeRequest:
    java.lang.Object getOldOwner() -> getOldOwner
    java.lang.Object getNewOwner() -> getNewOwner
    boolean executeChange() -> executeChange
    64:67:neureka.common.composition.Component$IsBeing type() -> type
neureka.common.functional.Replace -> neureka.common.functional.Replace:
    neureka.common.functional.With replace(java.lang.Object) -> replace
neureka.common.functional.With -> neureka.common.functional.With:
    java.lang.Object with(java.lang.Object) -> with
neureka.devices.AbstractBaseDevice -> neureka.devices.AbstractBaseDevice:
    47:47:void <init>() -> <init>
    51:53:int size() -> size
    58:58:boolean isEmpty() -> isEmpty
    63:63:boolean contains(neureka.Tsr) -> contains
    68:68:java.util.Iterator iterator() -> iterator
    73:73:java.lang.Object[] toArray(java.util.function.IntFunction) -> toArray
    78:78:java.util.Spliterator spliterator() -> spliterator
neureka.devices.AbstractDevice -> neureka.devices.AbstractDevice:
    neureka.devices.DeviceCleaner _CLEANER -> a
    org.slf4j.Logger _log -> _log
    67:67:void <init>() -> <init>
    boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    85:98:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    103:104:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    108:109:void _cleaning(java.lang.Object,java.lang.Runnable) -> _cleaning
    122:125:neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    130:131:neureka.devices.Storage store(neureka.Tsr) -> store
    63:63:void <clinit>() -> <clinit>
neureka.devices.CustomDeviceCleaner -> neureka.devices.a:
    java.lang.ref.ReferenceQueue _referenceQueue -> a
    int _registered -> b
    java.util.List list -> c
    14:20:void <init>() -> <init>
    37:42:void register(java.lang.Object,java.lang.Runnable) -> register
    46:59:void run() -> run
neureka.devices.CustomDeviceCleaner$ReferenceWithCleanup -> neureka.devices.a$a:
    java.lang.Runnable _action -> a
    27:29:void <init>(java.lang.Object,java.lang.Runnable,java.lang.ref.ReferenceQueue) -> <init>
    31:32:void cleanup() -> a
neureka.devices.Device -> neureka.devices.Device:
    82:117:neureka.devices.Device find(java.lang.String) -> find
    void dispose() -> dispose
    neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    boolean has(neureka.Tsr) -> has
    neureka.devices.Device free(neureka.Tsr) -> free
    neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    java.lang.Object valueFor(neureka.Tsr) -> valueFor
    java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    java.util.Collection getTensors() -> getTensors
    java.lang.Object[] toArray(java.util.function.IntFunction) -> toArray
    neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    171:180:neureka.calculus.Function optimizedFunctionOf(neureka.calculus.Function,java.lang.String) -> optimizedFunctionOf
neureka.devices.DeviceCleaner -> neureka.devices.DeviceCleaner:
    6:6:neureka.devices.DeviceCleaner getInstance() -> getInstance
    void register(java.lang.Object,java.lang.Runnable) -> register
neureka.devices.Storage -> neureka.devices.Storage:
    neureka.devices.Storage store(neureka.Tsr) -> store
    neureka.devices.Storage restore(neureka.Tsr) -> restore
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(neureka.Tsr) -> contains
neureka.devices.file.FileDevice -> neureka.devices.file.FileDevice:
    org.slf4j.Logger _LOG -> a
    java.util.Map _DEVICES -> b
    java.util.Map _stored -> c
    java.lang.String _directory -> d
    java.util.List _loadable -> e
    java.util.List _loaded -> f
    boolean $assertionsDisabled -> g
    54:58:neureka.devices.file.FileDevice at(java.lang.String) -> at
    43:64:void <init>(java.lang.String) -> <init>
    71:95:void _updateFolderView() -> a
    97:97:neureka.Tsr load(java.lang.String) -> load
    100:111:neureka.Tsr load(java.lang.String,java.util.Map) -> load
    115:115:neureka.devices.file.FileHead fileHeadOf(neureka.Tsr) -> fileHeadOf
    120:122:void dispose() -> dispose
    126:134:neureka.devices.Device restore(neureka.Tsr) -> restore
    140:155:neureka.devices.Device store(neureka.Tsr) -> store
    160:160:neureka.devices.file.FileDevice store(neureka.Tsr,java.lang.String) -> store
    167:183:neureka.devices.file.FileDevice store(neureka.Tsr,java.lang.String,java.util.Map) -> store
    187:187:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    191:191:boolean has(neureka.Tsr) -> has
    197:206:neureka.devices.Device free(neureka.Tsr) -> free
    211:211:neureka.devices.Device cleaning(neureka.Tsr,java.lang.Runnable) -> cleaning
    216:216:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    221:221:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    226:226:neureka.devices.Device approve(neureka.backend.api.ExecutionCall) -> approve
    231:231:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    236:236:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    241:241:java.util.Collection getTensors() -> getTensors
    246:246:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    251:259:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    264:264:java.lang.String toString() -> toString
    268:268:java.lang.String getDirectory() -> getDirectory
    272:272:java.util.List getLoadable() -> getLoadable
    276:276:java.util.List getLoaded() -> getLoaded
    37:37:neureka.devices.Storage restore(neureka.Tsr) -> restore
    37:37:neureka.devices.Storage store(neureka.Tsr) -> store
    90:94:void lambda$_updateFolderView$0(java.lang.String) -> a
    37:41:void <clinit>() -> <clinit>
neureka.devices.file.FileHead -> neureka.devices.file.FileHead:
    neureka.devices.file.heads.util.HeadFactory FACTORY -> FACTORY
    neureka.Tsr load() -> load
    java.lang.Object free() -> free
    int getValueSize() -> getValueSize
    int getDataSize() -> getDataSize
    int getTotalSize() -> getTotalSize
    java.lang.String getLocation() -> getLocation
    java.lang.String getFileName() -> getFileName
    neureka.dtype.DataType getDataType() -> getDataType
    int[] getShape() -> getShape
    java.lang.String extension() -> extension
    13:13:void <clinit>() -> <clinit>
neureka.devices.file.heads.AbstractFileHead -> neureka.devices.file.heads.AbstractFileHead:
    org.slf4j.Logger _LOG -> _LOG
    java.lang.String _fileName -> _fileName
    int _size -> _size
    23:46:void <init>(java.lang.String) -> <init>
    49:49:int size() -> size
    53:53:boolean isEmpty() -> isEmpty
    57:57:boolean contains(neureka.Tsr) -> contains
    java.lang.Object _loadData() -> _loadData
    65:72:java.io.File _loadFile() -> _loadFile
    77:89:java.io.FileInputStream _loadFileInputStream() -> _loadFileInputStream
    95:101:java.lang.Object free() -> free
    106:106:java.lang.String getLocation() -> getLocation
    111:112:java.lang.String getFileName() -> getFileName
    118:124:neureka.devices.Storage restore(neureka.Tsr) -> restore
neureka.devices.file.heads.CSVHead -> neureka.devices.file.heads.CSVHead:
    java.lang.String _tensorName -> a
    java.lang.String _delimiter -> b
    boolean _firstRowIsLabels -> c
    java.lang.String[] _colLabels -> d
    boolean _firstColIsIndex -> e
    java.lang.String[] _rowLabels -> f
    java.lang.Integer _numberOfRows -> g
    java.lang.Integer _numberOfColumns -> h
    java.lang.Integer _numberOfBytes -> i
    java.lang.ref.WeakReference _rawData -> j
    boolean $assertionsDisabled -> k
    37:85:void <init>(neureka.Tsr,java.lang.String) -> <init>
    37:101:void <init>(java.lang.String,java.util.Map) -> <init>
    104:176:java.lang.String[] _lazyLoad() -> a
    180:183:void _parseTensorNameFromFileName() -> b
    187:187:neureka.devices.Storage store(neureka.Tsr) -> store
    192:192:java.lang.Object _loadData() -> _loadData
    197:227:neureka.Tsr load() -> load
    231:232:java.lang.String getTensorName() -> getTensorName
    238:240:int getValueSize() -> getValueSize
    245:247:int getDataSize() -> getDataSize
    252:252:int getTotalSize() -> getTotalSize
    257:257:neureka.dtype.DataType getDataType() -> getDataType
    262:262:int[] getShape() -> getShape
    267:267:java.lang.String extension() -> extension
    271:271:java.lang.String getDelimiter() -> getDelimiter
    275:275:boolean isFirstRowIsLabels() -> isFirstRowIsLabels
    279:279:java.lang.String[] getColLabels() -> getColLabels
    283:283:boolean isFirstColIsIndex() -> isFirstColIsIndex
    287:287:java.lang.String[] getRowLabels() -> getRowLabels
    291:291:java.lang.Integer getNumberOfRows() -> getNumberOfRows
    295:295:java.lang.Integer getNumberOfColumns() -> getNumberOfColumns
    24:28:void <clinit>() -> <clinit>
neureka.devices.file.heads.IDXHead -> neureka.devices.file.heads.IDXHead:
    neureka.dtype.DataType _dataType -> a
    int _dataOffset -> b
    int _valueSize -> c
    int[] _shape -> d
    java.util.Map TYPE_MAP -> e
    java.util.Map CODE_MAP -> f
    boolean $assertionsDisabled -> g
    59:66:void <init>(java.lang.String) -> <init>
    1078:1101:void _loadHead():78:101 -> <init>
    1078:1101:void <init>(java.lang.String):61 -> <init>
    69:74:void <init>(neureka.Tsr,java.lang.String) -> <init>
    107:152:neureka.devices.file.heads.IDXHead store(neureka.Tsr) -> store
    157:170:java.lang.Object _loadData() -> _loadData
    176:180:neureka.Tsr load() -> load
    185:188:int getDataSize() -> getDataSize
    193:193:int getTotalSize() -> getTotalSize
    198:198:java.lang.String extension() -> extension
    203:203:neureka.dtype.DataType getDataType() -> getDataType
    207:207:int getValueSize() -> getValueSize
    211:211:int[] getShape() -> getShape
    26:26:neureka.devices.Storage store(neureka.Tsr) -> store
    26:51:void <clinit>() -> <clinit>
neureka.devices.file.heads.JPEGHead -> neureka.devices.file.heads.JPEGHead:
    int _width -> a
    int _height -> b
    boolean $assertionsDisabled -> c
    38:44:void <init>(java.lang.String) -> <init>
    1059:1089:void _loadHead():59:89 -> <init>
    1059:1089:void <init>(java.lang.String):40 -> <init>
    47:54:void <init>(neureka.Tsr,java.lang.String) -> <init>
    93:95:neureka.Tsr load() -> load
    101:121:java.lang.Object _loadData() -> _loadData
    127:127:int getValueSize() -> getValueSize
    132:132:int getDataSize() -> getDataSize
    137:137:int getTotalSize() -> getTotalSize
    142:142:neureka.dtype.DataType getDataType() -> getDataType
    147:147:int[] getShape() -> getShape
    152:152:java.lang.String extension() -> extension
    158:174:neureka.devices.Storage store(neureka.Tsr) -> store
    113:114:void lambda$_loadData$0(short[],neureka.dtype.custom.UI8,byte[],int,int) -> a
    26:30:void <clinit>() -> <clinit>
neureka.devices.file.heads.util.HeadFactory -> neureka.devices.file.heads.util.HeadFactory:
    java.util.Map _LOADERS -> a
    java.util.Map _SAVERS -> b
    28:41:void <init>() -> <init>
    44:44:boolean hasLoader(java.lang.String) -> hasLoader
    48:48:boolean hasSaver(java.lang.String) -> hasSaver
    52:52:neureka.devices.file.heads.util.HeadFactory$Loader getLoader(java.lang.String) -> getLoader
    56:56:neureka.devices.file.heads.util.HeadFactory$Saver getSaver(java.lang.String) -> getSaver
    40:40:neureka.devices.file.FileHead lambda$new$7(java.lang.String,neureka.Tsr,java.util.Map) -> a
    39:39:neureka.devices.file.FileHead lambda$new$6(java.lang.String,neureka.Tsr,java.util.Map) -> b
    38:38:neureka.devices.file.FileHead lambda$new$5(java.lang.String,neureka.Tsr,java.util.Map) -> c
    37:37:neureka.devices.file.FileHead lambda$new$4(java.lang.String,neureka.Tsr,java.util.Map) -> d
    35:35:neureka.devices.file.FileHead lambda$new$3(java.lang.String,java.util.Map) -> a
    34:34:neureka.devices.file.FileHead lambda$new$2(java.lang.String,java.util.Map) -> b
    33:33:neureka.devices.file.FileHead lambda$new$1(java.lang.String,java.util.Map) -> c
    32:32:neureka.devices.file.FileHead lambda$new$0(java.lang.String,java.util.Map) -> d
neureka.devices.file.heads.util.HeadFactory$Loader -> neureka.devices.file.heads.util.HeadFactory$Loader:
    neureka.devices.file.FileHead load(java.lang.String,java.util.Map) -> load
neureka.devices.file.heads.util.HeadFactory$Saver -> neureka.devices.file.heads.util.HeadFactory$Saver:
    neureka.devices.file.FileHead save(java.lang.String,neureka.Tsr,java.util.Map) -> save
neureka.devices.file.heads.util.NumberReader -> neureka.devices.file.heads.util.NumberReader:
    java.io.FileInputStream _fileInputStream -> a
    int _bytesRead -> b
    java.util.Map _byteMap -> c
    boolean $assertionsDisabled -> d
    13:23:void <init>(java.io.FileInputStream) -> <init>
    26:26:java.io.FileInputStream getStream() -> getStream
    30:32:java.lang.Object read(neureka.dtype.NumericType) -> read
    39:39:int bytesRead() -> bytesRead
    10:10:void <clinit>() -> <clinit>
neureka.devices.host.HostCPU -> neureka.devices.host.HostCPU:
    neureka.devices.host.HostCPU _INSTANCE -> a
    neureka.devices.host.HostCPU$NativeExecutor _executor -> b
    java.util.Set _tensors -> c
    34:39:void <init>() -> <init>
    42:42:neureka.devices.host.HostCPU instance() -> instance
    46:46:neureka.devices.host.HostCPU$NativeExecutor getExecutor() -> getExecutor
    52:52:boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    57:58:void dispose() -> dispose
    62:62:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    67:67:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    72:72:java.lang.Number valueFor(neureka.Tsr,int) -> valueFor
    77:77:neureka.devices.Device restore(neureka.Tsr) -> restore
    82:83:neureka.devices.Device store(neureka.Tsr) -> store
    88:90:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    95:95:boolean has(neureka.Tsr) -> has
    100:101:neureka.devices.Device free(neureka.Tsr) -> free
    106:106:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    111:111:java.util.Collection getTensors() -> getTensors
    115:115:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    119:119:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    26:26:neureka.devices.Storage store(neureka.Tsr) -> store
    26:26:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    26:26:neureka.devices.Storage restore(neureka.Tsr) -> restore
    28:31:void <clinit>() -> <clinit>
neureka.devices.host.HostCPU$NativeExecutor -> neureka.devices.host.HostCPU$NativeExecutor:
    java.util.concurrent.ThreadPoolExecutor _pool -> a
    127:131:void <init>(neureka.devices.host.HostCPU) -> <init>
    135:135:java.util.concurrent.ThreadPoolExecutor getPool() -> getPool
    142:166:void threaded(int,neureka.devices.host.HostCPU$Range) -> threaded
    152:154:void lambda$threaded$0(neureka.Neureka,neureka.devices.host.HostCPU$Range,int,int) -> a
neureka.devices.host.HostCPU$Range -> neureka.devices.host.HostCPU$Range:
    void execute(int,int) -> execute
neureka.devices.opencl.CLContext -> neureka.devices.opencl.CLContext:
    org.slf4j.Logger _LOG -> a
    java.util.List _platforms -> b
    34:40:void <init>() -> <init>
    45:45:java.util.List getPlatforms() -> getPlatforms
    57:60:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    1069:1081:java.util.List _findLoadAndCompileForAllPlatforms():69:81 -> update
    1069:1081:boolean update(neureka.common.composition.Component$OwnerChangeRequest):58 -> update
    32:32:void <clinit>() -> <clinit>
neureka.devices.opencl.KernelCaller -> neureka.devices.opencl.KernelCaller:
    org.jocl.cl_command_queue _queue -> a
    org.jocl.cl_kernel _kernel -> b
    java.util.List _inputs -> c
    int _argId -> d
    boolean $assertionsDisabled -> e
    24:35:void <init>(org.jocl.cl_kernel,org.jocl.cl_command_queue) -> <init>
    44:47:neureka.devices.opencl.KernelCaller passAllOf(neureka.Tsr) -> passAllOf
    60:62:neureka.devices.opencl.KernelCaller passConfOf(neureka.Tsr) -> passConfOf
    72:75:neureka.devices.opencl.KernelCaller pass(neureka.Tsr) -> pass
    84:86:neureka.devices.opencl.KernelCaller pass(int) -> pass
    95:97:neureka.devices.opencl.KernelCaller pass(float) -> pass
    106:121:void call(int) -> call
    125:141:void call(long[],long[]) -> call
    145:151:void _releaseEvents(neureka.Tsr[]) -> a
    155:162:org.jocl.cl_event[] _getWaitList(neureka.Tsr[]) -> b
    18:18:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice -> neureka.devices.opencl.OpenCLDevice:
    org.slf4j.Logger _LOG -> a
    java.util.Map _adhocKernels -> b
    neureka.devices.opencl.OpenCLDevice$cl_ad_hoc[] _adhocKernelRingBuffer -> c
    int _ringIndex -> d
    java.util.Set _tensors -> e
    org.jocl.cl_device_id _deviceId -> f
    neureka.devices.opencl.OpenCLPlatform _platform -> g
    org.jocl.cl_command_queue _queue -> h
    88:89:neureka.devices.opencl.OpenCLDevice newInstanceOf(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> newInstanceOf
    93:93:java.lang.String toString() -> toString
    97:97:org.jocl.cl_device_id getDeviceId() -> getDeviceId
    101:101:neureka.devices.opencl.OpenCLPlatform getPlatform() -> getPlatform
    182:235:void <init>(neureka.devices.opencl.OpenCLPlatform,org.jocl.cl_device_id) -> <init>
    238:238:boolean hasAdHocKernel(java.lang.String) -> hasAdHocKernel
    242:244:neureka.devices.opencl.KernelCaller getAdHocKernel(java.lang.String) -> getAdHocKernel
    263:321:neureka.devices.opencl.OpenCLDevice compileAdHocKernel(java.lang.String,java.lang.String) -> compileAdHocKernel
    333:336:java.util.Collection getTensors() -> getTensors
    341:341:neureka.backend.api.Operation optimizedOperationOf(neureka.calculus.Function,java.lang.String) -> optimizedOperationOf
    349:351:void dispose() -> dispose
    365:377:neureka.devices.Device restore(neureka.Tsr) -> restore
    382:383:neureka.devices.Device store(neureka.Tsr,neureka.Tsr) -> store
    1387:1390:neureka.devices.Device _store(neureka.Tsr,neureka.Tsr,java.lang.Runnable):387:390 -> store
    1387:1390:neureka.devices.Device store(neureka.Tsr,neureka.Tsr):382 -> store
    395:475:void _add(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr,java.lang.Runnable) -> a
    487:487:boolean has(neureka.Tsr) -> has
    494:529:void _store(neureka.Tsr,neureka.devices.opencl.OpenCLDevice$cl_tsr,int) -> a
    534:539:neureka.devices.Device free(neureka.Tsr) -> free
    545:547:neureka.devices.Device write(neureka.Tsr,java.lang.Object) -> write
    553:571:neureka.devices.Device overwrite64(neureka.Tsr,double[]) -> overwrite64
    577:596:neureka.devices.Device overwrite32(neureka.Tsr,float[]) -> overwrite32
    602:607:neureka.devices.Device swap(neureka.Tsr,neureka.Tsr) -> swap
    612:619:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    1623:1627:void _updateInternal(neureka.Tsr,java.lang.Runnable):623:627 -> update
    1623:1627:boolean update(neureka.common.composition.Component$OwnerChangeRequest):615 -> update
    630:631:double[] value64f(neureka.Tsr) -> value64f
    636:650:double[] _value64f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> a
    655:656:float[] value32f(neureka.Tsr) -> value32f
    660:675:float[] _value32f(neureka.devices.opencl.OpenCLDevice$cl_tsr,int,int) -> b
    680:680:java.lang.Object valueFor(neureka.Tsr) -> valueFor
    685:685:java.lang.Number valueFor(neureka.Tsr,int) -> valueFor
    689:690:double value64f(neureka.Tsr,int) -> value64f
    694:695:float value32f(neureka.Tsr,int) -> value32f
    700:708:neureka.devices.opencl.KernelCaller getKernel(neureka.backend.api.ExecutionCall) -> getKernel
    714:714:boolean _approveExecutionOf(neureka.Tsr[],int,neureka.backend.api.Operation) -> _approveExecutionOf
    749:749:java.lang.String name() -> name
    753:753:java.lang.String vendor() -> vendor
    757:757:java.lang.String version() -> version
    761:770:java.lang.String type() -> type
    774:774:int maxComputeUnits() -> maxComputeUnits
    778:778:long maxWorkItemSimensions() -> maxWorkItemSimensions
    782:782:long[] maxWorkItemSizes() -> maxWorkItemSizes
    786:786:long maxWorkGroupSize() -> maxWorkGroupSize
    790:790:long maxClockFrequenzy() -> maxClockFrequenzy
    794:794:int maxAddressBits() -> maxAddressBits
    798:798:long maxMemAllocSize() -> maxMemAllocSize
    802:802:long globalMemSize() -> globalMemSize
    806:806:int errorCorrectionSupport() -> errorCorrectionSupport
    810:810:int localMemType() -> localMemType
    814:814:long localMemSize() -> localMemSize
    818:818:long maxConstantBufferSize() -> maxConstantBufferSize
    822:822:long maxConstantBufferSizeKB() -> maxConstantBufferSizeKB
    836:836:int imageSupport() -> imageSupport
    840:840:int maxReadImageArgs() -> maxReadImageArgs
    844:844:int maxWriteImageArgs() -> maxWriteImageArgs
    848:848:long singleFPConfig() -> singleFPConfig
    852:852:long image2DMaxWidth() -> image2DMaxWidth
    856:856:long image2DMaxHeight() -> image2DMaxHeight
    860:860:long image3DMaxWidth() -> image3DMaxWidth
    864:864:long image3DMaxHeight() -> image3DMaxHeight
    868:868:long image3DMaxDepth() -> image3DMaxDepth
    872:872:int prefVecWidthChar() -> prefVecWidthChar
    876:876:int prefVecWidthShort() -> prefVecWidthShort
    880:880:int prefVecWidthInt() -> prefVecWidthInt
    884:884:int prefVecWidthLong() -> prefVecWidthLong
    888:888:int prefVecWidthFloat() -> prefVecWidthFloat
    892:892:int prefVecWidthDouble() -> prefVecWidthDouble
    82:82:java.lang.Object valueFor(neureka.Tsr,int) -> valueFor
    82:82:neureka.devices.Storage restore(neureka.Tsr) -> restore
    469:469:neureka.Tsr lambda$_add$7(neureka.backend.api.ExecutionCall,neureka.calculus.CallExecutor) -> a
    441:441:void lambda$_add$6(org.jocl.cl_mem) -> a
    410:412:void lambda$_add$5(org.jocl.cl_event,org.jocl.cl_mem) -> a
    382:382:void lambda$store$4(neureka.Tsr) -> a
    335:335:void lambda$getTensors$3(java.util.Collection,java.util.Collection) -> a
    335:335:void lambda$getTensors$2(java.util.Collection,neureka.Tsr) -> a
    318:320:void lambda$compileAdHocKernel$1(org.jocl.cl_kernel,org.jocl.cl_program) -> a
    225:225:void lambda$new$0() -> a
    84:84:void <clinit>() -> <clinit>
neureka.devices.opencl.OpenCLDevice$DeviceQuery -> neureka.devices.opencl.OpenCLDevice$DeviceQuery:
    895:895:void <init>() -> <init>
    905:905:int getInt(org.jocl.cl_device_id,int) -> getInt
    917:919:int[] getInts(org.jocl.cl_device_id,int,int) -> getInts
    930:930:long getLong(org.jocl.cl_device_id,int) -> getLong
    942:944:long[] getLongs(org.jocl.cl_device_id,int,int) -> getLongs
    956:964:java.lang.String getString(org.jocl.cl_device_id,int) -> getString
    976:984:java.lang.String getString(org.jocl.cl_platform_id,int) -> getString
    995:995:long getSize(org.jocl.cl_device_id,int) -> getSize
    1009:1027:long[] getSizes(org.jocl.cl_device_id,int,int) -> getSizes
neureka.devices.opencl.OpenCLDevice$cl_ad_hoc -> neureka.devices.opencl.OpenCLDevice$a:
    java.lang.String source -> a
    org.jocl.cl_kernel kernel -> b
    169:169:void <init>() -> <init>
    169:169:void <init>(byte) -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr -> neureka.devices.opencl.OpenCLDevice$cl_tsr:
    int fp -> a
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config config -> b
    neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value value -> c
    118:149:void <init>() -> <init>
    155:156:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_config:
    org.jocl.cl_mem data -> data
    143:143:void <init>() -> <init>
neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value -> neureka.devices.opencl.OpenCLDevice$cl_tsr$cl_value:
    int size -> size
    org.jocl.cl_mem data -> data
    org.jocl.cl_event event -> event
    129:131:void <init>() -> <init>
neureka.devices.opencl.OpenCLPlatform -> neureka.devices.opencl.OpenCLPlatform:
    org.slf4j.Logger _LOG -> a
    org.jocl.cl_platform_id _pid -> b
    org.jocl.cl_context _context -> c
    java.util.Map _id_device -> d
    java.util.Map _kernels -> e
    25:57:void <init>(org.jocl.cl_platform_id) -> <init>
    60:64:void recompile() -> recompile
    69:179:void _compile(org.jocl.cl_device_id[]) -> a
    182:184:java.util.List getDevices() -> getDevices
    191:191:boolean has(org.jocl.cl_device_id) -> has
    194:194:neureka.devices.opencl.OpenCLDevice get(org.jocl.cl_device_id) -> get
    198:199:void put(org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> put
    202:202:java.util.Map getKernels() -> getKernels
    206:206:org.jocl.cl_platform_id getPid() -> getPid
    210:210:org.jocl.cl_context getContext() -> getContext
    183:183:void lambda$getDevices$1(java.util.List,org.jocl.cl_device_id,neureka.devices.opencl.OpenCLDevice) -> a
    130:132:void lambda$_compile$0(java.util.ArrayList,java.util.ArrayList,java.lang.String,java.lang.String) -> a
    19:19:void <clinit>() -> <clinit>
neureka.devices.opencl.utility.CLFunctionCompiler -> neureka.devices.opencl.utility.CLFunctionCompiler:
    neureka.devices.opencl.OpenCLDevice _device -> a
    neureka.calculus.Function _functionToBeOptimized -> b
    java.lang.String _functionName -> c
    int[] _argPointer -> d
    33:43:void <init>(neureka.devices.opencl.OpenCLDevice,neureka.calculus.Function,java.lang.String) -> <init>
    47:96:neureka.backend.api.Operation optimize() -> optimize
    106:202:void _adHocKernelFor(neureka.backend.api.ExecutionCall) -> a
    1226:1238:java.lang.String _readAndGetIndexMapper():226:238 -> a
    1226:1238:void _adHocKernelFor(neureka.backend.api.ExecutionCall):175 -> a
    205:216:java.lang.String _clTypeOf(neureka.Tsr) -> a
    206:208:java.lang.String lambda$_clTypeOf$19(java.lang.Class) -> a
    191:191:java.lang.String lambda$_adHocKernelFor$18(java.util.List,int,int) -> a
    183:183:java.lang.String lambda$_adHocKernelFor$17(java.util.List,int) -> a
    167:169:java.lang.String lambda$_adHocKernelFor$16(java.lang.String,java.lang.String) -> a
    155:155:java.lang.String lambda$_adHocKernelFor$15(java.util.List,int) -> b
    148:150:java.util.List lambda$_adHocKernelFor$14(int[]) -> a
    145:145:int[] lambda$_adHocKernelFor$13(neureka.Tsr) -> b
    121:129:java.lang.String lambda$_adHocKernelFor$12(neureka.Tsr) -> c
    107:107:neureka.Tsr lambda$_adHocKernelFor$11(neureka.backend.api.ExecutionCall,int) -> a
    85:93:neureka.backend.api.ExecutionCall lambda$optimize$10(neureka.backend.api.ExecutionCall) -> b
    77:79:neureka.autograd.ADAgent lambda$optimize$9(neureka.calculus.Function,neureka.backend.api.ExecutionCall,boolean) -> a
    79:79:neureka.Tsr lambda$optimize$8(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> a
    78:78:neureka.Tsr lambda$optimize$7(neureka.calculus.Function,neureka.autograd.GraphNode,neureka.Tsr) -> b
    73:73:boolean lambda$optimize$6(neureka.backend.api.ExecutionCall) -> c
    72:72:boolean lambda$optimize$5(neureka.backend.api.ExecutionCall) -> d
    71:71:float lambda$optimize$4(neureka.backend.api.ExecutionCall) -> e
    61:65:java.lang.String lambda$optimize$3(java.lang.String[]) -> a
    48:48:boolean lambda$optimize$2(neureka.calculus.Function) -> a
    40:40:int lambda$new$1(neureka.calculus.Function) -> b
    39:39:boolean lambda$new$0(neureka.calculus.Function) -> c
neureka.devices.opencl.utility.DeviceQuery -> neureka.devices.opencl.utility.DeviceQuery:
    20:20:void <init>() -> <init>
    29:188:java.lang.String query() -> query
    1276:1284:java.lang.String getString(org.jocl.cl_platform_id,int):276:284 -> query
    1276:1284:java.lang.String query():44 -> query
    200:200:int getInt(org.jocl.cl_device_id,int) -> a
    213:215:int[] getInts(org.jocl.cl_device_id,int,int) -> a
    227:227:long getLong(org.jocl.cl_device_id,int) -> b
    240:242:long[] getLongs(org.jocl.cl_device_id,int,int) -> b
    255:263:java.lang.String getString(org.jocl.cl_device_id,int) -> c
    296:296:long getSize(org.jocl.cl_device_id,int) -> d
    311:330:long[] getSizes(org.jocl.cl_device_id,int,int) -> c
neureka.devices.opencl.utility.DispatchUtility -> neureka.devices.opencl.utility.DispatchUtility:
    boolean $assertionsDisabled -> a
    7:7:void <init>() -> <init>
    12:18:void _revert(int[]) -> a
    21:23:int _productOf(int[]) -> b
    28:154:int[] parseTile(int,int[]) -> parseTile
    1184:1205:int[] _primeFactors(int):184:205 -> parseTile
    1184:1205:int[] parseTile(int,int[]):35 -> parseTile
    2164:2167:int _productOfNewDimension(int[],int,int,int):164:167 -> parseTile
    2164:2167:int[] parseTile(int,int[]):114 -> parseTile
    2176:2179:int _inversionProductOfNewDimension(int[],int[],int,int):176:179 -> parseTile
    2176:2179:int[] parseTile(int,int[]):139 -> parseTile
    219:229:int[] findBestParams(int,int,int,int,int) -> findBestParams
    235:242:int[] bestMatMulMatch(int,int,int,int) -> bestMatMulMatch
    205:205:int lambda$_primeFactors$0(java.lang.Integer) -> a
    7:7:void <clinit>() -> <clinit>
neureka.devices.opencl.utility.WeakTensorReference -> neureka.devices.opencl.utility.WeakTensorReference:
    int _hash -> a
    24:26:void <init>(java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
    29:29:int hashCode() -> hashCode
    33:37:boolean equals(java.lang.Object) -> equals
neureka.dtype.AbstractNumericType -> neureka.dtype.AbstractNumericType:
    java.util.Map _NUMERIC_TYPE_RELATIONS -> a
    21:21:void <init>() -> <init>
    45:45:java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    51:55:void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    31:41:void <clinit>() -> <clinit>
neureka.dtype.DataType -> neureka.dtype.DataType:
    java.util.Map _instances -> a
    org.slf4j.Logger _log -> b
    java.lang.Class _typeClass -> c
    71:83:java.lang.Class _numericTypeRepresentationOf(java.lang.Class) -> a
    88:95:neureka.dtype.DataType of(java.lang.Class) -> of
    100:105:void forType(java.lang.Class,java.util.function.Consumer) -> forType
    111:116:void <init>(java.lang.Class) -> <init>
    123:138:java.lang.Object getTypeClassInstance() -> getTypeClassInstance
    142:142:boolean typeClassImplements(java.lang.Class) -> typeClassImplements
    149:162:java.lang.Object virtualize(java.lang.Object) -> virtualize
    167:197:java.lang.Object actualize(java.lang.Object,int) -> actualize
    202:215:java.lang.Object allocate(int) -> allocate
    220:220:org.slf4j.Logger getLog() -> getLog
    224:234:boolean equals(java.lang.Object) -> equals
    238:244:int hashCode() -> hashCode
    248:248:java.lang.String toString() -> toString
    252:252:java.lang.Class getTypeClass() -> getTypeClass
    256:259:java.lang.Class getJVMTypeClass() -> getJVMTypeClass
    61:61:void <clinit>() -> <clinit>
neureka.dtype.NumericType -> neureka.dtype.NumericType:
    boolean signed() -> signed
    int numberOfBytes() -> numberOfBytes
    java.lang.Class targetType() -> targetType
    java.lang.Class targetArrayType() -> targetArrayType
    java.lang.Class holderType() -> holderType
    java.lang.Class holderArrayType() -> holderArrayType
    java.lang.Class getNumericTypeTarget() -> getNumericTypeTarget
    java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    java.lang.Object toTarget(java.lang.Object) -> toTarget
    byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    void writeDataTo(java.io.DataOutput,java.util.Iterator) -> writeDataTo
    java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
neureka.dtype.custom.F32 -> neureka.dtype.custom.F32:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Float foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    54:54:java.lang.Float toTarget(java.lang.Float) -> toTarget
    59:60:byte[] targetToForeignHolderBytes(java.lang.Float) -> targetToForeignHolderBytes
    70:70:float[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:77:float[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    83:83:float[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    88:88:float[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    94:107:java.lang.Float convertToHolder(java.lang.Object) -> convertToHolder
    112:112:float[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    117:117:java.lang.Float convertToTarget(java.lang.Object) -> convertToTarget
    122:122:float[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.F64 -> neureka.dtype.custom.F64:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Double foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Double toTarget(java.lang.Double) -> toTarget
    60:61:byte[] targetToForeignHolderBytes(java.lang.Double) -> targetToForeignHolderBytes
    75:75:double[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    80:82:double[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:double[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:94:double[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    99:112:java.lang.Double convertToHolder(java.lang.Object) -> convertToHolder
    117:117:double[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    122:122:java.lang.Double convertToTarget(java.lang.Object) -> convertToTarget
    127:127:double[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    131:137:double[] _readFrom(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I16 -> neureka.dtype.custom.I16:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Short toTarget(java.lang.Short) -> toTarget
    61:62:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    67:67:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    72:72:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    77:77:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    82:82:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    87:100:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    105:105:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    110:110:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    115:115:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    119:125:short[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I32 -> neureka.dtype.custom.I32:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:50:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    56:56:java.lang.Integer toTarget(java.lang.Integer) -> toTarget
    61:65:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:71:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    76:76:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    81:81:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    86:86:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    91:104:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    109:109:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    114:114:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    119:119:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    123:129:int[] _readData(java.io.DataInput,int) -> a
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I64 -> neureka.dtype.custom.I64:
    java.nio.ByteBuffer buffer -> a
    13:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:51:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    57:57:java.lang.Long toTarget(java.lang.Long) -> toTarget
    62:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:101:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    106:106:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    111:111:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    116:116:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.I8 -> neureka.dtype.custom.I8:
    18:19:void <init>() -> <init>
    23:23:boolean signed() -> signed
    28:28:int numberOfBytes() -> numberOfBytes
    33:33:java.lang.Class targetType() -> targetType
    38:38:java.lang.Class targetArrayType() -> targetArrayType
    43:43:java.lang.Class holderType() -> holderType
    48:48:java.lang.Class holderArrayType() -> holderArrayType
    53:53:java.lang.Byte foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    58:58:java.lang.Byte toTarget(java.lang.Byte) -> toTarget
    63:63:byte[] targetToForeignHolderBytes(java.lang.Byte) -> targetToForeignHolderBytes
    68:70:byte[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    75:75:byte[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    80:82:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    87:87:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    92:105:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    110:110:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    115:115:java.lang.Byte convertToTarget(java.lang.Object) -> convertToTarget
    120:120:byte[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    15:15:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    15:15:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    15:15:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    15:15:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    15:15:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    15:15:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    15:15:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    15:15:java.lang.Object toTarget(java.lang.Object) -> toTarget
    15:15:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI16 -> neureka.dtype.custom.UI16:
    15:16:void <init>() -> <init>
    20:20:boolean signed() -> signed
    25:25:int numberOfBytes() -> numberOfBytes
    30:30:java.lang.Class targetType() -> targetType
    35:35:java.lang.Class targetArrayType() -> targetArrayType
    40:40:java.lang.Class holderType() -> holderType
    45:45:java.lang.Class holderArrayType() -> holderArrayType
    50:51:java.lang.Integer foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    59:59:java.lang.Integer toTarget(java.lang.Short) -> toTarget
    64:66:byte[] targetToForeignHolderBytes(java.lang.Integer) -> targetToForeignHolderBytes
    71:77:int[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    82:82:int[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    87:87:short[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    92:92:short[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    97:97:java.lang.Short convertToHolder(java.lang.Object) -> convertToHolder
    102:102:short[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    107:107:java.lang.Integer convertToTarget(java.lang.Object) -> convertToTarget
    112:112:int[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI32 -> neureka.dtype.custom.UI32:
    11:11:void <init>() -> <init>
    16:16:boolean signed() -> signed
    21:21:int numberOfBytes() -> numberOfBytes
    26:26:java.lang.Class targetType() -> targetType
    31:31:java.lang.Class targetArrayType() -> targetArrayType
    36:36:java.lang.Class holderType() -> holderType
    41:41:java.lang.Class holderArrayType() -> holderArrayType
    46:47:java.lang.Long foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Long toTarget(java.lang.Integer) -> toTarget
    60:63:byte[] targetToForeignHolderBytes(java.lang.Long) -> targetToForeignHolderBytes
    68:68:long[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    73:73:long[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    78:78:int[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    83:83:int[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    88:88:java.lang.Integer convertToHolder(java.lang.Object) -> convertToHolder
    93:93:int[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    98:98:java.lang.Long convertToTarget(java.lang.Object) -> convertToTarget
    103:103:long[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI64 -> neureka.dtype.custom.UI64:
    14:14:void <init>() -> <init>
    18:18:boolean signed() -> signed
    23:23:int numberOfBytes() -> numberOfBytes
    28:28:java.lang.Class targetType() -> targetType
    33:33:java.lang.Class targetArrayType() -> targetArrayType
    38:38:java.lang.Class holderType() -> holderType
    43:43:java.lang.Class holderArrayType() -> holderArrayType
    49:52:java.math.BigInteger foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    57:57:java.math.BigInteger toTarget(java.lang.Long) -> toTarget
    62:69:byte[] targetToForeignHolderBytes(java.math.BigInteger) -> targetToForeignHolderBytes
    74:74:java.math.BigInteger[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    79:79:java.math.BigInteger[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    84:84:long[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    89:89:long[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    94:94:java.lang.Long convertToHolder(java.lang.Object) -> convertToHolder
    99:99:long[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    104:104:java.math.BigInteger convertToTarget(java.lang.Object) -> convertToTarget
    109:109:java.math.BigInteger[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    11:11:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    11:11:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    11:11:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    11:11:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    11:11:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    11:11:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    11:11:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    11:11:java.lang.Object toTarget(java.lang.Object) -> toTarget
    11:11:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.dtype.custom.UI8 -> neureka.dtype.custom.UI8:
    14:15:void <init>() -> <init>
    19:19:boolean signed() -> signed
    24:24:int numberOfBytes() -> numberOfBytes
    29:29:java.lang.Class targetType() -> targetType
    34:34:java.lang.Class targetArrayType() -> targetArrayType
    39:39:java.lang.Class holderType() -> holderType
    44:44:java.lang.Class holderArrayType() -> holderArrayType
    49:49:java.lang.Short foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
    55:55:java.lang.Short toTarget(java.lang.Byte) -> toTarget
    61:61:byte[] targetToForeignHolderBytes(java.lang.Short) -> targetToForeignHolderBytes
    66:72:short[] readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    77:77:short[] readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    82:88:byte[] readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    93:93:byte[] readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    98:98:java.lang.Byte convertToHolder(java.lang.Object) -> convertToHolder
    103:103:byte[] convertToHolderArray(java.lang.Object) -> convertToHolderArray
    108:121:java.lang.Short convertToTarget(java.lang.Object) -> convertToTarget
    126:126:short[] convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTargetArray(java.lang.Object) -> convertToTargetArray
    10:10:java.lang.Object convertToTarget(java.lang.Object) -> convertToTarget
    10:10:java.lang.Object convertToHolderArray(java.lang.Object) -> convertToHolderArray
    10:10:java.lang.Object convertToHolder(java.lang.Object) -> convertToHolder
    10:10:java.lang.Object readForeignDataFrom(java.util.Iterator,int) -> readForeignDataFrom
    10:10:java.lang.Object readForeignDataFrom(java.io.DataInput,int) -> readForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.util.Iterator,int) -> readAndConvertForeignDataFrom
    10:10:java.lang.Object readAndConvertForeignDataFrom(java.io.DataInput,int) -> readAndConvertForeignDataFrom
    10:10:byte[] targetToForeignHolderBytes(java.lang.Object) -> targetToForeignHolderBytes
    10:10:java.lang.Object toTarget(java.lang.Object) -> toTarget
    10:10:java.lang.Object foreignHolderBytesToTarget(byte[]) -> foreignHolderBytesToTarget
neureka.framing.NDFrame -> neureka.framing.NDFrame:
    java.util.List _hiddenKeys -> a
    java.util.Map _mapping -> b
    java.lang.String _tensorName -> c
    35:60:void <init>(java.util.List,java.lang.String) -> <init>
    35:66:void <init>(int,java.lang.String) -> <init>
    35:87:void <init>(java.util.Map,neureka.Tsr,java.lang.String) -> <init>
    90:90:int[] get(java.util.List) -> get
    94:103:int[] get(java.lang.Object[]) -> get
    118:164:neureka.framing.states.AxisFrame atAxis(java.lang.Object) -> atAxis
    168:180:java.util.Map _initializeIdxmap(java.lang.Object,java.lang.Object,int) -> a
    191:203:java.lang.String _paddedCentered(java.lang.String,int) -> a
    210:270:java.lang.String toString() -> toString
    276:278:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    282:282:java.util.Map getMapping() -> getMapping
    286:286:java.lang.String getTensorName() -> getTensorName
    240:256:void lambda$toString$14(java.lang.Object[],int[],java.lang.StringBuilder,java.lang.Object,java.lang.Object) -> a
    244:245:void lambda$toString$13(int[],java.lang.Object[],java.lang.Object,java.lang.Integer) -> a
    223:229:void lambda$toString$12(java.lang.StringBuilder,java.lang.Object,java.lang.Object) -> a
    218:218:java.lang.Boolean lambda$toString$11(int,int,java.lang.Integer) -> a
    157:161:java.util.List lambda$atAxis$10(java.lang.Object,java.lang.Integer) -> a
    159:159:void lambda$atAxis$9(java.lang.Integer,java.util.List,java.lang.Object,java.lang.Integer) -> a
    147:152:java.util.List lambda$atAxis$8(java.lang.Object) -> a
    150:150:void lambda$atAxis$7(java.util.List,java.lang.Object,java.lang.Integer) -> a
    138:138:neureka.common.functional.With lambda$atAxis$6(java.lang.Object,java.lang.Object) -> a
    139:142:neureka.framing.NDFrame lambda$atAxis$5(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    130:130:neureka.framing.states.AxisFrame$Set lambda$atAxis$4(java.lang.Object,java.lang.Object) -> b
    132:134:neureka.framing.NDFrame lambda$atAxis$3(java.lang.Object,java.lang.Object,int) -> b
    120:120:neureka.framing.states.Get lambda$atAxis$2(java.lang.Object,java.lang.Object) -> c
    122:126:java.lang.Integer lambda$atAxis$1(java.lang.Object,java.lang.Object) -> d
    73:86:void lambda$new$0(int[],neureka.Tsr,java.lang.Object,java.util.List) -> a
neureka.framing.Relation -> neureka.framing.Relation:
    neureka.Tsr _parent -> a
    java.lang.ref.WeakReference[] _children -> b
    int[][] _shapeRelations -> c
    59:59:void <init>() -> <init>
    99:123:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    129:130:neureka.framing.Relation addParent(neureka.Tsr) -> addParent
    136:149:neureka.framing.Relation addChild(neureka.Tsr) -> addChild
    172:178:neureka.framing.Relation addReshapeRelationFor(neureka.Tsr,int[]) -> addReshapeRelationFor
    201:207:int[] getReshapeRelationFor(neureka.Tsr) -> getReshapeRelationFor
    212:222:neureka.framing.Relation foreachChild(java.util.function.Consumer) -> foreachChild
    234:237:neureka.Tsr findRootTensor() -> findRootTensor
    242:242:boolean hasParent() -> hasParent
    247:247:boolean hasChildren() -> hasChildren
    252:252:int childCount() -> childCount
    257:257:neureka.framing.Relation remove(neureka.Tsr) -> remove
    261:261:java.lang.String toString() -> toString
    265:265:neureka.Tsr getParent() -> getParent
neureka.framing.states.At -> neureka.framing.states.At:
    java.lang.Object at(java.lang.Object) -> at
neureka.framing.states.AxisFrame -> neureka.framing.states.AxisFrame:
    neureka.framing.states.At _keyBasedGetter -> a
    neureka.framing.states.At _keyBasedSetter -> b
    neureka.common.functional.Replace _replace -> c
    java.util.function.Supplier _allAliasGetter -> d
    java.util.function.Function _allAliasGetterForIndex -> e
    38:44:void <init>(neureka.framing.states.At,neureka.framing.states.At,neureka.common.functional.Replace,java.util.function.Supplier,java.util.function.Function) -> <init>
    47:47:neureka.framing.states.AxisFrame$Builder builder() -> builder
    51:51:java.lang.Object getIndexAtAlias(java.lang.Object) -> getIndexAtAlias
    55:55:neureka.framing.states.AxisFrame$Set atIndexAlias(java.lang.Object) -> atIndexAlias
    59:59:neureka.common.functional.With replace(java.lang.Object) -> replace
    63:63:java.util.List getAllAliases() -> getAllAliases
    67:67:java.util.List getAllAliasesForIndex(int) -> getAllAliasesForIndex
    18:18:void <init>(neureka.framing.states.At,neureka.framing.states.At,neureka.common.functional.Replace,java.util.function.Supplier,java.util.function.Function,byte) -> <init>
neureka.framing.states.AxisFrame$Builder -> neureka.framing.states.AxisFrame$Builder:
    neureka.framing.states.At keyBasedGetter -> a
    neureka.framing.states.At keyBasedSetter -> b
    neureka.common.functional.Replace replacer -> c
    java.util.function.Supplier allAliasGetter -> d
    java.util.function.Function allAliasGetterForIndex -> e
    78:78:void <init>() -> <init>
    81:82:neureka.framing.states.AxisFrame$Builder getter(neureka.framing.states.At) -> getter
    86:87:neureka.framing.states.AxisFrame$Builder setter(neureka.framing.states.At) -> setter
    91:92:neureka.framing.states.AxisFrame$Builder replacer(neureka.common.functional.Replace) -> replacer
    96:97:neureka.framing.states.AxisFrame$Builder allAliasGetter(java.util.function.Supplier) -> allAliasGetter
    101:102:neureka.framing.states.AxisFrame$Builder allAliasGetterFor(java.util.function.Function) -> allAliasGetterFor
    106:106:neureka.framing.states.AxisFrame build() -> build
neureka.framing.states.AxisFrame$Set -> neureka.framing.states.AxisFrame$Set:
    neureka.framing.NDFrame setIndex(int) -> setIndex
neureka.framing.states.Get -> neureka.framing.states.Get:
    java.lang.Object get() -> get
neureka.framing.states.Set -> neureka.framing.states.Set:
    neureka.framing.NDFrame set(int) -> set
neureka.ndim.AbstractNDArray -> neureka.ndim.AbstractNDArray:
    org.slf4j.Logger _LOG -> _LOG
    neureka.ndim.config.NDConfiguration _NDConf -> a
    neureka.dtype.DataType _dataType -> b
    java.lang.Object _data -> c
    boolean $assertionsDisabled -> d
    67:81:void <init>() -> <init>
    boolean isDeleted() -> isDeleted
    90:90:void _guardGet(java.lang.String) -> _guardGet
    91:91:void _guardSet(java.lang.String) -> _guardSet
    92:92:void _guardMod(java.lang.String) -> _guardMod
    102:106:void _guard(java.lang.String) -> a
    111:111:neureka.ndim.config.NDConfiguration getNDConf() -> getNDConf
    120:120:neureka.dtype.DataType getDataType() -> getDataType
    129:129:java.lang.Object getData() -> getData
    135:135:java.lang.Class getValueClass() -> getValueClass
    153:153:java.lang.Class getRepresentativeValueClass() -> getRepresentativeValueClass
    168:175:java.lang.Object setDataType(neureka.dtype.DataType) -> setDataType
    180:196:void _setData(java.lang.Object) -> _setData
    200:222:void _initData(neureka.ndim.Initializer) -> _initData
    234:234:void _allocate(int) -> _allocate
    java.lang.Object setIsVirtual(boolean) -> setIsVirtual
    boolean isVirtual() -> isVirtual
    void _setIsVirtual(boolean) -> _setIsVirtual
    244:245:neureka.ndim.NDAConstructor createConstructionAPI() -> createConstructionAPI
    266:266:void _virtualize() -> _virtualize
    278:278:void _actualize() -> _actualize
    282:291:java.lang.Object _convertedDataOfType(java.lang.Class) -> _convertedDataOfType
    298:299:void forEach(java.util.function.Consumer) -> forEach
    304:304:java.util.Spliterator spliterator() -> spliterator
    java.lang.Object getDataAt(int) -> getDataAt
    java.lang.Object setDataAt(int,java.lang.Object) -> setDataAt
    341:342:boolean is(java.lang.Class) -> is
    347:347:int indexOfIndex(int) -> indexOfIndex
    349:349:int[] IndicesOfIndex(int) -> IndicesOfIndex
    351:351:int indexOfIndices(int[]) -> indexOfIndices
    364:371:java.lang.Object setNDConf(neureka.ndim.config.NDConfiguration) -> setNDConf
    376:376:int rank() -> rank
    378:378:java.util.List shape() -> shape
    380:380:int shape(int) -> shape
    382:382:java.util.List indicesMap() -> indicesMap
    384:384:java.util.List translation() -> translation
    386:386:java.util.List spread() -> spread
    388:388:java.util.List offset() -> offset
    390:390:int size() -> size
    393:395:java.util.List _asList(int[]) -> a
    367:367:int lambda$setNDConf$1(int,int) -> a
    366:366:int lambda$setNDConf$0(int,int) -> b
    67:67:void <clinit>() -> <clinit>
neureka.ndim.AbstractNDArray$1 -> neureka.ndim.AbstractNDArray$1:
    neureka.ndim.AbstractNDArray val$nda -> a
    246:246:void <init>(neureka.ndim.AbstractNDArray,neureka.ndim.AbstractNDArray) -> <init>
    247:247:void setType(neureka.dtype.DataType) -> setType
    248:248:void setConf(neureka.ndim.config.NDConfiguration) -> setConf
    249:249:void setData(java.lang.Object) -> setData
    250:250:void allocate(int) -> allocate
    251:251:java.lang.Object getData() -> getData
    252:252:void setIsVirtual(boolean) -> setIsVirtual
neureka.ndim.AbstractNDArray$2 -> neureka.ndim.AbstractNDArray$2:
    305:305:void <init>(neureka.ndim.AbstractNDArray) -> <init>
    306:306:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    307:307:java.util.Spliterator trySplit() -> trySplit
    308:308:long estimateSize() -> estimateSize
    309:309:int characteristics() -> characteristics
neureka.ndim.AbstractNDArray$Utility -> neureka.ndim.AbstractNDArray$Utility:
    401:401:void <init>() -> <init>
neureka.ndim.AbstractNDArray$Utility$Indexing -> neureka.ndim.AbstractNDArray$Utility$Indexing:
    417:417:void <init>() -> <init>
    421:431:void shpCheck(int[],neureka.Tsr) -> shpCheck
    435:456:int[][] makeFit(int[],int[]) -> makeFit
    461:463:int[] shpOfCon(int[],int[]) -> shpOfCon
    468:475:int[] shpOfBrc(int[],int[]) -> shpOfBrc
neureka.ndim.AbstractNDArray$Utility$Stringify -> neureka.ndim.AbstractNDArray$Utility$Stringify:
    403:403:void <init>() -> <init>
    407:410:java.lang.String strConf(int[]) -> strConf
neureka.ndim.Initializer -> neureka.ndim.Initializer:
    java.lang.Object init(int,int[]) -> init
neureka.ndim.NDAConstructor -> neureka.ndim.NDAConstructor:
    org.slf4j.Logger _LOG -> a
    neureka.ndim.NDAConstructor$API _API -> b
    33:33:void <init>(neureka.ndim.NDAConstructor$API) -> <init>
    45:76:void configureFromNewShape(int[],boolean,boolean) -> configureFromNewShape
    80:112:void _tryConstructing(int[],neureka.dtype.DataType,java.lang.Object) -> _tryConstructing
    115:121:boolean _constructAllFromOne(int[],java.lang.Object) -> _constructAllFromOne
    1130:1132:void _constructAllF32(int[],float):130:132 -> _constructAllFromOne
    1130:1132:boolean _constructAllFromOne(int[],java.lang.Object):116 -> _constructAllFromOne
    1135:1137:void _constructAllI32(int[],int):135:137 -> _constructAllFromOne
    1135:1137:boolean _constructAllFromOne(int[],java.lang.Object):117 -> _constructAllFromOne
    1140:1142:void _constructAllI16(int[],short):140:142 -> _constructAllFromOne
    1140:1142:boolean _constructAllFromOne(int[],java.lang.Object):118 -> _constructAllFromOne
    1145:1147:void _constructAllI8(int[],byte):145:147 -> _constructAllFromOne
    1145:1147:boolean _constructAllFromOne(int[],java.lang.Object):119 -> _constructAllFromOne
    1150:1152:void _constructAllI64(int[],long):150:152 -> _constructAllFromOne
    1150:1152:boolean _constructAllFromOne(int[],java.lang.Object):120 -> _constructAllFromOne
    125:127:void _constructAllF64(int[],double) -> _constructAllF64
    155:158:void _constructAll(int[],java.lang.Class) -> a
    179:201:void construct(java.util.List) -> construct
    205:249:void constructForRange(int[],neureka.dtype.DataType,java.lang.Object[]) -> constructForRange
    1276:1283:void _constructForInts(int[],int[]):276:283 -> constructForRange
    1276:1283:void constructForRange(int[],neureka.dtype.DataType,java.lang.Object[]):229 -> constructForRange
    253:261:void constructForDoubles(int[],double[]) -> constructForDoubles
    265:272:void constructForFloats(int[],float[]) -> constructForFloats
    287:294:void _constructForShorts(int[],short[]) -> _constructForShorts
    298:305:void _constructForBytes(int[],byte[]) -> _constructForBytes
    309:316:void _constructForLongs(int[],long[]) -> _constructForLongs
    319:325:void construct(int[],java.lang.Object[]) -> construct
    1328:1337:void _fromRange(int[],java.lang.Object[]):328:337 -> construct
    1328:1337:void construct(int[],java.lang.Object[]):321 -> construct
    340:349:java.lang.Object optimizeArray(neureka.dtype.DataType,java.lang.Object,int) -> optimizeArray
    353:377:java.lang.Object optimizeObjectArray(neureka.dtype.DataType,java.lang.Object[],int) -> optimizeObjectArray
    357:357:long lambda$optimizeObjectArray$7(java.lang.Object[],int) -> a
    356:356:int lambda$optimizeObjectArray$6(java.lang.Object[],int) -> b
    355:355:double lambda$optimizeObjectArray$5(java.lang.Object[],int) -> c
    354:354:int lambda$optimizeObjectArray$4(java.lang.Object[],int) -> d
    354:354:int lambda$optimizeObjectArray$3(int) -> a
    182:182:boolean lambda$construct$2(int,java.util.List) -> a
    179:179:boolean lambda$construct$1(java.util.List) -> a
    179:179:boolean lambda$construct$0(java.lang.Object) -> a
    20:20:void <clinit>() -> <clinit>
neureka.ndim.NDAConstructor$API -> neureka.ndim.NDAConstructor$API:
    void setType(neureka.dtype.DataType) -> setType
    void setConf(neureka.ndim.config.NDConfiguration) -> setConf
    void setData(java.lang.Object) -> setData
    void allocate(int) -> allocate
    java.lang.Object getData() -> getData
    void setIsVirtual(boolean) -> setIsVirtual
neureka.ndim.config.AbstractNDC -> neureka.ndim.config.AbstractNDC:
    java.util.Map _CACHED_NDCS -> a
    java.util.Map _CACHED_INT_ARRAYS -> b
    boolean $assertionsDisabled -> c
    24:24:void <init>() -> <init>
    60:83:int[] _cacheArray(int[]) -> _cacheArray
    93:100:int[] asInlineArray() -> asInlineArray
    109:113:long keyCode() -> keyCode
    119:123:boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    135:166:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    171:177:neureka.ndim.config.NDConfiguration _cached(neureka.ndim.config.NDConfiguration) -> _cached
    188:194:boolean _isSimpleConfiguration(int[],int[],int[],int[],int[]) -> a
    201:206:java.lang.String toString() -> toString
    212:225:neureka.ndim.config.NDConfiguration _simpleReshape(int[],neureka.ndim.config.NDConfiguration) -> _simpleReshape
    232:235:neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
    24:48:void <clinit>() -> <clinit>
neureka.ndim.config.NDConfiguration -> neureka.ndim.config.NDConfiguration:
    int rank() -> rank
    int[] shape() -> shape
    int shape(int) -> shape
    int[] indicesMap() -> indicesMap
    int indicesMap(int) -> indicesMap
    int[] translation() -> translation
    int translation(int) -> translation
    int[] spread() -> spread
    int spread(int) -> spread
    int[] offset() -> offset
    int offset(int) -> offset
    int indexOfIndex(int) -> indexOfIndex
    int[] indicesOfIndex(int) -> indicesOfIndex
    int indexOfIndices(int[]) -> indexOfIndices
    int[] asInlineArray() -> asInlineArray
    long keyCode() -> keyCode
    boolean equals(neureka.ndim.config.NDConfiguration) -> equals
    neureka.ndim.config.NDConfiguration newReshaped(int[]) -> newReshaped
    167:174:boolean isSimple() -> isSimple
    174:174:boolean lambda$isSimple$1(int) -> a
    170:170:boolean lambda$isSimple$0(int) -> b
neureka.ndim.config.NDConfiguration$Utility -> neureka.ndim.config.NDConfiguration$Utility:
    182:182:void <init>() -> <init>
    186:192:int[] rearrange(int[],int[],int[]) -> rearrange
    197:202:int[] rearrange(int[],int[]) -> rearrange
    207:213:int[] newTlnOf(int[]) -> newTlnOf
    218:220:void increment(int[],int[]) -> increment
    1225:1234:int _incrementAt(int,int[],int[]):225:234 -> increment
    1225:1234:void increment(int[],int[]):219 -> increment
    239:241:int szeOfShp(int[]) -> szeOfShp
neureka.ndim.config.types.D1C -> neureka.ndim.config.types.D1C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int) -> indexOfIndices
neureka.ndim.config.types.D2C -> neureka.ndim.config.types.D2C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.D3C -> neureka.ndim.config.types.D3C:
    5:5:void <init>() -> <init>
    int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexD1Configuration -> neureka.ndim.config.types.complex.ComplexD1Configuration:
    int _shape -> _shape
    int _translation -> a
    int _indicesMap -> b
    int _spread -> c
    int _offset -> d
    boolean $assertionsDisabled -> e
    37:37:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    46:55:void <init>(int,int,int,int,int) -> <init>
    59:59:int rank() -> rank
    64:64:int[] shape() -> shape
    69:69:int shape(int) -> shape
    74:74:int[] indicesMap() -> indicesMap
    79:79:int indicesMap(int) -> indicesMap
    84:84:int[] translation() -> translation
    89:89:int translation(int) -> translation
    94:94:int[] spread() -> spread
    99:99:int spread(int) -> spread
    104:104:int[] offset() -> offset
    109:109:int offset(int) -> offset
    115:115:int indexOfIndex(int) -> indexOfIndex
    120:120:int[] indicesOfIndex(int) -> indicesOfIndex
    124:124:int indexOfIndices(int[]) -> indexOfIndices
    130:130:int indexOfIndices(int) -> indexOfIndices
    6:6:void <clinit>() -> <clinit>
neureka.ndim.config.types.complex.ComplexD2Configuration -> neureka.ndim.config.types.complex.ComplexD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    int _indicesMap1 -> c
    int _indicesMap2 -> d
    int _spread1 -> e
    int _spread2 -> f
    int _offset1 -> g
    int _offset2 -> h
    41:52:void <init>(int[],int[],int[],int[],int[]) -> <init>
    61:61:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    66:66:int rank() -> rank
    71:71:int[] shape() -> shape
    76:76:int shape(int) -> shape
    81:81:int[] indicesMap() -> indicesMap
    86:86:int indicesMap(int) -> indicesMap
    91:91:int[] translation() -> translation
    96:96:int translation(int) -> translation
    101:101:int[] spread() -> spread
    106:106:int spread(int) -> spread
    111:111:int[] offset() -> offset
    116:116:int offset(int) -> offset
    124:124:int indexOfIndex(int) -> indexOfIndex
    130:134:int[] indicesOfIndex(int) -> indicesOfIndex
    139:142:int indexOfIndices(int[]) -> indexOfIndices
    147:150:int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexD3Configuration -> neureka.ndim.config.types.complex.ComplexD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    int _indicesMap1 -> d
    int _indicesMap2 -> e
    int _indicesMap3 -> f
    int _spread1 -> g
    int _spread2 -> h
    int _spread3 -> i
    int _offset1 -> j
    int _offset2 -> k
    int _offset3 -> l
    46:62:void <init>(int[],int[],int[],int[],int[]) -> <init>
    71:71:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    76:76:int rank() -> rank
    81:81:int[] shape() -> shape
    86:86:int shape(int) -> shape
    91:91:int[] indicesMap() -> indicesMap
    96:96:int indicesMap(int) -> indicesMap
    101:101:int[] translation() -> translation
    106:106:int translation(int) -> translation
    111:111:int[] spread() -> spread
    116:116:int spread(int) -> spread
    121:121:int[] offset() -> offset
    126:126:int offset(int) -> offset
    135:140:int indexOfIndex(int) -> indexOfIndex
    148:153:int[] indicesOfIndex(int) -> indicesOfIndex
    158:158:int indexOfIndices(int[]) -> indexOfIndices
    165:165:int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration -> neureka.ndim.config.types.complex.ComplexDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation -> a
    int[] _indicesMap -> b
    int[] _spread -> c
    int[] _offset -> d
    41:47:void <init>(int[],int[],int[],int[],int[]) -> <init>
    56:56:neureka.ndim.config.NDConfiguration construct(int[],int[],int[],int[],int[]) -> construct
    61:61:int rank() -> rank
    66:66:int[] shape() -> shape
    71:71:int shape(int) -> shape
    76:76:int[] indicesMap() -> indicesMap
    81:81:int indicesMap(int) -> indicesMap
    86:86:int[] translation() -> translation
    91:91:int translation(int) -> translation
    96:96:int[] spread() -> spread
    101:101:int spread(int) -> spread
    106:106:int[] offset() -> offset
    111:111:int offset(int) -> offset
    119:119:int indexOfIndex(int) -> indexOfIndex
    124:129:int[] indicesOfIndex(int) -> indicesOfIndex
    134:137:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.complex.ComplexScalarConfiguration -> neureka.ndim.config.types.complex.ComplexScalarConfiguration:
    int _shape -> _shape
    int _offset -> a
    25:25:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    31:34:void <init>(int,int) -> <init>
    38:38:int rank() -> rank
    43:43:int[] shape() -> shape
    48:48:int shape(int) -> shape
    53:53:int[] indicesMap() -> indicesMap
    58:58:int indicesMap(int) -> indicesMap
    63:63:int[] translation() -> translation
    68:68:int translation(int) -> translation
    73:73:int[] spread() -> spread
    78:78:int spread(int) -> spread
    83:83:int[] offset() -> offset
    88:88:int offset(int) -> offset
    94:94:int indexOfIndex(int) -> indexOfIndex
    99:99:int[] indicesOfIndex(int) -> indicesOfIndex
    104:104:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD1Configuration -> neureka.ndim.config.types.simple.SimpleD1Configuration:
    int _shape -> _shape
    int _translation_and_indicesMap -> a
    23:23:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    29:32:void <init>(int,int) -> <init>
    36:36:int rank() -> rank
    41:41:int[] shape() -> shape
    46:46:int shape(int) -> shape
    51:51:int[] indicesMap() -> indicesMap
    56:56:int indicesMap(int) -> indicesMap
    61:61:int[] translation() -> translation
    66:66:int translation(int) -> translation
    71:71:int[] spread() -> spread
    76:76:int spread(int) -> spread
    81:81:int[] offset() -> offset
    86:86:int offset(int) -> offset
    92:92:int indexOfIndex(int) -> indexOfIndex
    97:97:int[] indicesOfIndex(int) -> indicesOfIndex
    102:102:int indexOfIndices(int[]) -> indexOfIndices
    107:107:int indexOfIndices(int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD2Configuration -> neureka.ndim.config.types.simple.SimpleD2Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _translation1 -> a
    int _translation2 -> b
    23:28:void <init>(int[],int[]) -> <init>
    34:34:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    40:40:int rank() -> rank
    45:45:int[] shape() -> shape
    50:50:int shape(int) -> shape
    55:55:int[] indicesMap() -> indicesMap
    60:60:int indicesMap(int) -> indicesMap
    65:65:int[] translation() -> translation
    70:70:int translation(int) -> translation
    75:75:int[] spread() -> spread
    80:80:int spread(int) -> spread
    85:85:int[] offset() -> offset
    90:90:int offset(int) -> offset
    98:98:int indexOfIndex(int) -> indexOfIndex
    104:108:int[] indicesOfIndex(int) -> indicesOfIndex
    113:116:int indexOfIndices(int[]) -> indexOfIndices
    121:124:int indexOfIndices(int,int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleD3Configuration -> neureka.ndim.config.types.simple.SimpleD3Configuration:
    int _shape1 -> _shape1
    int _shape2 -> _shape2
    int _shape3 -> _shape3
    int _translation1 -> a
    int _translation2 -> b
    int _translation3 -> c
    24:31:void <init>(int[],int[]) -> <init>
    37:37:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    42:42:int rank() -> rank
    47:47:int[] shape() -> shape
    52:52:int shape(int) -> shape
    57:57:int[] indicesMap() -> indicesMap
    62:62:int indicesMap(int) -> indicesMap
    67:67:int[] translation() -> translation
    72:72:int translation(int) -> translation
    77:77:int[] spread() -> spread
    82:82:int spread(int) -> spread
    87:87:int[] offset() -> offset
    92:92:int offset(int) -> offset
    101:106:int indexOfIndex(int) -> indexOfIndex
    114:119:int[] indicesOfIndex(int) -> indicesOfIndex
    124:124:int indexOfIndices(int[]) -> indexOfIndices
    131:131:int indexOfIndices(int,int,int) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration -> neureka.ndim.config.types.simple.SimpleDefaultNDConfiguration:
    int[] _shape -> _shape
    int[] _translation_and_indicesMap -> a
    23:26:void <init>(int[],int[]) -> <init>
    32:32:neureka.ndim.config.NDConfiguration construct(int[],int[]) -> construct
    37:37:int rank() -> rank
    42:42:int[] shape() -> shape
    47:47:int shape(int) -> shape
    52:52:int[] indicesMap() -> indicesMap
    57:57:int indicesMap(int) -> indicesMap
    62:62:int[] translation() -> translation
    67:67:int translation(int) -> translation
    72:74:int[] spread() -> spread
    79:79:int spread(int) -> spread
    84:84:int[] offset() -> offset
    89:89:int offset(int) -> offset
    97:97:int indexOfIndex(int) -> indexOfIndex
    102:107:int[] indicesOfIndex(int) -> indicesOfIndex
    112:114:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.simple.SimpleScalarConfiguration -> neureka.ndim.config.types.simple.SimpleScalarConfiguration:
    9:9:neureka.ndim.config.NDConfiguration construct() -> construct
    12:12:void <init>() -> <init>
    16:16:int rank() -> rank
    21:21:int[] shape() -> shape
    26:26:int shape(int) -> shape
    31:31:int[] indicesMap() -> indicesMap
    36:36:int indicesMap(int) -> indicesMap
    41:41:int[] translation() -> translation
    46:46:int translation(int) -> translation
    51:51:int[] spread() -> spread
    56:56:int spread(int) -> spread
    61:61:int[] offset() -> offset
    66:66:int offset(int) -> offset
    71:71:int indexOfIndex(int) -> indexOfIndex
    76:76:int[] indicesOfIndex(int) -> indicesOfIndex
    81:81:int indexOfIndices(int[]) -> indexOfIndices
neureka.ndim.config.types.views.SimpleReshapeView -> neureka.ndim.config.types.views.SimpleReshapeView:
    neureka.ndim.config.NDConfiguration _toBeViewed -> a
    int[] _form -> b
    int[] _formTranslator -> c
    int[] _shape -> d
    int[] _translation -> e
    int[] _indicesMap -> f
    int[] _spread -> g
    int[] _offset -> h
    23:44:void <init>(int[],neureka.ndim.config.NDConfiguration) -> <init>
    48:48:int rank() -> rank
    53:53:int[] shape() -> shape
    58:58:int shape(int) -> shape
    63:63:int[] indicesMap() -> indicesMap
    68:68:int indicesMap(int) -> indicesMap
    73:73:int[] translation() -> translation
    78:78:int translation(int) -> translation
    83:83:int[] spread() -> spread
    88:88:int spread(int) -> spread
    93:93:int[] offset() -> offset
    98:98:int offset(int) -> offset
    103:103:int indexOfIndex(int) -> indexOfIndex
    108:113:int[] indicesOfIndex(int) -> indicesOfIndex
    118:119:int indexOfIndices(int[]) -> indexOfIndices
    1124:1127:int[] _rearrange(int[],int[],int[]):124:127 -> indexOfIndices
    1124:1127:int indexOfIndices(int[]):118 -> indexOfIndices
    35:35:int lambda$new$0(java.lang.Integer) -> a
neureka.ndim.config.types.virtual.VirtualNDConfiguration -> neureka.ndim.config.types.virtual.VirtualNDConfiguration:
    java.util.Map _Virtual_Cache -> a
    int[] _shape -> b
    16:18:void <init>(int[]) -> <init>
    23:30:neureka.ndim.config.NDConfiguration construct(int[]) -> construct
    35:35:int rank() -> rank
    40:40:int[] shape() -> shape
    45:45:int shape(int) -> shape
    50:50:int[] indicesMap() -> indicesMap
    55:55:int indicesMap(int) -> indicesMap
    60:60:int[] translation() -> translation
    65:65:int translation(int) -> translation
    70:70:int[] spread() -> spread
    75:75:int spread(int) -> spread
    80:80:int[] offset() -> offset
    85:85:int offset(int) -> offset
    90:90:int indexOfIndex(int) -> indexOfIndex
    95:95:int[] indicesOfIndex(int) -> indicesOfIndex
    100:100:int indexOfIndices(int[]) -> indexOfIndices
    12:12:void <clinit>() -> <clinit>
neureka.ndim.iterators.NDIterator -> neureka.ndim.iterators.NDIterator:
    64:64:neureka.ndim.iterators.NDIterator of(neureka.Tsr) -> of
    69:82:neureka.ndim.iterators.NDIterator of(neureka.Tsr,neureka.ndim.iterators.NDIterator$NonVirtual) -> of
    int shape(int) -> shape
    int[] shape() -> shape
    void increment() -> increment
    void decrement() -> decrement
    int i() -> i
    int get(int) -> get
    int[] get() -> get
    void set(int,int) -> set
    void set(int[]) -> set
    int rank() -> rank
    108:119:java.lang.String asString() -> asString
    117:117:void lambda$asString$1(java.util.StringJoiner,int) -> a
    112:112:void lambda$asString$0(java.util.StringJoiner,int) -> b
neureka.ndim.iterators.NDIterator$NonVirtual -> neureka.ndim.iterators.NDIterator$NonVirtual:
    neureka.ndim.iterators.NDIterator$NonVirtual TRUE -> TRUE
    neureka.ndim.iterators.NDIterator$NonVirtual FALSE -> FALSE
    neureka.ndim.iterators.NDIterator$NonVirtual[] $VALUES -> a
    61:61:neureka.ndim.iterators.NDIterator$NonVirtual[] values() -> values
    61:61:neureka.ndim.iterators.NDIterator$NonVirtual valueOf(java.lang.String) -> valueOf
    61:61:void <init>(java.lang.String,int) -> <init>
    61:61:void <clinit>() -> <clinit>
neureka.ndim.iterators.types.DefaultNDIterator -> neureka.ndim.iterators.types.DefaultNDIterator:
    int[] _indices -> a
    int[] _shape -> b
    neureka.ndim.config.NDConfiguration _conf -> c
    12:16:void <init>(neureka.ndim.config.NDConfiguration) -> <init>
    20:20:int shape(int) -> shape
    25:25:int[] shape() -> shape
    30:31:void increment() -> increment
    36:36:void decrement() -> decrement
    40:40:int i() -> i
    45:45:int get(int) -> get
    50:50:int[] get() -> get
    55:56:void set(int,int) -> set
    60:61:void set(int[]) -> set
    65:65:int rank() -> rank
neureka.ndim.iterators.types.VirtualNDIterator -> neureka.ndim.iterators.types.VirtualNDIterator:
    neureka.ndim.config.types.virtual.VirtualNDConfiguration _conf -> a
    10:10:void <init>(neureka.ndim.config.types.virtual.VirtualNDConfiguration) -> <init>
    13:13:int shape(int) -> shape
    16:16:int[] shape() -> shape
    21:21:void increment() -> increment
    26:26:void decrement() -> decrement
    30:30:int i() -> i
    35:35:int get(int) -> get
    44:44:int[] get() -> get
    54:54:void set(int,int) -> set
    59:59:void set(int[]) -> set
    62:62:int rank() -> rank
neureka.ndim.iterators.types.complex.ComplexD1CIterator -> neureka.ndim.iterators.types.complex.ComplexD1CIterator:
    int _d1 -> a
    11:12:void <init>(neureka.ndim.config.types.complex.ComplexD1Configuration) -> <init>
    16:17:void increment() -> increment
    21:22:void decrement() -> decrement
    27:27:int i() -> i
    32:32:int get(int) -> get
    37:37:int[] get() -> get
    42:43:void set(int,int) -> set
    47:48:void set(int[]) -> set
    52:52:int rank() -> rank
neureka.ndim.iterators.types.complex.main.ComplexD2CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.complex.ComplexD2Configuration) -> <init>
    18:23:void increment() -> increment
    27:31:void decrement() -> decrement
    35:35:int i() -> i
    40:40:int get(int) -> get
    45:45:int[] get() -> get
    50:52:void set(int,int) -> set
    56:58:void set(int[]) -> set
neureka.ndim.iterators.types.complex.main.ComplexD3CIterator -> neureka.ndim.iterators.types.complex.main.ComplexD3CIterator:
    int _d1 -> a
    int _d2 -> b
    int _d3 -> c
    8:14:void <init>(neureka.ndim.config.types.complex.ComplexD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.ndim.iterators.types.simple.SimpleD1CIterator -> neureka.ndim.iterators.types.simple.SimpleD1CIterator:
    int _d1 -> a
    12:13:void <init>(neureka.ndim.config.types.simple.SimpleD1Configuration) -> <init>
    18:19:void increment() -> increment
    23:24:void decrement() -> decrement
    29:29:int i() -> i
    34:34:int get(int) -> get
    39:39:int[] get() -> get
    44:45:void set(int,int) -> set
    49:50:void set(int[]) -> set
    54:54:int rank() -> rank
neureka.ndim.iterators.types.simple.main.SimpleD2CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD2CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    8:13:void <init>(neureka.ndim.config.types.simple.SimpleD2Configuration) -> <init>
    17:22:void increment() -> increment
    26:30:void decrement() -> decrement
    34:34:int i() -> i
    39:39:int get(int) -> get
    44:44:int[] get() -> get
    49:51:void set(int,int) -> set
    55:57:void set(int[]) -> set
neureka.ndim.iterators.types.simple.main.SimpleD3CIterator -> neureka.ndim.iterators.types.simple.main.SimpleD3CIterator:
    int _d1 -> _d1
    int _d2 -> _d2
    int _d3 -> _d3
    8:14:void <init>(neureka.ndim.config.types.simple.SimpleD3Configuration) -> <init>
    19:28:void increment() -> increment
    32:38:void decrement() -> decrement
    42:42:int i() -> i
    47:47:int get(int) -> get
    52:52:int[] get() -> get
    57:60:void set(int,int) -> set
    64:67:void set(int[]) -> set
neureka.optimization.Optimization -> neureka.optimization.Optimization:
    neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.Optimizer -> neureka.optimization.Optimizer:
    44:44:neureka.optimization.Optimizer of(neureka.optimization.Optimization) -> of
    51:51:neureka.optimization.Optimizer ofGradient(neureka.optimization.Optimization) -> ofGradient
neureka.optimization.Optimizer$1 -> neureka.optimization.Optimizer$1:
    neureka.optimization.Optimization val$o -> a
    44:44:void <init>(neureka.optimization.Optimization) -> <init>
    45:45:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    46:46:neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.Optimizer$2 -> neureka.optimization.Optimizer$2:
    neureka.optimization.Optimization val$o -> a
    51:51:void <init>(neureka.optimization.Optimization) -> <init>
    52:52:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
    53:53:neureka.Tsr optimize(neureka.Tsr) -> optimize
neureka.optimization.implementations.ADAM -> neureka.optimization.implementations.ADAM:
    neureka.Tsr a -> a
    neureka.Tsr b1 -> b
    neureka.Tsr b2 -> c
    neureka.Tsr e -> d
    neureka.Tsr m -> e
    neureka.Tsr v -> f
    52:60:void <init>(neureka.Tsr) -> <init>
    75:75:neureka.Tsr optimize(neureka.Tsr) -> optimize
    1063:1070:neureka.Tsr _optimize(neureka.Tsr):63:70 -> optimize
    1063:1070:neureka.Tsr optimize(neureka.Tsr):75 -> optimize
    80:81:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.optimization.implementations.SGD -> neureka.optimization.implementations.SGD:
    double _learningRate -> a
    neureka.calculus.Function _function -> b
    49:52:void <init>(double) -> <init>
    56:57:neureka.Tsr optimize(neureka.Tsr) -> optimize
    61:61:double learningRate() -> learningRate
    66:67:boolean update(neureka.common.composition.Component$OwnerChangeRequest) -> update
neureka.utility.DataConverter -> neureka.utility.DataConverter:
    org.slf4j.Logger _LOG -> a
    java.util.Map _converters -> b
    neureka.utility.DataConverter _instance -> c
    93:93:neureka.utility.DataConverter instance() -> instance
    102:161:void <init>() -> <init>
    177:191:void _set(java.lang.Class,java.lang.Class,neureka.utility.DataConverter$Conversion) -> a
    204:228:java.lang.Object convert(java.lang.Object,java.lang.Class) -> convert
    234:266:java.lang.Object convert(java.lang.Number[],java.lang.Class,int) -> convert
    237:237:java.lang.Number lambda$convert$7(java.lang.Number[],int) -> a
    237:237:int lambda$convert$6(int) -> a
    147:147:long[] lambda$new$5(java.util.List) -> a
    147:147:long lambda$new$4(java.lang.Object) -> a
    146:146:double[] lambda$new$3(java.util.List) -> b
    146:146:double lambda$new$2(java.lang.Object) -> b
    145:145:int[] lambda$new$1(java.util.List) -> c
    145:145:int lambda$new$0(java.lang.Object) -> c
    59:85:void <clinit>() -> <clinit>
neureka.utility.DataConverter$Conversion -> neureka.utility.DataConverter$a:
    java.lang.Object go(java.lang.Object) -> go
neureka.utility.DataConverter$Utility -> neureka.utility.DataConverter$Utility:
    275:275:void <init>() -> <init>
    278:282:float[] objFloatsToPrimFloats(java.lang.Float[]) -> objFloatsToPrimFloats
    286:290:double[] objDoublesToPrimDoubles(java.lang.Double[]) -> objDoublesToPrimDoubles
    294:298:int[] objIntsToPrimInts(java.lang.Integer[]) -> objIntsToPrimInts
    302:306:long[] objLongsToPrimLongs(java.lang.Long[]) -> objLongsToPrimLongs
    310:314:short[] objShortsToPrimShorts(java.lang.Short[]) -> objShortsToPrimShorts
    318:322:byte[] objBytesToPrimBytes(java.lang.Byte[]) -> objBytesToPrimBytes
    326:326:double[] newSeededDoubleArray(java.lang.String,int) -> newSeededDoubleArray
    330:330:double[] newSeededDoubleArray(long,int) -> newSeededDoubleArray
    334:334:double[] seededDoubleArray(double[],java.lang.String) -> seededDoubleArray
    338:341:double[] seededDoubleArray(double[],long) -> seededDoubleArray
    345:345:float[] newSeededFloatArray(java.lang.String,int) -> newSeededFloatArray
    349:349:float[] newSeededFloatArray(long,int) -> newSeededFloatArray
    353:353:float[] seededFloatArray(float[],java.lang.String) -> seededFloatArray
    357:360:float[] seededFloatArray(float[],long) -> seededFloatArray
    365:368:long _longStringHash(java.lang.String) -> a
    373:376:short[] byteToShort(byte[]) -> byteToShort
    380:383:java.math.BigInteger[] byteToBigInteger(byte[]) -> byteToBigInteger
    387:390:float[] doubleToFloat(double[]) -> doubleToFloat
    394:397:byte[] doubleToByte(double[]) -> doubleToByte
    401:404:short[] doubleToShort(double[]) -> doubleToShort
    408:411:long[] doubleToLong(double[]) -> doubleToLong
    415:418:double[] floatToDouble(float[]) -> floatToDouble
    422:425:byte[] floatToByte(float[]) -> floatToByte
    429:432:short[] floatToShort(float[]) -> floatToShort
    436:439:long[] floatToLong(float[]) -> floatToLong
    443:446:double[] shortToDouble(short[]) -> shortToDouble
    450:453:double[] byteToDouble(byte[]) -> byteToDouble
    457:460:float[] byteToFloat(byte[]) -> byteToFloat
    464:467:float[] shortToFloat(short[]) -> shortToFloat
    471:474:int[] byteToInt(byte[]) -> byteToInt
    478:481:int[] shortToInt(short[]) -> shortToInt
    485:488:byte[] shortToByte(short[]) -> shortToByte
    492:495:long[] byteToLong(byte[]) -> byteToLong
    499:502:long[] shortToLong(short[]) -> shortToLong
    506:509:java.math.BigInteger[] shortToBigInteger(short[]) -> shortToBigInteger
    513:516:float[] intToFloat(int[]) -> intToFloat
    520:523:int[] floatToInt(float[]) -> floatToInt
    527:530:java.math.BigInteger[] floatToBigInteger(float[]) -> floatToBigInteger
    534:537:int[] doubleToInt(double[]) -> doubleToInt
    541:544:java.math.BigInteger[] doubleToBigInteger(double[]) -> doubleToBigInteger
    548:551:double[] intToDouble(int[]) -> intToDouble
    555:558:long[] intToLong(int[]) -> intToLong
    562:565:short[] intToShort(int[]) -> intToShort
    569:572:byte[] intToByte(int[]) -> intToByte
    576:579:java.math.BigInteger[] intToBigInteger(int[]) -> intToBigInteger
    583:586:byte[] longToByte(long[]) -> longToByte
    590:593:short[] longToShort(long[]) -> longToShort
    597:600:int[] longToInt(long[]) -> longToInt
    604:607:float[] longToFloat(long[]) -> longToFloat
    612:615:double[] longToDouble(long[]) -> longToDouble
    620:623:java.math.BigInteger[] longToBigInteger(long[]) -> longToBigInteger
    630:637:double[] objectsToDoubles(java.lang.Object[],int) -> objectsToDoubles
    642:649:float[] objectsToFloats(java.lang.Object[],int) -> objectsToFloats
    654:661:short[] objectsToShorts(java.lang.Object[],int) -> objectsToShorts
    666:673:byte[] objectsToBytes(java.lang.Object[],int) -> objectsToBytes
    678:685:long[] objectsToLongs(java.lang.Object[],int) -> objectsToLongs
    690:697:int[] objectsToInts(java.lang.Object[],int) -> objectsToInts
neureka.utility.ListReader -> neureka.utility.ListReader:
    java.lang.Class _type -> a
    java.util.List _readers -> b
    int _size -> c
    21:48:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function) -> <init>
    1053:1065:java.lang.Class _findType(java.util.List):53:65 -> <init>
    1053:1065:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function):38 -> <init>
    1069:1077:int _findSize(java.util.List,int):69:77 -> <init>
    1069:1077:void <init>(java.lang.Object,int,java.util.List,java.util.List,java.util.function.Function):39 -> <init>
    50:50:java.lang.Class getType() -> getType
    77:77:java.lang.Integer lambda$_findSize$10(neureka.utility.ListReader) -> a
    74:74:boolean lambda$_findSize$9(int,java.lang.Integer) -> a
    71:71:boolean lambda$_findSize$8(int,java.lang.Integer) -> b
    69:69:java.util.stream.Stream lambda$_findSize$7(java.util.List) -> a
    69:69:java.lang.Integer lambda$_findSize$6(neureka.utility.ListReader) -> b
    61:61:boolean lambda$_findType$5(java.lang.Class,java.lang.Class) -> a
    55:55:boolean lambda$_findType$4(java.lang.Class,java.lang.Class) -> b
    53:53:java.util.stream.Stream lambda$_findType$3(java.util.List) -> b
    53:53:java.lang.Class lambda$_findType$2(neureka.utility.ListReader) -> c
    35:35:neureka.utility.ListReader lambda$new$1(int,java.util.List,java.util.List,java.util.function.Function,java.lang.Object) -> a
    28:28:boolean lambda$new$0(java.lang.Object) -> a
    1081:1084:boolean _isLeave(java.lang.Object):81:84 -> a
    1081:1084:boolean lambda$new$0(java.lang.Object):28 -> a
neureka.utility.Messages -> neureka.utility.Messages:
    20:20:void <init>() -> <init>
    20:20:java.lang.String access$000(java.lang.String,java.lang.Object[]) -> a
    1197:1197:java.lang.String _format(java.lang.String,java.lang.Object[]):197:197 -> a
    1197:1197:java.lang.String access$000(java.lang.String,java.lang.Object[]):20 -> a
neureka.utility.Messages$Devices -> neureka.utility.Messages$Devices:
    166:166:void <init>() -> <init>
    169:171:java.lang.String couldNotFindSuitableAlgorithmFor(java.lang.Class) -> couldNotFindSuitableAlgorithmFor
    179:182:java.lang.String couldNotFindSuitableImplementationFor(neureka.backend.api.Algorithm,java.lang.Class) -> couldNotFindSuitableImplementationFor
neureka.utility.Messages$OpenCL -> neureka.utility.Messages$OpenCL:
    25:25:void <init>() -> <init>
    28:32:java.lang.String clContextCreationFailed() -> clContextCreationFailed
    37:39:java.lang.String clContextCouldNotFindAnyDevices() -> clContextCouldNotFindAnyDevices
    68:103:neureka.utility.Messages$OpenCL$Tips findTip() -> findTip
neureka.utility.Messages$OpenCL$Tips -> neureka.utility.Messages$OpenCL$Tips:
    neureka.utility.Messages$OpenCL$Tips UBUNTU -> UBUNTU
    neureka.utility.Messages$OpenCL$Tips FEDORA -> FEDORA
    neureka.utility.Messages$OpenCL$Tips WINDOWS -> WINDOWS
    neureka.utility.Messages$OpenCL$Tips UNKNOWN -> UNKNOWN
    java.lang.String HOW_TO_INSTALL_OPENCL -> HOW_TO_INSTALL_OPENCL
    java.lang.String HOW_TO_INSTALL_OPENCL_DRIVERS -> a
    neureka.utility.Messages$OpenCL$Tips[] $VALUES -> b
    106:106:neureka.utility.Messages$OpenCL$Tips[] values() -> values
    106:106:neureka.utility.Messages$OpenCL$Tips valueOf(java.lang.String) -> valueOf
    127:130:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    133:135:java.lang.String bootstrapTip() -> bootstrapTip
    106:106:java.lang.String access$100(neureka.utility.Messages$OpenCL$Tips) -> a
    106:119:void <clinit>() -> <clinit>
neureka.utility.Messages$Operations -> neureka.utility.Messages$Operations:
    144:144:void <init>() -> <init>
    147:148:java.lang.String illegalStateFor(java.lang.String) -> illegalStateFor
    155:157:java.lang.String loaded(neureka.backend.api.Operation) -> loaded
neureka.utility.SettingsLoader -> neureka.utility.SettingsLoader:
    java.lang.String _settings_source -> a
    java.lang.String _setup_source -> b
    60:60:void <init>() -> <init>
    66:99:void loadProperties(neureka.Neureka) -> loadProperties
    158:169:java.lang.Object tryGroovyClosureOn(java.lang.Object,java.lang.Object) -> tryGroovyClosureOn
    174:193:void tryGroovyScriptsOn(neureka.Neureka,java.util.function.Consumer) -> tryGroovyScriptsOn
    94:94:void lambda$loadProperties$19(neureka.Neureka$Settings,java.lang.Boolean) -> a
    93:93:void lambda$loadProperties$18(neureka.Neureka$Settings,java.lang.Class) -> a
    92:92:void lambda$loadProperties$17(neureka.Neureka$Settings,java.lang.Boolean) -> b
    91:91:void lambda$loadProperties$16(neureka.Neureka$Settings,java.lang.Boolean) -> c
    90:90:void lambda$loadProperties$15(neureka.Neureka$Settings,java.lang.Boolean) -> d
    89:89:void lambda$loadProperties$14(neureka.Neureka$Settings,java.lang.Boolean) -> e
    88:88:void lambda$loadProperties$13(neureka.Neureka$Settings,java.lang.Boolean) -> f
    87:87:void lambda$loadProperties$12(neureka.Neureka$Settings,java.lang.Boolean) -> g
    86:86:void lambda$loadProperties$11(neureka.Neureka$Settings,java.lang.Integer) -> a
    85:85:void lambda$loadProperties$10(neureka.Neureka$Settings,java.lang.Boolean) -> h
    84:84:void lambda$loadProperties$9(neureka.Neureka$Settings,java.lang.Boolean) -> i
    83:83:void lambda$loadProperties$8(neureka.Neureka$Settings,java.lang.Boolean) -> j
    82:82:void lambda$loadProperties$7(neureka.Neureka$Settings,java.lang.Integer) -> b
    81:81:void lambda$loadProperties$6(neureka.Neureka$Settings,java.lang.Boolean) -> k
    80:80:void lambda$loadProperties$5(neureka.Neureka$Settings,java.lang.Boolean) -> l
    79:79:void lambda$loadProperties$4(neureka.Neureka$Settings,java.lang.Boolean) -> m
    78:78:void lambda$loadProperties$3(neureka.Neureka$Settings,java.lang.Boolean) -> n
    77:77:void lambda$loadProperties$2(neureka.Neureka$Settings,java.lang.Boolean) -> o
    76:76:void lambda$loadProperties$1(neureka.Neureka$Settings,java.lang.Boolean) -> p
    75:75:void lambda$loadProperties$0(neureka.Neureka$Settings,java.lang.Boolean) -> q
neureka.utility.SettingsLoader$TypeChecker -> neureka.utility.SettingsLoader$a:
    org.slf4j.Logger _LOG -> a
    java.util.Properties _properties -> b
    107:107:void <init>(java.util.Properties) -> <init>
    110:145:neureka.utility.SettingsLoader$TypeChecker checkAndAssign(java.lang.String,java.lang.Class,java.util.function.Consumer) -> a
    103:103:void <clinit>() -> <clinit>
neureka.utility.TsrAsString -> neureka.utility.TsrAsString:
    int _padding -> a
    int _shortage -> b
    boolean _hasGradient -> c
    boolean _isCompact -> d
    boolean _isFormatted -> e
    boolean _hasValue -> f
    boolean _hasShape -> g
    boolean _hasRecursiveGraph -> h
    boolean _hasDerivatives -> i
    boolean _isCellBound -> j
    int[] _shape -> k
    neureka.Tsr _tensor -> l
    java.lang.StringBuilder _asStr -> m
    boolean _legacy -> n
    java.util.Map _config -> o
    boolean $assertionsDisabled -> p
    61:102:void <init>(neureka.Tsr,java.util.Map) -> <init>
    61:110:void <init>(neureka.Tsr,java.lang.String) -> <init>
    61:118:void <init>(neureka.Tsr) -> <init>
    122:155:void _construct(neureka.Tsr,java.util.Map) -> a
    168:169:neureka.utility.TsrAsString _$(java.lang.String) -> a
    183:184:neureka.utility.TsrAsString _$(int) -> a
    199:220:neureka.utility.TsrAsString$ValStringifier _createValStringifierAndFormatter(java.lang.Object) -> a
    1230:1255:neureka.utility.TsrAsString$ValStringifier _createBasicStringifierFor(java.lang.Object,boolean):230:255 -> a
    1230:1255:neureka.utility.TsrAsString$ValStringifier _createValStringifierAndFormatter(java.lang.Object):199 -> a
    1262:1265:int _typeAdjustedPadding():262:265 -> a
    1262:1265:neureka.utility.TsrAsString$ValStringifier _createValStringifierAndFormatter(java.lang.Object):200 -> a
    270:270:java.lang.String toString() -> toString
    275:327:java.lang.String toString(java.lang.String) -> toString
    332:343:void _stringifyAllValues() -> a
    359:368:void _buildRow(int,int,int,int[],java.util.function.Function,java.lang.String) -> a
    384:448:void _recursiveFormatting(int[],int) -> a
    451:461:neureka.utility.TsrAsString _buildSingleLabel(neureka.framing.NDFrame,int,int[]) -> a
    470:477:void _strShape() -> b
    421:421:java.lang.String lambda$_recursiveFormatting$13(neureka.utility.TsrAsString$ValStringifier,int[]) -> a
    420:420:java.lang.String lambda$_recursiveFormatting$12(neureka.utility.TsrAsString$ValStringifier,int[]) -> b
    407:407:java.lang.String lambda$_recursiveFormatting$11(neureka.utility.TsrAsString$ValStringifier,int[]) -> c
    322:324:void lambda$toString$10(java.lang.String,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    304:315:void lambda$toString$9(java.lang.String,java.lang.String,java.lang.String,java.lang.String,neureka.autograd.GraphNode,neureka.autograd.ADAgent) -> a
    255:255:java.lang.String lambda$_createBasicStringifierFor$8(java.lang.Object,int) -> a
    251:253:java.lang.String lambda$_createBasicStringifierFor$7(boolean,int) -> a
    247:249:java.lang.String lambda$_createBasicStringifierFor$6(boolean,java.lang.Object,int) -> a
    243:245:java.lang.String lambda$_createBasicStringifierFor$5(boolean,java.lang.Object,int) -> b
    239:241:java.lang.String lambda$_createBasicStringifierFor$4(boolean,java.lang.Object,int) -> c
    235:237:java.lang.String lambda$_createBasicStringifierFor$3(boolean,java.lang.Object,int) -> d
    231:233:java.lang.String lambda$_createBasicStringifierFor$2(boolean,java.lang.Object,int) -> e
    213:216:java.lang.String lambda$_createValStringifierAndFormatter$1(neureka.utility.TsrAsString$ValStringifier,int,int) -> a
    203:207:java.lang.String lambda$_createValStringifierAndFormatter$0(neureka.utility.TsrAsString$ValStringifier,int,int) -> b
    59:59:void <clinit>() -> <clinit>
neureka.utility.TsrAsString$Should -> neureka.utility.TsrAsString$Should:
    neureka.utility.TsrAsString$Should BE_FORMATTED -> BE_FORMATTED
    neureka.utility.TsrAsString$Should HAVE_PADDING_OF -> HAVE_PADDING_OF
    neureka.utility.TsrAsString$Should BE_COMPACT -> BE_COMPACT
    neureka.utility.TsrAsString$Should HAVE_GRADIENT -> HAVE_GRADIENT
    neureka.utility.TsrAsString$Should BE_SHORTENED_BY -> BE_SHORTENED_BY
    neureka.utility.TsrAsString$Should HAVE_VALUE -> HAVE_VALUE
    neureka.utility.TsrAsString$Should HAVE_SHAPE -> HAVE_SHAPE
    neureka.utility.TsrAsString$Should HAVE_DERIVATIVES -> HAVE_DERIVATIVES
    neureka.utility.TsrAsString$Should HAVE_RECURSIVE_GRAPH -> HAVE_RECURSIVE_GRAPH
    neureka.utility.TsrAsString$Should BE_CELL_BOUND -> BE_CELL_BOUND
    neureka.utility.TsrAsString$Should[] $VALUES -> a
    79:79:neureka.utility.TsrAsString$Should[] values() -> values
    79:79:neureka.utility.TsrAsString$Should valueOf(java.lang.String) -> valueOf
    79:79:void <init>(java.lang.String,int) -> <init>
    79:89:void <clinit>() -> <clinit>
neureka.utility.TsrAsString$Util -> neureka.utility.TsrAsString$Util:
    484:484:void <init>() -> <init>
    488:488:java.lang.String indent(int) -> indent
    493:493:java.lang.String pad(int,java.lang.String) -> pad
    498:498:java.lang.String pad(java.lang.String,int) -> pad
    504:519:java.lang.String formatFP(double) -> formatFP
    525:538:java.util.Map configFromCode(java.lang.String) -> configFromCode
neureka.utility.TsrAsString$ValStringifier -> neureka.utility.TsrAsString$a:
    java.lang.String stringify(int) -> stringify
neureka.utility.fluent.TensorBuilder -> neureka.utility.fluent.TensorBuilder:
    neureka.dtype.DataType _dataType -> a
    int[] _shape -> b
    java.lang.Object _from -> c
    java.lang.Object _to -> d
    65:65:void <init>(java.lang.Class) -> <init>
    73:73:neureka.Tsr andFill(java.lang.Object[]) -> andFill
    83:83:neureka.Tsr andWhere(neureka.ndim.Initializer) -> andWhere
    86:86:neureka.utility.fluent.states.To iterativelyFilledFrom(java.lang.Object) -> iterativelyFilledFrom
    89:89:neureka.Tsr all(java.lang.Object) -> all
    92:92:neureka.utility.fluent.states.IterByOrIterFromOrAll withShape(int[]) -> withShape
    95:95:neureka.Tsr vector(java.lang.Object[]) -> vector
    98:98:neureka.Tsr scalar(java.lang.Object) -> scalar
    101:101:neureka.utility.fluent.states.Step to(java.lang.Object) -> to
    105:170:neureka.Tsr step(double) -> step
    174:176:int _size() -> a
    180:192:java.lang.Object _checked(java.lang.Object) -> a
    139:139:long lambda$step$5(java.util.List,int) -> a
    137:137:int lambda$step$4(int) -> a
    128:128:double lambda$step$3(java.util.List,int) -> b
    126:126:int lambda$step$2(int) -> b
    117:117:int lambda$step$1(java.util.List,int) -> c
    115:115:int lambda$step$0(int) -> c
neureka.utility.fluent.states.IterByOrIterFromOrAll -> neureka.utility.fluent.states.IterByOrIterFromOrAll:
    neureka.Tsr andFill(java.lang.Object[]) -> andFill
    neureka.Tsr andWhere(neureka.ndim.Initializer) -> andWhere
    neureka.utility.fluent.states.To iterativelyFilledFrom(java.lang.Object) -> iterativelyFilledFrom
    neureka.Tsr all(java.lang.Object) -> all
neureka.utility.fluent.states.Step -> neureka.utility.fluent.states.Step:
    neureka.Tsr step(double) -> step
neureka.utility.fluent.states.To -> neureka.utility.fluent.states.To:
    neureka.utility.fluent.states.Step to(java.lang.Object) -> to
neureka.utility.fluent.states.WithShapeOrScalarOrVector -> neureka.utility.fluent.states.WithShapeOrScalarOrVector:
    neureka.utility.fluent.states.IterByOrIterFromOrAll withShape(int[]) -> withShape
    neureka.Tsr vector(java.lang.Object[]) -> vector
    neureka.Tsr scalar(java.lang.Object) -> scalar
neureka.utility.slicing.AxisSliceBuilder -> neureka.utility.slicing.AxisSliceBuilder:
    neureka.utility.slicing.AxisSliceBuilder$Resolution _then -> a
    int _from -> b
    int _to -> c
    int _steps -> d
    20:25:void <init>(int,neureka.utility.slicing.AxisSliceBuilder$Resolution) -> <init>
    38:39:neureka.utility.slicing.states.To from(int) -> from
    53:54:neureka.utility.slicing.states.StepsOrAxisOrGet to(int) -> to
    68:69:neureka.utility.slicing.states.AxisOrGet step(int) -> step
    83:85:neureka.utility.slicing.states.AxisOrGet at(int) -> at
    94:94:neureka.utility.slicing.states.FromOrAt axis(int) -> axis
    99:99:neureka.Tsr get() -> get
    104:105:void resolve() -> resolve
neureka.utility.slicing.AxisSliceBuilder$Resolution -> neureka.utility.slicing.AxisSliceBuilder$a:
    neureka.utility.slicing.SliceBuilder resolve(int,int,int) -> resolve
neureka.utility.slicing.SliceBuilder -> neureka.utility.slicing.SliceBuilder:
    java.util.function.Supplier _create -> a
    neureka.utility.slicing.AxisSliceBuilder[] _axisSliceBuilders -> b
    39:72:void <init>(neureka.Tsr,neureka.utility.slicing.SliceBuilder$CreationCallback) -> <init>
    84:85:neureka.utility.slicing.states.FromOrAt axis(int) -> axis
    97:97:neureka.Tsr get() -> get
    67:70:neureka.Tsr lambda$new$1(neureka.utility.slicing.SliceBuilder$CreationCallback,int[],int[],int[]) -> a
    50:63:neureka.utility.slicing.SliceBuilder lambda$new$0(int[],int,int[],int[],int[],int,int,int) -> a
neureka.utility.slicing.SliceBuilder$CreationCallback -> neureka.utility.slicing.SliceBuilder$CreationCallback:
    neureka.Tsr sliceOf(int[],int[],int[]) -> sliceOf
neureka.utility.slicing.SmartSlicer -> neureka.utility.slicing.SmartSlicer:
    org.slf4j.Logger _LOG -> a
    18:18:void <init>() -> <init>
    30:124:neureka.Tsr slice(java.lang.Object[],neureka.Tsr,neureka.utility.slicing.SliceBuilder$CreationCallback) -> slice
    23:23:void <clinit>() -> <clinit>
neureka.utility.slicing.states.AxisOrGet -> neureka.utility.slicing.states.AxisOrGet:
    neureka.utility.slicing.states.FromOrAt axis(int) -> axis
    neureka.Tsr get() -> get
neureka.utility.slicing.states.FromOrAt -> neureka.utility.slicing.states.FromOrAt:
    neureka.utility.slicing.states.To from(int) -> from
    neureka.utility.slicing.states.AxisOrGet at(int) -> at
neureka.utility.slicing.states.StepsOrAxisOrGet -> neureka.utility.slicing.states.StepsOrAxisOrGet:
    neureka.utility.slicing.states.AxisOrGet step(int) -> step
neureka.utility.slicing.states.To -> neureka.utility.slicing.states.To:
    neureka.utility.slicing.states.StepsOrAxisOrGet to(int) -> to
