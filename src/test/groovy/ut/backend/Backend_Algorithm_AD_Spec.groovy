package ut.backend

import neureka.Neureka
import neureka.Tsr
import neureka.autograd.ADAgent
import neureka.calculus.args.Arg
import neureka.calculus.Function
import neureka.backend.api.ExecutionCall
import neureka.backend.api.Algorithm
import neureka.backend.standard.algorithms.Activation
import neureka.backend.standard.algorithms.Broadcast
import neureka.backend.standard.algorithms.Convolution
import neureka.backend.standard.algorithms.Operator
import neureka.ndim.AbstractTensor
import neureka.ndim.config.NDConfiguration
import spock.lang.Specification

class Backend_Algorithm_AD_Spec extends Specification
{

    def 'Operator implementations behave as expected.'(
            Algorithm imp
    ){

        given : 'The current Neureka instance is being reset.'
            Neureka.get().reset()

        and : 'A mock Function.'
            def function = Mock(Function)
            def derivative = Mock(Tsr)
            function.executeDerive(*_) >> derivative
            def mutate = Mock(AbstractTensor.Unsafe)
            derivative.getUnsafe() >> mutate

        and : 'A mock ExecutionCall.'
            def call = Mock(ExecutionCall)
            call.getTensors() >> new Tsr<?>[0]

        when : 'A new ADAgent is being instantiated by calling the given implementation with these arguments...'
            ADAgent agent = imp.supplyADAgentFor(
                                    function,
                                    call,
                                    true
                            )

        then : 'The agent is configured to perform forward-AD and it contains the derivative generated by the function!'
            agent.hasForward()
            agent.derivative() == derivative

        when : 'The agent generator is called once more with the forward flag set to false...'
            agent = imp.supplyADAgentFor(
                    function,
                    call,
                    false
            )

        then : 'The result is similar except the agent is not configured to perform forward-AD as was the case previously.'
            agent.hasForward()
            agent.derivative() == derivative

        where : 'The variable "imp" is from a List of OperationType implementations of type "Operator".'
            imp << Neureka.get().backend()
                    .getOperations()
                    .stream()
                    .filter(
                            e -> e.isOperator() && e.getOperator().length()==1 && e.supports( Operator.class )
                    ).map(
                    e -> e.getAlgorithm( Operator.class )
                    )
    }


    def 'Activation implementations behave as expected.'(
            Algorithm imp
    ){

        given : 'The current Neureka instance is being reset.'
            Neureka.get().reset()

        and : 'A mock Function.'
            def function = Mock(Function)
            def derivative = Mock(Tsr)
            def mutate = Mock(AbstractTensor.Unsafe)
            function.derive(*_) >> derivative
            function.executeDerive(*_) >> derivative
            derivative.getUnsafe() >> mutate

        and : 'A mock ExecutionCall.'
            def call = Mock(ExecutionCall)
            call.getTensors() >> new Tsr[0]

        when : 'A new ADAgent is being instantiated by calling the given implementation with these arguments...'
            ADAgent agent = imp.supplyADAgentFor(
                                    function,
                                    call,
                                    true
                                )

        then : 'The agent is configured to perform forward-AD and it contains the derivative generated by the function!'
            agent.hasForward()
            agent.derivative() == derivative

        when : 'The agent generator is called once more with the forward flag set to false...'
            agent = imp.supplyADAgentFor(
                                function,
                                call,
                                false
                            )

        then : 'The result is similar except the agent is not configured to perform forward-AD as was the case previously.'
            //!agent.isForward() //TODO: Fix this!
            agent.derivative() == derivative

        where : 'The variable "imp" is from a List of OperationType implementations of type "Activation".'
            imp << Neureka.get().backend()
                .getOperations()
                .stream()
                .filter(
                        e ->
                                        e.supports( Activation.class )
                ).map( e -> e.getAlgorithm( Activation.class ) )
    }


    def 'Convolution implementations behave as expected.'(
            Algorithm imp
    ){

        given : 'The current Neureka instance is being reset.'
            Neureka.get().reset()

        and : 'A mock Function.'
            def function = Mock(Function)
            def derivative = Mock(Tsr)
            function.derive(*_) >> derivative
            function.executeDerive(*_) >> derivative

        and : 'A mock ExecutionCall.'
            def call = Mock(ExecutionCall)

        when : 'A new ADAgent is being instantiated by calling the given implementation with these arguments...'
            ADAgent agent = imp.supplyADAgentFor(
                                    function,
                                    call,
                                    true
                            )

        then : 'An exception is being thrown because implementations of type "Convolution" can only perform reverse mode AD!'
            def exception = thrown(IllegalArgumentException)
            exception.message == "Convolution does not support forward-AD!"

        when : 'The agent generator is called once more with the forward flag set to false...'
            agent = imp.supplyADAgentFor(
                                function,
                                call,
                                false
                            )
        then :
            (1.._) * call.getTensors() >> [Tsr.of(1), Tsr.of(2)]

        then : 'No exception is being thrown and the agent is configured to perform backward-AD.'
            //!agent.isForward() //TODO: Fix this
            agent.derivative() == derivative

        where : 'The variable "imp" is from a List of OperationType implementations of type "Convolution".'
            imp << Neureka.get().backend()
                                .getOperations()
                                .stream()
                                .filter(
                                        e ->
                                                e.isOperator() &&
                                                        e.getOperator().length()==1 &&
                                                            e.supports( Convolution.class )
                                ).map( e -> e.getAlgorithm( Convolution.class ) )
    }



    def 'Broadcast implementations behave as expected.'(
            Algorithm imp
    ){

        given : 'The current Neureka instance is being reset.'
            Neureka.get().reset()

        and : 'A mock Function.'
            def function = Mock( Function )
            def derivative = Mock( Tsr )
            def ndConf = Mock(NDConfiguration)
            function.derive(*_) >> derivative
            function.executeDerive(*_) >> derivative
            derivative.getNDConf() >> ndConf
            ndConf.shape() >> [1, 2]
            derivative.getValueClass() >> Float

        and : 'A mock ExecutionCall.'
            def call = Mock( ExecutionCall )
            def arg = Mock(Arg.Derivative)
            call.get(Arg.Derivative.class) >> arg


        when : 'A new ADAgent is being instantiated by calling the given implementation with these arguments...'
            ADAgent agent = imp.supplyADAgentFor(
                                function,
                                call,
                                true
                            )

        then : 'An exception is being thrown because implementations of type "Broadcast" can only perform reverse mode AD!'
            def exception = thrown( IllegalArgumentException )
            exception.message == "Broadcast implementation does not support forward-AD!"

        when : 'The agent generator is called once more with the forward flag set to false...'
            agent = imp.supplyADAgentFor(
                            function,
                            call,
                            false
                        )

        then :
            (1.._) * call.getTensors() >> new Tsr[]{derivative, derivative}
        and : 'No exception is being thrown and the agent is configured to perform backward-AD.'
            agent.hasForward()
            agent.derivative() == derivative || agent.derivative().toString({it.isMultiline=false}) == "(1x2):[  0.0 ,   0.0 ]"

        where : 'The variable "imp" is from a List of OperationType implementations of type "Convolution".'
            imp << Neureka.get().backend()
                                .getOperations()
                                .stream()
                                .filter(
                                        e ->
                                                e.isOperator() &&
                                                        e.supports( Broadcast.class )
                                )
                                .map( e -> e.getAlgorithm( Broadcast.class ) )
    }



}
