<%
// A Java method which takes a string and replaces single breaks with spaces, but leaves multiple consecutive breaks in:
def noSingleBreaks = { String s ->
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '\n') {
            if ( i > 0 && i + 1 < s.length() && s.charAt(i) == '\n' && s.charAt(i+1) != '\n' && s.charAt(i-1) != '\n')
                sb.append(' ');
            else
                sb.append('\n');
        }
        else sb.append(s.charAt(i));
    }
    return sb.toString().trim();
}
def trim = {it -> noSingleBreaks(it.replaceAll("\\s+", " ").replace("(\\n\\n)\\n*", "\n\n"))}
def simpleEsc = {it.toString().replace("\\", "\\\\").replace("\"", "\\\"").replace("\b", "\\b").replace("\f", "\\f").replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t")}
def esc = { trim(simpleEsc(it).trim()) }
def strList = { it.isEmpty() ? "" : (it.size() == 1 ? ('"'+esc(it[0])+'"') : ('"'+it.collect({simpleEsc(it)}).join('","'))+'"')}

//----

println("Generating json for '"+utils.getSpecClassName( data )+"' now!")

def stats = utils.stats( data )
%>{
  "className":"${utils.getSpecClassName( data )}",
  "statistics":{
    "runs":"${stats.totalRuns}",
    "successRate":"${fmt.toPercentage(stats.successRate)}",
    "failures":"${stats.failures}",
    "errors":"${stats.errors}",
    "skipped":"${stats.skipped}",
    "duration":"${fmt.toTimeDuration(stats.time)}"
  },
<%
  def specTitle = utils.specAnnotation( data, spock.lang.Title )?.value()
%>
  "title":"<% if ( specTitle ) { out << esc(specTitle) } %>",
  "narrative":"<% if ( data.info.narrative ) { out << esc(data.info.narrative) } %>",
<%
  def writeTagOrAttachment = {feature ->
    def tagsByKey = feature.tags.groupBy( {t -> t.key} )
    out << '"tags":{'
    tagsByKey.each {key, values ->
      out << '"' << key.capitalize() << '"['
      out << values.collect({tag->esc(tag.url)}).collect({'"'+it+'"'}).join(",")
      out << '],'
    }
    out << '},'
    out << '"see":['
    if ( feature.attachments.size > 0 ) out << feature.attachments.collect({v->esc(v.url)}).collect({'"'+it+'"'}).join(",")
    out << '],'
  }
  def writeHeaders = { headers ->
    out << '  "headers":['
    if ( headers ) out << headers.collect({v->esc(esc(v))}).collect({'"'+it+'"'}).join(",")
    out << '],'
  }
  def writeExtraInfo = { extraInfo ->
    out << '"extraInfo":['
    if ( extraInfo ) out << extraInfo.collect({v->esc(esc(v))}).collect({'"'+it+'"'}).join(",")
    out << ']'
  }
  writeHeaders( utils.specHeaders( data ) )
  writeTagOrAttachment data.info
%>
  "features":[ <%
    def i = 0
    def size = 0
    features.eachFeature { name, result, blocks, iterations, params -> size++ }
    features.eachFeature { name, result, blocks, iterations, params ->
      def feature = delegate
      def iterationTimes = iterations.collect { it.time ?: 0L }
      def totalTime = fmt.toTimeDuration( iterationTimes.sum() )
  %>
    {
      "id":"${esc(name)}",
      "result":"$result",
      "duration":"$totalTime",
      "iterations":{
      <%
      writeTagOrAttachment( feature )
      if (result != "IGNORED") {
        if ( utils.isUnrolled( feature ) )
          iterations.each { iter ->
            writeExtraInfo( utils.nextSpecExtraInfo( data, feature, iter.info ) )
          }
        else
            writeExtraInfo( utils.nextSpecExtraInfo( data, feature ) )
      }
      else writeExtraInfo( null )
      %>
      },
      "blocks":[
<% out << blocks.collect({ b -> '        {' +
            '"kind":"'  + esc(b.kind.replace(':', '').toLowerCase())   + '",' +
            '"text":"'  + esc(b.text)                                  + '",' +
            '"code":[' + strList(b.sourceCode) + ']' + '}'
        }).join(",\n") %>
      ],<%
      def executedIterations = iterations.findAll {it.dataValues || it.errors}
      def problems = executedIterations.findAll {it.errors}
      %>
      "problems":"${executedIterations.findAll {it.errors}}"
    }<%
    i++
    if( i < size ){ out << "," }
    %>
  <%
  } // FEATURE LOOP END
  %>
  ],
  "generator":"<%out << com.athaydes.spockframework.report.SpockReportExtension.PROJECT_URL%>"
}